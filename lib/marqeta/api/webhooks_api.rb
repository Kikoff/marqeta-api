=begin
#Marqeta Core API

#Simplified management of your payment programs

The version of the OpenAPI document: 3.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.0.0

=end

require 'cgi'

module Marqeta
  class WebhooksApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Returns a list of webhook configurations
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :active Return only active webhook configurations (default to false)
    # @option opts [Integer] :count Number of reward programs to retrieve (default to 5)
    # @option opts [Integer] :start_index Start index (default to 0)
    # @option opts [String] :fields Comma-delimited list of fields to return (e.g. field_1,field_2,..). Leave blank to return all fields.
    # @option opts [String] :sort_by Sort order (default to '-createdTime')
    # @return [WebhookResponseModelListResponse]
    def get_webhooks(opts = {})
      data, _status_code, _headers = get_webhooks_with_http_info(opts)
      data
    end

    # Returns a list of webhook configurations
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :active Return only active webhook configurations
    # @option opts [Integer] :count Number of reward programs to retrieve
    # @option opts [Integer] :start_index Start index
    # @option opts [String] :fields Comma-delimited list of fields to return (e.g. field_1,field_2,..). Leave blank to return all fields.
    # @option opts [String] :sort_by Sort order
    # @return [Array<(WebhookResponseModelListResponse, Integer, Hash)>] WebhookResponseModelListResponse data, response status code and response headers
    def get_webhooks_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WebhooksApi.get_webhooks ...'
      end
      # resource path
      local_var_path = '/webhooks'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'active'] = opts[:'active'] if !opts[:'active'].nil?
      query_params[:'count'] = opts[:'count'] if !opts[:'count'].nil?
      query_params[:'start_index'] = opts[:'start_index'] if !opts[:'start_index'].nil?
      query_params[:'fields'] = opts[:'fields'] if !opts[:'fields'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'WebhookResponseModelListResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"WebhooksApi.get_webhooks",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WebhooksApi#get_webhooks\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns a webhook configuration
    # @param token [String] Webhook token
    # @param [Hash] opts the optional parameters
    # @return [WebhookResponseModel]
    def get_webhooks_token(token, opts = {})
      data, _status_code, _headers = get_webhooks_token_with_http_info(token, opts)
      data
    end

    # Returns a webhook configuration
    # @param token [String] Webhook token
    # @param [Hash] opts the optional parameters
    # @return [Array<(WebhookResponseModel, Integer, Hash)>] WebhookResponseModel data, response status code and response headers
    def get_webhooks_token_with_http_info(token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WebhooksApi.get_webhooks_token ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling WebhooksApi.get_webhooks_token"
      end
      # resource path
      local_var_path = '/webhooks/{token}'.sub('{' + 'token' + '}', CGI.escape(token.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'WebhookResponseModel'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"WebhooksApi.get_webhooks_token",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WebhooksApi#get_webhooks_token\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Creates a webhook configuration
    # @param [Hash] opts the optional parameters
    # @option opts [WebhookRequestModel] :body 
    # @return [WebhookResponseModel]
    def post_webhooks(opts = {})
      data, _status_code, _headers = post_webhooks_with_http_info(opts)
      data
    end

    # Creates a webhook configuration
    # @param [Hash] opts the optional parameters
    # @option opts [WebhookRequestModel] :body 
    # @return [Array<(WebhookResponseModel, Integer, Hash)>] WebhookResponseModel data, response status code and response headers
    def post_webhooks_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WebhooksApi.post_webhooks ...'
      end
      # resource path
      local_var_path = '/webhooks'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'body'])

      # return_type
      return_type = opts[:debug_return_type] || 'WebhookResponseModel'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"WebhooksApi.post_webhooks",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WebhooksApi#post_webhooks\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Replays an event to a webhook
    # @param token [String] Webhook token
    # @param event_type [String] Event type
    # @param event_token [String] Event token
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def post_webhooks_token_eventtype_eventtoken(token, event_type, event_token, opts = {})
      post_webhooks_token_eventtype_eventtoken_with_http_info(token, event_type, event_token, opts)
      nil
    end

    # Replays an event to a webhook
    # @param token [String] Webhook token
    # @param event_type [String] Event type
    # @param event_token [String] Event token
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def post_webhooks_token_eventtype_eventtoken_with_http_info(token, event_type, event_token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WebhooksApi.post_webhooks_token_eventtype_eventtoken ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling WebhooksApi.post_webhooks_token_eventtype_eventtoken"
      end
      # verify the required parameter 'event_type' is set
      if @api_client.config.client_side_validation && event_type.nil?
        fail ArgumentError, "Missing the required parameter 'event_type' when calling WebhooksApi.post_webhooks_token_eventtype_eventtoken"
      end
      # verify enum value
      allowable_values = ["chargebacktransition", "digitalwallettokentransition", "cardtransition", "usertransition", "businesstransition", "transaction"]
      if @api_client.config.client_side_validation && !allowable_values.include?(event_type)
        fail ArgumentError, "invalid value for \"event_type\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'event_token' is set
      if @api_client.config.client_side_validation && event_token.nil?
        fail ArgumentError, "Missing the required parameter 'event_token' when calling WebhooksApi.post_webhooks_token_eventtype_eventtoken"
      end
      # resource path
      local_var_path = '/webhooks/{token}/{event_type}/{event_token}'.sub('{' + 'token' + '}', CGI.escape(token.to_s)).sub('{' + 'event_type' + '}', CGI.escape(event_type.to_s)).sub('{' + 'event_token' + '}', CGI.escape(event_token.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"WebhooksApi.post_webhooks_token_eventtype_eventtoken",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WebhooksApi#post_webhooks_token_eventtype_eventtoken\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Pings a webhook
    # Endpoints must respond with a 200 status code.
    # @param token [String] Ping a webhook
    # @param [Hash] opts the optional parameters
    # @return [WebhookPingModel]
    def post_webhooks_token_ping(token, opts = {})
      data, _status_code, _headers = post_webhooks_token_ping_with_http_info(token, opts)
      data
    end

    # Pings a webhook
    # Endpoints must respond with a 200 status code.
    # @param token [String] Ping a webhook
    # @param [Hash] opts the optional parameters
    # @return [Array<(WebhookPingModel, Integer, Hash)>] WebhookPingModel data, response status code and response headers
    def post_webhooks_token_ping_with_http_info(token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WebhooksApi.post_webhooks_token_ping ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling WebhooksApi.post_webhooks_token_ping"
      end
      # resource path
      local_var_path = '/webhooks/{token}/ping'.sub('{' + 'token' + '}', CGI.escape(token.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'WebhookPingModel'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"WebhooksApi.post_webhooks_token_ping",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WebhooksApi#post_webhooks_token_ping\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Updates a specific webhook configuration with custom headers
    # @param token [String] Webhook token
    # @param [Hash] opts the optional parameters
    # @option opts [WebhookUpdateCustomHeaderRequest] :body 
    # @return [WebhookResponseModel]
    def put_webhooks_custom_headers_token(token, opts = {})
      data, _status_code, _headers = put_webhooks_custom_headers_token_with_http_info(token, opts)
      data
    end

    # Updates a specific webhook configuration with custom headers
    # @param token [String] Webhook token
    # @param [Hash] opts the optional parameters
    # @option opts [WebhookUpdateCustomHeaderRequest] :body 
    # @return [Array<(WebhookResponseModel, Integer, Hash)>] WebhookResponseModel data, response status code and response headers
    def put_webhooks_custom_headers_token_with_http_info(token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WebhooksApi.put_webhooks_custom_headers_token ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling WebhooksApi.put_webhooks_custom_headers_token"
      end
      # resource path
      local_var_path = '/webhooks/customheaders/{token}'.sub('{' + 'token' + '}', CGI.escape(token.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'body'])

      # return_type
      return_type = opts[:debug_return_type] || 'WebhookResponseModel'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"WebhooksApi.put_webhooks_custom_headers_token",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WebhooksApi#put_webhooks_custom_headers_token\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Updates a specific webhook configuration
    # @param token [String] Webhook token
    # @param [Hash] opts the optional parameters
    # @option opts [WebhookBaseModel] :body 
    # @return [WebhookResponseModel]
    def put_webhooks_token(token, opts = {})
      data, _status_code, _headers = put_webhooks_token_with_http_info(token, opts)
      data
    end

    # Updates a specific webhook configuration
    # @param token [String] Webhook token
    # @param [Hash] opts the optional parameters
    # @option opts [WebhookBaseModel] :body 
    # @return [Array<(WebhookResponseModel, Integer, Hash)>] WebhookResponseModel data, response status code and response headers
    def put_webhooks_token_with_http_info(token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WebhooksApi.put_webhooks_token ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling WebhooksApi.put_webhooks_token"
      end
      # resource path
      local_var_path = '/webhooks/{token}'.sub('{' + 'token' + '}', CGI.escape(token.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'body'])

      # return_type
      return_type = opts[:debug_return_type] || 'WebhookResponseModel'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"WebhooksApi.put_webhooks_token",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WebhooksApi#put_webhooks_token\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
