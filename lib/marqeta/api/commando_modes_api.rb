=begin
#Marqeta Core API

#Simplified management of your payment programs

The version of the OpenAPI document: 3.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.0.0

=end

require 'cgi'

module Marqeta
  class CommandoModesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Lists all commando mode control sets
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :count Number of commando modes to retrieve (default to 5)
    # @option opts [Integer] :start_index Start index (default to 0)
    # @option opts [String] :sort_by Sort order (default to '-lastModifiedTime')
    # @return [CommandoModeListResponse]
    def get_commandomodes(opts = {})
      data, _status_code, _headers = get_commandomodes_with_http_info(opts)
      data
    end

    # Lists all commando mode control sets
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :count Number of commando modes to retrieve
    # @option opts [Integer] :start_index Start index
    # @option opts [String] :sort_by Sort order
    # @return [Array<(CommandoModeListResponse, Integer, Hash)>] CommandoModeListResponse data, response status code and response headers
    def get_commandomodes_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CommandoModesApi.get_commandomodes ...'
      end
      # resource path
      local_var_path = '/commandomodes'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'count'] = opts[:'count'] if !opts[:'count'].nil?
      query_params[:'start_index'] = opts[:'start_index'] if !opts[:'start_index'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CommandoModeListResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"CommandoModesApi.get_commandomodes",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CommandoModesApi#get_commandomodes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Lists all commando mode transitions related to a commando mode control set
    # @param commandomode_token [String] Commando mode token
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :count Number of transitions to retrieve (default to 5)
    # @option opts [Integer] :start_index Start index (default to 0)
    # @option opts [String] :sort_by Sort order (default to '-createdTime')
    # @return [CommandoModeTransitionListResponse]
    def get_commandomodes_commandomodetoken_transitions(commandomode_token, opts = {})
      data, _status_code, _headers = get_commandomodes_commandomodetoken_transitions_with_http_info(commandomode_token, opts)
      data
    end

    # Lists all commando mode transitions related to a commando mode control set
    # @param commandomode_token [String] Commando mode token
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :count Number of transitions to retrieve
    # @option opts [Integer] :start_index Start index
    # @option opts [String] :sort_by Sort order
    # @return [Array<(CommandoModeTransitionListResponse, Integer, Hash)>] CommandoModeTransitionListResponse data, response status code and response headers
    def get_commandomodes_commandomodetoken_transitions_with_http_info(commandomode_token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CommandoModesApi.get_commandomodes_commandomodetoken_transitions ...'
      end
      # verify the required parameter 'commandomode_token' is set
      if @api_client.config.client_side_validation && commandomode_token.nil?
        fail ArgumentError, "Missing the required parameter 'commandomode_token' when calling CommandoModesApi.get_commandomodes_commandomodetoken_transitions"
      end
      # resource path
      local_var_path = '/commandomodes/{commandomode_token}/transitions'.sub('{' + 'commandomode_token' + '}', CGI.escape(commandomode_token.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'count'] = opts[:'count'] if !opts[:'count'].nil?
      query_params[:'start_index'] = opts[:'start_index'] if !opts[:'start_index'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CommandoModeTransitionListResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"CommandoModesApi.get_commandomodes_commandomodetoken_transitions",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CommandoModesApi#get_commandomodes_commandomodetoken_transitions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns a specific commando mode control set
    # @param token [String] 
    # @param [Hash] opts the optional parameters
    # @return [CommandoModeResponse]
    def get_commandomodes_token(token, opts = {})
      data, _status_code, _headers = get_commandomodes_token_with_http_info(token, opts)
      data
    end

    # Returns a specific commando mode control set
    # @param token [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CommandoModeResponse, Integer, Hash)>] CommandoModeResponse data, response status code and response headers
    def get_commandomodes_token_with_http_info(token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CommandoModesApi.get_commandomodes_token ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling CommandoModesApi.get_commandomodes_token"
      end
      # resource path
      local_var_path = '/commandomodes/{token}'.sub('{' + 'token' + '}', CGI.escape(token.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CommandoModeResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"CommandoModesApi.get_commandomodes_token",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CommandoModesApi#get_commandomodes_token\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns a specific commando mode transition
    # @param token [String] Commando mode transition token
    # @param [Hash] opts the optional parameters
    # @return [CommandoModeTransitionResponse]
    def get_commandomodes_transitions_token(token, opts = {})
      data, _status_code, _headers = get_commandomodes_transitions_token_with_http_info(token, opts)
      data
    end

    # Returns a specific commando mode transition
    # @param token [String] Commando mode transition token
    # @param [Hash] opts the optional parameters
    # @return [Array<(CommandoModeTransitionResponse, Integer, Hash)>] CommandoModeTransitionResponse data, response status code and response headers
    def get_commandomodes_transitions_token_with_http_info(token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CommandoModesApi.get_commandomodes_transitions_token ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling CommandoModesApi.get_commandomodes_transitions_token"
      end
      # resource path
      local_var_path = '/commandomodes/transitions/{token}'.sub('{' + 'token' + '}', CGI.escape(token.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CommandoModeTransitionResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"CommandoModesApi.get_commandomodes_transitions_token",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CommandoModesApi#get_commandomodes_transitions_token\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
