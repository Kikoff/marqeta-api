=begin
#Marqeta Core API

#Simplified management of your payment programs

The version of the OpenAPI document: 3.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.0.0

=end

require 'cgi'

module Marqeta
  class TransactionsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Returns transactions
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :count Number of transactions to retrieve (default to 10)
    # @option opts [Integer] :start_index Start index (default to 0)
    # @option opts [String] :fields Comma-delimited list of fields to return (e.g. field_1,field_2,..). Leave blank to return all fields.
    # @option opts [String] :sort_by Sort order (default to '-user_transaction_time')
    # @option opts [String] :start_date Start date (yyyy-MM-dd | yyyy-MM-ddTHH:mm:ss.SS)
    # @option opts [String] :end_date End date (yyyy-MM-dd | yyyy-MM-ddTHH:mm:ss.SS)
    # @option opts [String] :type Comma-delimited list of transaction types to include
    # @option opts [String] :user_token User token
    # @option opts [String] :business_token Business token
    # @option opts [String] :acting_user_token Acting user token
    # @option opts [String] :card_token Card token
    # @option opts [String] :merchant_token Merchant token
    # @option opts [String] :campaign_token Campaign token
    # @option opts [String] :state Comma-delimited list of transaction states to display e.g. PENDING | CLEARED | COMPLETION | DECLINED | ERROR | ALL (default to 'PENDING,COMPLETION')
    # @option opts [String] :version 
    # @option opts [Boolean] :verbose 
    # @return [TransactionModelListResponse]
    def get_transactions(opts = {})
      data, _status_code, _headers = get_transactions_with_http_info(opts)
      data
    end

    # Returns transactions
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :count Number of transactions to retrieve
    # @option opts [Integer] :start_index Start index
    # @option opts [String] :fields Comma-delimited list of fields to return (e.g. field_1,field_2,..). Leave blank to return all fields.
    # @option opts [String] :sort_by Sort order
    # @option opts [String] :start_date Start date (yyyy-MM-dd | yyyy-MM-ddTHH:mm:ss.SS)
    # @option opts [String] :end_date End date (yyyy-MM-dd | yyyy-MM-ddTHH:mm:ss.SS)
    # @option opts [String] :type Comma-delimited list of transaction types to include
    # @option opts [String] :user_token User token
    # @option opts [String] :business_token Business token
    # @option opts [String] :acting_user_token Acting user token
    # @option opts [String] :card_token Card token
    # @option opts [String] :merchant_token Merchant token
    # @option opts [String] :campaign_token Campaign token
    # @option opts [String] :state Comma-delimited list of transaction states to display e.g. PENDING | CLEARED | COMPLETION | DECLINED | ERROR | ALL
    # @option opts [String] :version 
    # @option opts [Boolean] :verbose 
    # @return [Array<(TransactionModelListResponse, Integer, Hash)>] TransactionModelListResponse data, response status code and response headers
    def get_transactions_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TransactionsApi.get_transactions ...'
      end
      allowable_values = ["-created_time", "created_time", "-user_transaction_time", "user_transaction_time"]
      if @api_client.config.client_side_validation && opts[:'sort_by'] && !allowable_values.include?(opts[:'sort_by'])
        fail ArgumentError, "invalid value for \"sort_by\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/transactions'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'count'] = opts[:'count'] if !opts[:'count'].nil?
      query_params[:'start_index'] = opts[:'start_index'] if !opts[:'start_index'].nil?
      query_params[:'fields'] = opts[:'fields'] if !opts[:'fields'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?
      query_params[:'start_date'] = opts[:'start_date'] if !opts[:'start_date'].nil?
      query_params[:'end_date'] = opts[:'end_date'] if !opts[:'end_date'].nil?
      query_params[:'type'] = opts[:'type'] if !opts[:'type'].nil?
      query_params[:'user_token'] = opts[:'user_token'] if !opts[:'user_token'].nil?
      query_params[:'business_token'] = opts[:'business_token'] if !opts[:'business_token'].nil?
      query_params[:'acting_user_token'] = opts[:'acting_user_token'] if !opts[:'acting_user_token'].nil?
      query_params[:'card_token'] = opts[:'card_token'] if !opts[:'card_token'].nil?
      query_params[:'merchant_token'] = opts[:'merchant_token'] if !opts[:'merchant_token'].nil?
      query_params[:'campaign_token'] = opts[:'campaign_token'] if !opts[:'campaign_token'].nil?
      query_params[:'state'] = opts[:'state'] if !opts[:'state'].nil?
      query_params[:'version'] = opts[:'version'] if !opts[:'version'].nil?
      query_params[:'verbose'] = opts[:'verbose'] if !opts[:'verbose'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'TransactionModelListResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"TransactionsApi.get_transactions",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TransactionsApi#get_transactions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns transactions for a specific funding account
    # @param funding_source_token [String] Funding account token
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :count Number of transactions to retrieve (default to 10)
    # @option opts [Integer] :start_index Start index (default to 0)
    # @option opts [String] :fields Comma-delimited list of fields to return (e.g. field_1,field_2,..). Leave blank to return all fields.
    # @option opts [String] :sort_by Sort order (default to '-user_transaction_time')
    # @option opts [String] :start_date Start date (yyyy-MM-dd)
    # @option opts [String] :end_date End date (yyyy-MM-dd)
    # @option opts [String] :type Comma-delimited list of transaction types to include
    # @option opts [String] :polarity Type of transactions to retrieve: CREDIT or DEBIT
    # @option opts [String] :version 
    # @option opts [Boolean] :verbose 
    # @return [TransactionModelListResponse]
    def get_transactions_fundingsource_fundingsourcetoken(funding_source_token, opts = {})
      data, _status_code, _headers = get_transactions_fundingsource_fundingsourcetoken_with_http_info(funding_source_token, opts)
      data
    end

    # Returns transactions for a specific funding account
    # @param funding_source_token [String] Funding account token
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :count Number of transactions to retrieve
    # @option opts [Integer] :start_index Start index
    # @option opts [String] :fields Comma-delimited list of fields to return (e.g. field_1,field_2,..). Leave blank to return all fields.
    # @option opts [String] :sort_by Sort order
    # @option opts [String] :start_date Start date (yyyy-MM-dd)
    # @option opts [String] :end_date End date (yyyy-MM-dd)
    # @option opts [String] :type Comma-delimited list of transaction types to include
    # @option opts [String] :polarity Type of transactions to retrieve: CREDIT or DEBIT
    # @option opts [String] :version 
    # @option opts [Boolean] :verbose 
    # @return [Array<(TransactionModelListResponse, Integer, Hash)>] TransactionModelListResponse data, response status code and response headers
    def get_transactions_fundingsource_fundingsourcetoken_with_http_info(funding_source_token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TransactionsApi.get_transactions_fundingsource_fundingsourcetoken ...'
      end
      # verify the required parameter 'funding_source_token' is set
      if @api_client.config.client_side_validation && funding_source_token.nil?
        fail ArgumentError, "Missing the required parameter 'funding_source_token' when calling TransactionsApi.get_transactions_fundingsource_fundingsourcetoken"
      end
      allowable_values = ["-created_time", "created_time", "-user_transaction_time", "user_transaction_time"]
      if @api_client.config.client_side_validation && opts[:'sort_by'] && !allowable_values.include?(opts[:'sort_by'])
        fail ArgumentError, "invalid value for \"sort_by\", must be one of #{allowable_values}"
      end
      allowable_values = ["CREDIT", "DEBIT", "PENDING_CREDIT", "PENDING_DEBIT"]
      if @api_client.config.client_side_validation && opts[:'polarity'] && !allowable_values.include?(opts[:'polarity'])
        fail ArgumentError, "invalid value for \"polarity\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/transactions/fundingsource/{funding_source_token}'.sub('{' + 'funding_source_token' + '}', CGI.escape(funding_source_token.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'count'] = opts[:'count'] if !opts[:'count'].nil?
      query_params[:'start_index'] = opts[:'start_index'] if !opts[:'start_index'].nil?
      query_params[:'fields'] = opts[:'fields'] if !opts[:'fields'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?
      query_params[:'start_date'] = opts[:'start_date'] if !opts[:'start_date'].nil?
      query_params[:'end_date'] = opts[:'end_date'] if !opts[:'end_date'].nil?
      query_params[:'type'] = opts[:'type'] if !opts[:'type'].nil?
      query_params[:'polarity'] = opts[:'polarity'] if !opts[:'polarity'].nil?
      query_params[:'version'] = opts[:'version'] if !opts[:'version'].nil?
      query_params[:'verbose'] = opts[:'verbose'] if !opts[:'verbose'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'TransactionModelListResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"TransactionsApi.get_transactions_fundingsource_fundingsourcetoken",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TransactionsApi#get_transactions_fundingsource_fundingsourcetoken\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns a transaction
    # @param token [String] Transaction token
    # @param [Hash] opts the optional parameters
    # @option opts [String] :fields Comma-delimited list of fields to return (e.g. field_1,field_2,..). Leave blank to return all fields.
    # @option opts [String] :version 
    # @option opts [Boolean] :verbose 
    # @return [TransactionModel]
    def get_transactions_token(token, opts = {})
      data, _status_code, _headers = get_transactions_token_with_http_info(token, opts)
      data
    end

    # Returns a transaction
    # @param token [String] Transaction token
    # @param [Hash] opts the optional parameters
    # @option opts [String] :fields Comma-delimited list of fields to return (e.g. field_1,field_2,..). Leave blank to return all fields.
    # @option opts [String] :version 
    # @option opts [Boolean] :verbose 
    # @return [Array<(TransactionModel, Integer, Hash)>] TransactionModel data, response status code and response headers
    def get_transactions_token_with_http_info(token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TransactionsApi.get_transactions_token ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling TransactionsApi.get_transactions_token"
      end
      # resource path
      local_var_path = '/transactions/{token}'.sub('{' + 'token' + '}', CGI.escape(token.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'fields'] = opts[:'fields'] if !opts[:'fields'].nil?
      query_params[:'version'] = opts[:'version'] if !opts[:'version'].nil?
      query_params[:'verbose'] = opts[:'verbose'] if !opts[:'verbose'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'TransactionModel'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"TransactionsApi.get_transactions_token",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TransactionsApi#get_transactions_token\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns related transactions
    # @param token [String] Transaction token
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :count Number of transactions to retrieve (default to 10)
    # @option opts [Integer] :start_index Start index (default to 0)
    # @option opts [String] :fields Comma-delimited list of fields to return (e.g. field_1,field_2,..). Leave blank to return all fields.
    # @option opts [String] :sort_by Sort order (default to '-user_transaction_time')
    # @option opts [String] :start_date Start date (yyyy-MM-dd | yyyy-MM-ddTHH:mm:ss.SS)
    # @option opts [String] :end_date End date (yyyy-MM-dd | yyyy-MM-ddTHH:mm:ss.SS)
    # @option opts [String] :type Comma-delimited list of transaction types to include
    # @option opts [String] :state Comma-delimited list of transaction states to display e.g. PENDING | CLEARED | COMPLETION | ALL (default to 'ALL')
    # @option opts [String] :version 
    # @option opts [Boolean] :verbose 
    # @return [TransactionModelListResponse]
    def get_transactions_token_related(token, opts = {})
      data, _status_code, _headers = get_transactions_token_related_with_http_info(token, opts)
      data
    end

    # Returns related transactions
    # @param token [String] Transaction token
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :count Number of transactions to retrieve
    # @option opts [Integer] :start_index Start index
    # @option opts [String] :fields Comma-delimited list of fields to return (e.g. field_1,field_2,..). Leave blank to return all fields.
    # @option opts [String] :sort_by Sort order
    # @option opts [String] :start_date Start date (yyyy-MM-dd | yyyy-MM-ddTHH:mm:ss.SS)
    # @option opts [String] :end_date End date (yyyy-MM-dd | yyyy-MM-ddTHH:mm:ss.SS)
    # @option opts [String] :type Comma-delimited list of transaction types to include
    # @option opts [String] :state Comma-delimited list of transaction states to display e.g. PENDING | CLEARED | COMPLETION | ALL
    # @option opts [String] :version 
    # @option opts [Boolean] :verbose 
    # @return [Array<(TransactionModelListResponse, Integer, Hash)>] TransactionModelListResponse data, response status code and response headers
    def get_transactions_token_related_with_http_info(token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TransactionsApi.get_transactions_token_related ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling TransactionsApi.get_transactions_token_related"
      end
      allowable_values = ["-created_time", "created_time", "-user_transaction_time", "user_transaction_time"]
      if @api_client.config.client_side_validation && opts[:'sort_by'] && !allowable_values.include?(opts[:'sort_by'])
        fail ArgumentError, "invalid value for \"sort_by\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/transactions/{token}/related'.sub('{' + 'token' + '}', CGI.escape(token.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'count'] = opts[:'count'] if !opts[:'count'].nil?
      query_params[:'start_index'] = opts[:'start_index'] if !opts[:'start_index'].nil?
      query_params[:'fields'] = opts[:'fields'] if !opts[:'fields'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?
      query_params[:'start_date'] = opts[:'start_date'] if !opts[:'start_date'].nil?
      query_params[:'end_date'] = opts[:'end_date'] if !opts[:'end_date'].nil?
      query_params[:'type'] = opts[:'type'] if !opts[:'type'].nil?
      query_params[:'state'] = opts[:'state'] if !opts[:'state'].nil?
      query_params[:'version'] = opts[:'version'] if !opts[:'version'].nil?
      query_params[:'verbose'] = opts[:'verbose'] if !opts[:'verbose'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'TransactionModelListResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"TransactionsApi.get_transactions_token_related",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TransactionsApi#get_transactions_token_related\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
