=begin
#Marqeta Core API

#Simplified management of your payment programs

The version of the OpenAPI document: 3.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.0.0

=end

require 'cgi'

module Marqeta
  class FundingSourcesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Returns a list of Program ACH funding sources
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :count Number of items to retrieve. Count can be between 1 - 10 items. (default to 5)
    # @option opts [Integer] :start_index Indicates from what row to start returning data. (default to 0)
    # @option opts [String] :fields Comma delimited list of fields to return (e.g. field_1,field_2,..)
    # @option opts [String] :sort_by Sort order (default to '-lastModifiedTime')
    # @return [ACHListResponse]
    def get_all_ach_funding_sources(opts = {})
      data, _status_code, _headers = get_all_ach_funding_sources_with_http_info(opts)
      data
    end

    # Returns a list of Program ACH funding sources
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :count Number of items to retrieve. Count can be between 1 - 10 items.
    # @option opts [Integer] :start_index Indicates from what row to start returning data.
    # @option opts [String] :fields Comma delimited list of fields to return (e.g. field_1,field_2,..)
    # @option opts [String] :sort_by Sort order
    # @return [Array<(ACHListResponse, Integer, Hash)>] ACHListResponse data, response status code and response headers
    def get_all_ach_funding_sources_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FundingSourcesApi.get_all_ach_funding_sources ...'
      end
      # resource path
      local_var_path = '/fundingsources/program/ach'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'count'] = opts[:'count'] if !opts[:'count'].nil?
      query_params[:'start_index'] = opts[:'start_index'] if !opts[:'start_index'].nil?
      query_params[:'fields'] = opts[:'fields'] if !opts[:'fields'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ACHListResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"FundingSourcesApi.get_all_ach_funding_sources",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FundingSourcesApi#get_all_ach_funding_sources\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns a user ACH account
    # @param funding_source_token [String] Funding account token
    # @param [Hash] opts the optional parameters
    # @return [AchResponseModel]
    def get_fundingsources_ach_fundingsourcetoken(funding_source_token, opts = {})
      data, _status_code, _headers = get_fundingsources_ach_fundingsourcetoken_with_http_info(funding_source_token, opts)
      data
    end

    # Returns a user ACH account
    # @param funding_source_token [String] Funding account token
    # @param [Hash] opts the optional parameters
    # @return [Array<(AchResponseModel, Integer, Hash)>] AchResponseModel data, response status code and response headers
    def get_fundingsources_ach_fundingsourcetoken_with_http_info(funding_source_token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FundingSourcesApi.get_fundingsources_ach_fundingsourcetoken ...'
      end
      # verify the required parameter 'funding_source_token' is set
      if @api_client.config.client_side_validation && funding_source_token.nil?
        fail ArgumentError, "Missing the required parameter 'funding_source_token' when calling FundingSourcesApi.get_fundingsources_ach_fundingsourcetoken"
      end
      # resource path
      local_var_path = '/fundingsources/ach/{funding_source_token}'.sub('{' + 'funding_source_token' + '}', CGI.escape(funding_source_token.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AchResponseModel'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"FundingSourcesApi.get_fundingsources_ach_fundingsourcetoken",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FundingSourcesApi#get_fundingsources_ach_fundingsourcetoken\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns the dollar amounts used to verify the ACH account
    # @param funding_source_token [String] Funding account token
    # @param [Hash] opts the optional parameters
    # @return [AchVerificationModel]
    def get_fundingsources_ach_fundingsourcetoken_verificationamounts(funding_source_token, opts = {})
      data, _status_code, _headers = get_fundingsources_ach_fundingsourcetoken_verificationamounts_with_http_info(funding_source_token, opts)
      data
    end

    # Returns the dollar amounts used to verify the ACH account
    # @param funding_source_token [String] Funding account token
    # @param [Hash] opts the optional parameters
    # @return [Array<(AchVerificationModel, Integer, Hash)>] AchVerificationModel data, response status code and response headers
    def get_fundingsources_ach_fundingsourcetoken_verificationamounts_with_http_info(funding_source_token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FundingSourcesApi.get_fundingsources_ach_fundingsourcetoken_verificationamounts ...'
      end
      # verify the required parameter 'funding_source_token' is set
      if @api_client.config.client_side_validation && funding_source_token.nil?
        fail ArgumentError, "Missing the required parameter 'funding_source_token' when calling FundingSourcesApi.get_fundingsources_ach_fundingsourcetoken_verificationamounts"
      end
      # resource path
      local_var_path = '/fundingsources/ach/{funding_source_token}/verificationamounts'.sub('{' + 'funding_source_token' + '}', CGI.escape(funding_source_token.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AchVerificationModel'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"FundingSourcesApi.get_fundingsources_ach_fundingsourcetoken_verificationamounts",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FundingSourcesApi#get_fundingsources_ach_fundingsourcetoken_verificationamounts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Lists all addresses for a business
    # @param business_token [String] Business token
    # @param [Hash] opts the optional parameters
    # @option opts [String] :fields Comma-delimited list of fields to return (e.g. field_1,field_2,..). Leave blank to return all fields.
    # @return [CardholderAddressListResponse]
    def get_fundingsources_addresses_business_businesstoken(business_token, opts = {})
      data, _status_code, _headers = get_fundingsources_addresses_business_businesstoken_with_http_info(business_token, opts)
      data
    end

    # Lists all addresses for a business
    # @param business_token [String] Business token
    # @param [Hash] opts the optional parameters
    # @option opts [String] :fields Comma-delimited list of fields to return (e.g. field_1,field_2,..). Leave blank to return all fields.
    # @return [Array<(CardholderAddressListResponse, Integer, Hash)>] CardholderAddressListResponse data, response status code and response headers
    def get_fundingsources_addresses_business_businesstoken_with_http_info(business_token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FundingSourcesApi.get_fundingsources_addresses_business_businesstoken ...'
      end
      # verify the required parameter 'business_token' is set
      if @api_client.config.client_side_validation && business_token.nil?
        fail ArgumentError, "Missing the required parameter 'business_token' when calling FundingSourcesApi.get_fundingsources_addresses_business_businesstoken"
      end
      # resource path
      local_var_path = '/fundingsources/addresses/business/{business_token}'.sub('{' + 'business_token' + '}', CGI.escape(business_token.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'fields'] = opts[:'fields'] if !opts[:'fields'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CardholderAddressListResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"FundingSourcesApi.get_fundingsources_addresses_business_businesstoken",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FundingSourcesApi#get_fundingsources_addresses_business_businesstoken\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns a user address for a funding source
    # @param funding_source_address_token [String] Funding source address token
    # @param [Hash] opts the optional parameters
    # @return [CardholderAddressResponse]
    def get_fundingsources_addresses_fundingsourceaddresstoken(funding_source_address_token, opts = {})
      data, _status_code, _headers = get_fundingsources_addresses_fundingsourceaddresstoken_with_http_info(funding_source_address_token, opts)
      data
    end

    # Returns a user address for a funding source
    # @param funding_source_address_token [String] Funding source address token
    # @param [Hash] opts the optional parameters
    # @return [Array<(CardholderAddressResponse, Integer, Hash)>] CardholderAddressResponse data, response status code and response headers
    def get_fundingsources_addresses_fundingsourceaddresstoken_with_http_info(funding_source_address_token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FundingSourcesApi.get_fundingsources_addresses_fundingsourceaddresstoken ...'
      end
      # verify the required parameter 'funding_source_address_token' is set
      if @api_client.config.client_side_validation && funding_source_address_token.nil?
        fail ArgumentError, "Missing the required parameter 'funding_source_address_token' when calling FundingSourcesApi.get_fundingsources_addresses_fundingsourceaddresstoken"
      end
      # resource path
      local_var_path = '/fundingsources/addresses/{funding_source_address_token}'.sub('{' + 'funding_source_address_token' + '}', CGI.escape(funding_source_address_token.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CardholderAddressResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"FundingSourcesApi.get_fundingsources_addresses_fundingsourceaddresstoken",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FundingSourcesApi#get_fundingsources_addresses_fundingsourceaddresstoken\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Lists all addresses for a user
    # @param user_token [String] User token
    # @param [Hash] opts the optional parameters
    # @option opts [String] :fields Comma-delimited list of fields to return (e.g. field_1,field_2,..). Leave blank to return all fields.
    # @return [CardholderAddressListResponse]
    def get_fundingsources_addresses_user_usertoken(user_token, opts = {})
      data, _status_code, _headers = get_fundingsources_addresses_user_usertoken_with_http_info(user_token, opts)
      data
    end

    # Lists all addresses for a user
    # @param user_token [String] User token
    # @param [Hash] opts the optional parameters
    # @option opts [String] :fields Comma-delimited list of fields to return (e.g. field_1,field_2,..). Leave blank to return all fields.
    # @return [Array<(CardholderAddressListResponse, Integer, Hash)>] CardholderAddressListResponse data, response status code and response headers
    def get_fundingsources_addresses_user_usertoken_with_http_info(user_token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FundingSourcesApi.get_fundingsources_addresses_user_usertoken ...'
      end
      # verify the required parameter 'user_token' is set
      if @api_client.config.client_side_validation && user_token.nil?
        fail ArgumentError, "Missing the required parameter 'user_token' when calling FundingSourcesApi.get_fundingsources_addresses_user_usertoken"
      end
      # resource path
      local_var_path = '/fundingsources/addresses/user/{user_token}'.sub('{' + 'user_token' + '}', CGI.escape(user_token.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'fields'] = opts[:'fields'] if !opts[:'fields'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CardholderAddressListResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"FundingSourcesApi.get_fundingsources_addresses_user_usertoken",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FundingSourcesApi#get_fundingsources_addresses_user_usertoken\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Lists all funding sources for a business
    # @param business_token [String] Business token
    # @param [Hash] opts the optional parameters
    # @option opts [String] :type Type, such as a payment card or ACH
    # @option opts [String] :fields Comma-delimited list of fields to return (e.g. field_1,field_2,..). Leave blank to return all fields.
    # @return [FundingAccountListResponse]
    def get_fundingsources_business_businesstoken(business_token, opts = {})
      data, _status_code, _headers = get_fundingsources_business_businesstoken_with_http_info(business_token, opts)
      data
    end

    # Lists all funding sources for a business
    # @param business_token [String] Business token
    # @param [Hash] opts the optional parameters
    # @option opts [String] :type Type, such as a payment card or ACH
    # @option opts [String] :fields Comma-delimited list of fields to return (e.g. field_1,field_2,..). Leave blank to return all fields.
    # @return [Array<(FundingAccountListResponse, Integer, Hash)>] FundingAccountListResponse data, response status code and response headers
    def get_fundingsources_business_businesstoken_with_http_info(business_token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FundingSourcesApi.get_fundingsources_business_businesstoken ...'
      end
      # verify the required parameter 'business_token' is set
      if @api_client.config.client_side_validation && business_token.nil?
        fail ArgumentError, "Missing the required parameter 'business_token' when calling FundingSourcesApi.get_fundingsources_business_businesstoken"
      end
      # resource path
      local_var_path = '/fundingsources/business/{business_token}'.sub('{' + 'business_token' + '}', CGI.escape(business_token.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'type'] = opts[:'type'] if !opts[:'type'].nil?
      query_params[:'fields'] = opts[:'fields'] if !opts[:'fields'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'FundingAccountListResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"FundingSourcesApi.get_fundingsources_business_businesstoken",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FundingSourcesApi#get_fundingsources_business_businesstoken\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns a specific payment card
    # @param funding_source_token [String] Funding token
    # @param [Hash] opts the optional parameters
    # @return [PaymentCardResponseModel]
    def get_fundingsources_paymentcard_fundingsourcetoken(funding_source_token, opts = {})
      data, _status_code, _headers = get_fundingsources_paymentcard_fundingsourcetoken_with_http_info(funding_source_token, opts)
      data
    end

    # Returns a specific payment card
    # @param funding_source_token [String] Funding token
    # @param [Hash] opts the optional parameters
    # @return [Array<(PaymentCardResponseModel, Integer, Hash)>] PaymentCardResponseModel data, response status code and response headers
    def get_fundingsources_paymentcard_fundingsourcetoken_with_http_info(funding_source_token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FundingSourcesApi.get_fundingsources_paymentcard_fundingsourcetoken ...'
      end
      # verify the required parameter 'funding_source_token' is set
      if @api_client.config.client_side_validation && funding_source_token.nil?
        fail ArgumentError, "Missing the required parameter 'funding_source_token' when calling FundingSourcesApi.get_fundingsources_paymentcard_fundingsourcetoken"
      end
      # resource path
      local_var_path = '/fundingsources/paymentcard/{funding_source_token}'.sub('{' + 'funding_source_token' + '}', CGI.escape(funding_source_token.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PaymentCardResponseModel'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"FundingSourcesApi.get_fundingsources_paymentcard_fundingsourcetoken",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FundingSourcesApi#get_fundingsources_paymentcard_fundingsourcetoken\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns a specific program funding source
    # @param token [String] Program funding source token
    # @param [Hash] opts the optional parameters
    # @return [ProgramFundingSourceResponse]
    def get_fundingsources_program_token(token, opts = {})
      data, _status_code, _headers = get_fundingsources_program_token_with_http_info(token, opts)
      data
    end

    # Returns a specific program funding source
    # @param token [String] Program funding source token
    # @param [Hash] opts the optional parameters
    # @return [Array<(ProgramFundingSourceResponse, Integer, Hash)>] ProgramFundingSourceResponse data, response status code and response headers
    def get_fundingsources_program_token_with_http_info(token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FundingSourcesApi.get_fundingsources_program_token ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling FundingSourcesApi.get_fundingsources_program_token"
      end
      # resource path
      local_var_path = '/fundingsources/program/{token}'.sub('{' + 'token' + '}', CGI.escape(token.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ProgramFundingSourceResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"FundingSourcesApi.get_fundingsources_program_token",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FundingSourcesApi#get_fundingsources_program_token\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns a gateway program funding source
    # @param token [String] Gateway program funding source token
    # @param [Hash] opts the optional parameters
    # @return [GatewayProgramFundingSourceResponse]
    def get_fundingsources_programgateway_token(token, opts = {})
      data, _status_code, _headers = get_fundingsources_programgateway_token_with_http_info(token, opts)
      data
    end

    # Returns a gateway program funding source
    # @param token [String] Gateway program funding source token
    # @param [Hash] opts the optional parameters
    # @return [Array<(GatewayProgramFundingSourceResponse, Integer, Hash)>] GatewayProgramFundingSourceResponse data, response status code and response headers
    def get_fundingsources_programgateway_token_with_http_info(token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FundingSourcesApi.get_fundingsources_programgateway_token ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling FundingSourcesApi.get_fundingsources_programgateway_token"
      end
      # resource path
      local_var_path = '/fundingsources/programgateway/{token}'.sub('{' + 'token' + '}', CGI.escape(token.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GatewayProgramFundingSourceResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"FundingSourcesApi.get_fundingsources_programgateway_token",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FundingSourcesApi#get_fundingsources_programgateway_token\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Lists all funding sources for a user
    # @param user_token [String] User token
    # @param [Hash] opts the optional parameters
    # @option opts [String] :type Type, such as a payment card or ACH
    # @option opts [String] :fields Comma-delimited list of fields to return (e.g. field_1,field_2,..). Leave blank to return all fields.
    # @return [FundingAccountListResponse]
    def get_fundingsources_user_usertoken(user_token, opts = {})
      data, _status_code, _headers = get_fundingsources_user_usertoken_with_http_info(user_token, opts)
      data
    end

    # Lists all funding sources for a user
    # @param user_token [String] User token
    # @param [Hash] opts the optional parameters
    # @option opts [String] :type Type, such as a payment card or ACH
    # @option opts [String] :fields Comma-delimited list of fields to return (e.g. field_1,field_2,..). Leave blank to return all fields.
    # @return [Array<(FundingAccountListResponse, Integer, Hash)>] FundingAccountListResponse data, response status code and response headers
    def get_fundingsources_user_usertoken_with_http_info(user_token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FundingSourcesApi.get_fundingsources_user_usertoken ...'
      end
      # verify the required parameter 'user_token' is set
      if @api_client.config.client_side_validation && user_token.nil?
        fail ArgumentError, "Missing the required parameter 'user_token' when calling FundingSourcesApi.get_fundingsources_user_usertoken"
      end
      # resource path
      local_var_path = '/fundingsources/user/{user_token}'.sub('{' + 'user_token' + '}', CGI.escape(user_token.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'type'] = opts[:'type'] if !opts[:'type'].nil?
      query_params[:'fields'] = opts[:'fields'] if !opts[:'fields'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'FundingAccountListResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"FundingSourcesApi.get_fundingsources_user_usertoken",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FundingSourcesApi#get_fundingsources_user_usertoken\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Registers an ACH funding source
    # @param [Hash] opts the optional parameters
    # @option opts [AchModel] :body 
    # @return [AchResponseModel]
    def post_fundingsources_ach(opts = {})
      data, _status_code, _headers = post_fundingsources_ach_with_http_info(opts)
      data
    end

    # Registers an ACH funding source
    # @param [Hash] opts the optional parameters
    # @option opts [AchModel] :body 
    # @return [Array<(AchResponseModel, Integer, Hash)>] AchResponseModel data, response status code and response headers
    def post_fundingsources_ach_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FundingSourcesApi.post_fundingsources_ach ...'
      end
      # resource path
      local_var_path = '/fundingsources/ach'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'body'])

      # return_type
      return_type = opts[:debug_return_type] || 'AchResponseModel'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"FundingSourcesApi.post_fundingsources_ach",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FundingSourcesApi#post_fundingsources_ach\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Creates an account holder address for a funding source
    # @param [Hash] opts the optional parameters
    # @option opts [CardHolderAddressModel] :body 
    # @return [CardholderAddressResponse]
    def post_fundingsources_addresses(opts = {})
      data, _status_code, _headers = post_fundingsources_addresses_with_http_info(opts)
      data
    end

    # Creates an account holder address for a funding source
    # @param [Hash] opts the optional parameters
    # @option opts [CardHolderAddressModel] :body 
    # @return [Array<(CardholderAddressResponse, Integer, Hash)>] CardholderAddressResponse data, response status code and response headers
    def post_fundingsources_addresses_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FundingSourcesApi.post_fundingsources_addresses ...'
      end
      # resource path
      local_var_path = '/fundingsources/addresses'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'body'])

      # return_type
      return_type = opts[:debug_return_type] || 'CardholderAddressResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"FundingSourcesApi.post_fundingsources_addresses",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FundingSourcesApi#post_fundingsources_addresses\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Registers a payment card funding source
    # @param [Hash] opts the optional parameters
    # @option opts [TokenRequest] :body 
    # @return [PaymentCardResponseModel]
    def post_fundingsources_paymentcard(opts = {})
      data, _status_code, _headers = post_fundingsources_paymentcard_with_http_info(opts)
      data
    end

    # Registers a payment card funding source
    # @param [Hash] opts the optional parameters
    # @option opts [TokenRequest] :body 
    # @return [Array<(PaymentCardResponseModel, Integer, Hash)>] PaymentCardResponseModel data, response status code and response headers
    def post_fundingsources_paymentcard_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FundingSourcesApi.post_fundingsources_paymentcard ...'
      end
      # resource path
      local_var_path = '/fundingsources/paymentcard'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'body'])

      # return_type
      return_type = opts[:debug_return_type] || 'PaymentCardResponseModel'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"FundingSourcesApi.post_fundingsources_paymentcard",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FundingSourcesApi#post_fundingsources_paymentcard\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Creates a program funding source
    # @param [Hash] opts the optional parameters
    # @option opts [ProgramFundingSourceRequest] :body 
    # @return [ProgramFundingSourceResponse]
    def post_fundingsources_program(opts = {})
      data, _status_code, _headers = post_fundingsources_program_with_http_info(opts)
      data
    end

    # Creates a program funding source
    # @param [Hash] opts the optional parameters
    # @option opts [ProgramFundingSourceRequest] :body 
    # @return [Array<(ProgramFundingSourceResponse, Integer, Hash)>] ProgramFundingSourceResponse data, response status code and response headers
    def post_fundingsources_program_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FundingSourcesApi.post_fundingsources_program ...'
      end
      # resource path
      local_var_path = '/fundingsources/program'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'body'])

      # return_type
      return_type = opts[:debug_return_type] || 'ProgramFundingSourceResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"FundingSourcesApi.post_fundingsources_program",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FundingSourcesApi#post_fundingsources_program\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Registers an ACH funding source for a program
    # @param [Hash] opts the optional parameters
    # @option opts [BaseAchRequestModel] :body 
    # @return [BaseAchResponseModel]
    def post_fundingsources_program_ach(opts = {})
      data, _status_code, _headers = post_fundingsources_program_ach_with_http_info(opts)
      data
    end

    # Registers an ACH funding source for a program
    # @param [Hash] opts the optional parameters
    # @option opts [BaseAchRequestModel] :body 
    # @return [Array<(BaseAchResponseModel, Integer, Hash)>] BaseAchResponseModel data, response status code and response headers
    def post_fundingsources_program_ach_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FundingSourcesApi.post_fundingsources_program_ach ...'
      end
      # resource path
      local_var_path = '/fundingsources/program/ach'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'body'])

      # return_type
      return_type = opts[:debug_return_type] || 'BaseAchResponseModel'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"FundingSourcesApi.post_fundingsources_program_ach",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FundingSourcesApi#post_fundingsources_program_ach\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Creates a gateway program funding source
    # @param [Hash] opts the optional parameters
    # @option opts [GatewayProgramFundingSourceRequest] :body 
    # @return [GatewayProgramFundingSourceResponse]
    def post_fundingsources_programgateway(opts = {})
      data, _status_code, _headers = post_fundingsources_programgateway_with_http_info(opts)
      data
    end

    # Creates a gateway program funding source
    # @param [Hash] opts the optional parameters
    # @option opts [GatewayProgramFundingSourceRequest] :body 
    # @return [Array<(GatewayProgramFundingSourceResponse, Integer, Hash)>] GatewayProgramFundingSourceResponse data, response status code and response headers
    def post_fundingsources_programgateway_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FundingSourcesApi.post_fundingsources_programgateway ...'
      end
      # resource path
      local_var_path = '/fundingsources/programgateway'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'body'])

      # return_type
      return_type = opts[:debug_return_type] || 'GatewayProgramFundingSourceResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"FundingSourcesApi.post_fundingsources_programgateway",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FundingSourcesApi#post_fundingsources_programgateway\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Verifies a bank account as a funding source
    # @param funding_source_token [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [AchVerificationModel] :body 
    # @return [AchResponseModel]
    def put_fundingsources_ach_fundingsourcetoken(funding_source_token, opts = {})
      data, _status_code, _headers = put_fundingsources_ach_fundingsourcetoken_with_http_info(funding_source_token, opts)
      data
    end

    # Verifies a bank account as a funding source
    # @param funding_source_token [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [AchVerificationModel] :body 
    # @return [Array<(AchResponseModel, Integer, Hash)>] AchResponseModel data, response status code and response headers
    def put_fundingsources_ach_fundingsourcetoken_with_http_info(funding_source_token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FundingSourcesApi.put_fundingsources_ach_fundingsourcetoken ...'
      end
      # verify the required parameter 'funding_source_token' is set
      if @api_client.config.client_side_validation && funding_source_token.nil?
        fail ArgumentError, "Missing the required parameter 'funding_source_token' when calling FundingSourcesApi.put_fundingsources_ach_fundingsourcetoken"
      end
      # resource path
      local_var_path = '/fundingsources/ach/{funding_source_token}'.sub('{' + 'funding_source_token' + '}', CGI.escape(funding_source_token.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'body'])

      # return_type
      return_type = opts[:debug_return_type] || 'AchResponseModel'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"FundingSourcesApi.put_fundingsources_ach_fundingsourcetoken",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FundingSourcesApi#put_fundingsources_ach_fundingsourcetoken\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Updates the account holder address for a funding source
    # @param funding_source_address_token [String] Funding source address token
    # @param [Hash] opts the optional parameters
    # @option opts [CardHolderAddressUpdateModel] :body 
    # @return [CardholderAddressResponse]
    def put_fundingsources_addresses_fundingsourceaddresstoken(funding_source_address_token, opts = {})
      data, _status_code, _headers = put_fundingsources_addresses_fundingsourceaddresstoken_with_http_info(funding_source_address_token, opts)
      data
    end

    # Updates the account holder address for a funding source
    # @param funding_source_address_token [String] Funding source address token
    # @param [Hash] opts the optional parameters
    # @option opts [CardHolderAddressUpdateModel] :body 
    # @return [Array<(CardholderAddressResponse, Integer, Hash)>] CardholderAddressResponse data, response status code and response headers
    def put_fundingsources_addresses_fundingsourceaddresstoken_with_http_info(funding_source_address_token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FundingSourcesApi.put_fundingsources_addresses_fundingsourceaddresstoken ...'
      end
      # verify the required parameter 'funding_source_address_token' is set
      if @api_client.config.client_side_validation && funding_source_address_token.nil?
        fail ArgumentError, "Missing the required parameter 'funding_source_address_token' when calling FundingSourcesApi.put_fundingsources_addresses_fundingsourceaddresstoken"
      end
      # resource path
      local_var_path = '/fundingsources/addresses/{funding_source_address_token}'.sub('{' + 'funding_source_address_token' + '}', CGI.escape(funding_source_address_token.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'body'])

      # return_type
      return_type = opts[:debug_return_type] || 'CardholderAddressResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"FundingSourcesApi.put_fundingsources_addresses_fundingsourceaddresstoken",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FundingSourcesApi#put_fundingsources_addresses_fundingsourceaddresstoken\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Updates a specific payment card 
    # @param funding_source_token [String] Funding account token
    # @param body [TokenUpdateRequest] Payment card
    # @param [Hash] opts the optional parameters
    # @return [PaymentCardResponseModel]
    def put_fundingsources_fundingsourcetoken(funding_source_token, body, opts = {})
      data, _status_code, _headers = put_fundingsources_fundingsourcetoken_with_http_info(funding_source_token, body, opts)
      data
    end

    # Updates a specific payment card 
    # @param funding_source_token [String] Funding account token
    # @param body [TokenUpdateRequest] Payment card
    # @param [Hash] opts the optional parameters
    # @return [Array<(PaymentCardResponseModel, Integer, Hash)>] PaymentCardResponseModel data, response status code and response headers
    def put_fundingsources_fundingsourcetoken_with_http_info(funding_source_token, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FundingSourcesApi.put_fundingsources_fundingsourcetoken ...'
      end
      # verify the required parameter 'funding_source_token' is set
      if @api_client.config.client_side_validation && funding_source_token.nil?
        fail ArgumentError, "Missing the required parameter 'funding_source_token' when calling FundingSourcesApi.put_fundingsources_fundingsourcetoken"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling FundingSourcesApi.put_fundingsources_fundingsourcetoken"
      end
      # resource path
      local_var_path = '/fundingsources/paymentcard/{funding_source_token}'.sub('{' + 'funding_source_token' + '}', CGI.escape(funding_source_token.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'PaymentCardResponseModel'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"FundingSourcesApi.put_fundingsources_fundingsourcetoken",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FundingSourcesApi#put_fundingsources_fundingsourcetoken\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Configures a default funding source
    # @param funding_source_token [String] Funding account
    # @param [Hash] opts the optional parameters
    # @return [PaymentCardResponseModel]
    def put_fundingsources_fundingsourcetoken_default(funding_source_token, opts = {})
      data, _status_code, _headers = put_fundingsources_fundingsourcetoken_default_with_http_info(funding_source_token, opts)
      data
    end

    # Configures a default funding source
    # @param funding_source_token [String] Funding account
    # @param [Hash] opts the optional parameters
    # @return [Array<(PaymentCardResponseModel, Integer, Hash)>] PaymentCardResponseModel data, response status code and response headers
    def put_fundingsources_fundingsourcetoken_default_with_http_info(funding_source_token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FundingSourcesApi.put_fundingsources_fundingsourcetoken_default ...'
      end
      # verify the required parameter 'funding_source_token' is set
      if @api_client.config.client_side_validation && funding_source_token.nil?
        fail ArgumentError, "Missing the required parameter 'funding_source_token' when calling FundingSourcesApi.put_fundingsources_fundingsourcetoken_default"
      end
      # resource path
      local_var_path = '/fundingsources/{funding_source_token}/default'.sub('{' + 'funding_source_token' + '}', CGI.escape(funding_source_token.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PaymentCardResponseModel'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"FundingSourcesApi.put_fundingsources_fundingsourcetoken_default",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FundingSourcesApi#put_fundingsources_fundingsourcetoken_default\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Updates a specific program funding source
    # @param token [String] Program funding source token
    # @param [Hash] opts the optional parameters
    # @option opts [ProgramFundingSourceUpdateRequest] :body 
    # @return [ProgramFundingSourceResponse]
    def put_fundingsources_program_token(token, opts = {})
      data, _status_code, _headers = put_fundingsources_program_token_with_http_info(token, opts)
      data
    end

    # Updates a specific program funding source
    # @param token [String] Program funding source token
    # @param [Hash] opts the optional parameters
    # @option opts [ProgramFundingSourceUpdateRequest] :body 
    # @return [Array<(ProgramFundingSourceResponse, Integer, Hash)>] ProgramFundingSourceResponse data, response status code and response headers
    def put_fundingsources_program_token_with_http_info(token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FundingSourcesApi.put_fundingsources_program_token ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling FundingSourcesApi.put_fundingsources_program_token"
      end
      # resource path
      local_var_path = '/fundingsources/program/{token}'.sub('{' + 'token' + '}', CGI.escape(token.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'body'])

      # return_type
      return_type = opts[:debug_return_type] || 'ProgramFundingSourceResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"FundingSourcesApi.put_fundingsources_program_token",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FundingSourcesApi#put_fundingsources_program_token\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Updates a specific gateway program funding source Custom headers
    # @param token [String] Gateway program funding source token
    # @param [Hash] opts the optional parameters
    # @option opts [GatewayProgramCustomHeaderUpdateRequest] :body 
    # @return [GatewayProgramFundingSourceResponse]
    def put_fundingsources_programgateway_custom_header_token(token, opts = {})
      data, _status_code, _headers = put_fundingsources_programgateway_custom_header_token_with_http_info(token, opts)
      data
    end

    # Updates a specific gateway program funding source Custom headers
    # @param token [String] Gateway program funding source token
    # @param [Hash] opts the optional parameters
    # @option opts [GatewayProgramCustomHeaderUpdateRequest] :body 
    # @return [Array<(GatewayProgramFundingSourceResponse, Integer, Hash)>] GatewayProgramFundingSourceResponse data, response status code and response headers
    def put_fundingsources_programgateway_custom_header_token_with_http_info(token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FundingSourcesApi.put_fundingsources_programgateway_custom_header_token ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling FundingSourcesApi.put_fundingsources_programgateway_custom_header_token"
      end
      # resource path
      local_var_path = '/fundingsources/programgateway/customheaders/{token}'.sub('{' + 'token' + '}', CGI.escape(token.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'body'])

      # return_type
      return_type = opts[:debug_return_type] || 'GatewayProgramFundingSourceResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"FundingSourcesApi.put_fundingsources_programgateway_custom_header_token",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FundingSourcesApi#put_fundingsources_programgateway_custom_header_token\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Updates a specific gateway program funding source
    # @param token [String] Gateway program funding source token
    # @param [Hash] opts the optional parameters
    # @option opts [GatewayProgramFundingSourceUpdateRequest] :body 
    # @return [GatewayProgramFundingSourceResponse]
    def put_fundingsources_programgateway_token(token, opts = {})
      data, _status_code, _headers = put_fundingsources_programgateway_token_with_http_info(token, opts)
      data
    end

    # Updates a specific gateway program funding source
    # @param token [String] Gateway program funding source token
    # @param [Hash] opts the optional parameters
    # @option opts [GatewayProgramFundingSourceUpdateRequest] :body 
    # @return [Array<(GatewayProgramFundingSourceResponse, Integer, Hash)>] GatewayProgramFundingSourceResponse data, response status code and response headers
    def put_fundingsources_programgateway_token_with_http_info(token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FundingSourcesApi.put_fundingsources_programgateway_token ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling FundingSourcesApi.put_fundingsources_programgateway_token"
      end
      # resource path
      local_var_path = '/fundingsources/programgateway/{token}'.sub('{' + 'token' + '}', CGI.escape(token.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'body'])

      # return_type
      return_type = opts[:debug_return_type] || 'GatewayProgramFundingSourceResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"FundingSourcesApi.put_fundingsources_programgateway_token",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FundingSourcesApi#put_fundingsources_programgateway_token\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
