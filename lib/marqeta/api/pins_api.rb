=begin
#Marqeta Core API

#Simplified management of your payment programs

The version of the OpenAPI document: 3.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.0.0

=end

require 'cgi'

module Marqeta
  class PinsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Creates a new control token for a PIN
    # Creates a new control token for a PIN, for the specified card for PIN debit or ATM transactions,or to allow for a pin to be revealed to authorized callers.
    # @param [Hash] opts the optional parameters
    # @option opts [ControlTokenRequest] :body 
    # @return [ControlTokenResponse]
    def post_pins_controltoken(opts = {})
      data, _status_code, _headers = post_pins_controltoken_with_http_info(opts)
      data
    end

    # Creates a new control token for a PIN
    # Creates a new control token for a PIN, for the specified card for PIN debit or ATM transactions,or to allow for a pin to be revealed to authorized callers.
    # @param [Hash] opts the optional parameters
    # @option opts [ControlTokenRequest] :body 
    # @return [Array<(ControlTokenResponse, Integer, Hash)>] ControlTokenResponse data, response status code and response headers
    def post_pins_controltoken_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PinsApi.post_pins_controltoken ...'
      end
      # resource path
      local_var_path = '/pins/controltoken'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'body'])

      # return_type
      return_type = opts[:debug_return_type] || 'ControlTokenResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"PinsApi.post_pins_controltoken",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PinsApi#post_pins_controltoken\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Updates the PIN control token
    # Updates a PIN identified by its control token.
    # @param [Hash] opts the optional parameters
    # @option opts [PinRequest] :body 
    # @return [nil]
    def put_pins(opts = {})
      put_pins_with_http_info(opts)
      nil
    end

    # Updates the PIN control token
    # Updates a PIN identified by its control token.
    # @param [Hash] opts the optional parameters
    # @option opts [PinRequest] :body 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def put_pins_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PinsApi.put_pins ...'
      end
      # resource path
      local_var_path = '/pins'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'body'])

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"PinsApi.put_pins",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PinsApi#put_pins\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Updates the PIN-reveal control token
    # Reveals pin for card associated with given control token.
    # @param [Hash] opts the optional parameters
    # @option opts [PinRevealRequest] :body 
    # @return [nil]
    def reveal_pins(opts = {})
      reveal_pins_with_http_info(opts)
      nil
    end

    # Updates the PIN-reveal control token
    # Reveals pin for card associated with given control token.
    # @param [Hash] opts the optional parameters
    # @option opts [PinRevealRequest] :body 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def reveal_pins_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PinsApi.reveal_pins ...'
      end
      # resource path
      local_var_path = '/pins/reveal'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'body'])

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"PinsApi.reveal_pins",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PinsApi#reveal_pins\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
