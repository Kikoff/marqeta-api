=begin
#Marqeta Core API

#Simplified management of your payment programs

The version of the OpenAPI document: 3.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.0.0

=end

require 'cgi'

module Marqeta
  class ProgramReserveApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # @param [Hash] opts the optional parameters
    # @option opts [ProgramReserveDepositRequest] :body 
    # @return [nil]
    def deposit(opts = {})
      deposit_with_http_info(opts)
      nil
    end

    # @param [Hash] opts the optional parameters
    # @option opts [ProgramReserveDepositRequest] :body 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def deposit_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProgramReserveApi.deposit ...'
      end
      # resource path
      local_var_path = '/programreserve/deposits'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'body'])

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ProgramReserveApi.deposit",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProgramReserveApi#deposit\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :count Number of items to retrieve (default to 5)
    # @option opts [Integer] :start_index Start index (default to 0)
    # @option opts [String] :sort_by Sort order (default to '-createdTime')
    # @return [nil]
    def get_program_reserve_deposits(opts = {})
      get_program_reserve_deposits_with_http_info(opts)
      nil
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :count Number of items to retrieve
    # @option opts [Integer] :start_index Start index
    # @option opts [String] :sort_by Sort order
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def get_program_reserve_deposits_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProgramReserveApi.get_program_reserve_deposits ...'
      end
      # resource path
      local_var_path = '/programreserve/deposits'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'count'] = opts[:'count'] if !opts[:'count'].nil?
      query_params[:'start_index'] = opts[:'start_index'] if !opts[:'start_index'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ProgramReserveApi.get_program_reserve_deposits",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProgramReserveApi#get_program_reserve_deposits\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns the latest balance in the program reserve account
    # @param [Hash] opts the optional parameters
    # @return [ProgramReserveAccountBalance]
    def get_programreserve_balances(opts = {})
      data, _status_code, _headers = get_programreserve_balances_with_http_info(opts)
      data
    end

    # Returns the latest balance in the program reserve account
    # @param [Hash] opts the optional parameters
    # @return [Array<(ProgramReserveAccountBalance, Integer, Hash)>] ProgramReserveAccountBalance data, response status code and response headers
    def get_programreserve_balances_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProgramReserveApi.get_programreserve_balances ...'
      end
      # resource path
      local_var_path = '/programreserve/balances'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ProgramReserveAccountBalance'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ProgramReserveApi.get_programreserve_balances",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProgramReserveApi#get_programreserve_balances\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns a list of program reserve transactions (credits and debits)
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :count Number of items to retrieve (default to 5)
    # @option opts [Integer] :start_index Start index (default to 0)
    # @option opts [String] :sort_by Sort order (default to '-createdTime')
    # @option opts [String] :body Type
    # @return [ProgramReserveTransactionListResponse]
    def get_programreserve_transactions(opts = {})
      data, _status_code, _headers = get_programreserve_transactions_with_http_info(opts)
      data
    end

    # Returns a list of program reserve transactions (credits and debits)
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :count Number of items to retrieve
    # @option opts [Integer] :start_index Start index
    # @option opts [String] :sort_by Sort order
    # @option opts [String] :body Type
    # @return [Array<(ProgramReserveTransactionListResponse, Integer, Hash)>] ProgramReserveTransactionListResponse data, response status code and response headers
    def get_programreserve_transactions_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProgramReserveApi.get_programreserve_transactions ...'
      end
      # resource path
      local_var_path = '/programreserve/transactions'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'count'] = opts[:'count'] if !opts[:'count'].nil?
      query_params[:'start_index'] = opts[:'start_index'] if !opts[:'start_index'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'body'])

      # return_type
      return_type = opts[:debug_return_type] || 'ProgramReserveTransactionListResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ProgramReserveApi.get_programreserve_transactions",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProgramReserveApi#get_programreserve_transactions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Credits or debits the program reserve account
    # @param [Hash] opts the optional parameters
    # @option opts [ProgramReserveTransactionRequest] :body 
    # @return [ProgramReserveTransactionResponse]
    def post_programreserve_transactions(opts = {})
      data, _status_code, _headers = post_programreserve_transactions_with_http_info(opts)
      data
    end

    # Credits or debits the program reserve account
    # @param [Hash] opts the optional parameters
    # @option opts [ProgramReserveTransactionRequest] :body 
    # @return [Array<(ProgramReserveTransactionResponse, Integer, Hash)>] ProgramReserveTransactionResponse data, response status code and response headers
    def post_programreserve_transactions_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProgramReserveApi.post_programreserve_transactions ...'
      end
      # resource path
      local_var_path = '/programreserve/transactions'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'body'])

      # return_type
      return_type = opts[:debug_return_type] || 'ProgramReserveTransactionResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ProgramReserveApi.post_programreserve_transactions",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProgramReserveApi#post_programreserve_transactions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
