=begin
#Marqeta Core API

#Simplified management of your payment programs

The version of the OpenAPI document: 3.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.0.0

=end

require 'cgi'

module Marqeta
  class SimulateApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Simulates an advanced clearing/settlement transaction
    # @param [Hash] opts the optional parameters
    # @option opts [AdvancedClearingRequestModel] :body 
    # @return [AdvancedSimulationResponseModel]
    def post_simulate_advanced_clearing(opts = {})
      data, _status_code, _headers = post_simulate_advanced_clearing_with_http_info(opts)
      data
    end

    # Simulates an advanced clearing/settlement transaction
    # @param [Hash] opts the optional parameters
    # @option opts [AdvancedClearingRequestModel] :body 
    # @return [Array<(AdvancedSimulationResponseModel, Integer, Hash)>] AdvancedSimulationResponseModel data, response status code and response headers
    def post_simulate_advanced_clearing_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SimulateApi.post_simulate_advanced_clearing ...'
      end
      # resource path
      local_var_path = '/simulate/advanced/clearing'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'body'])

      # return_type
      return_type = opts[:debug_return_type] || 'AdvancedSimulationResponseModel'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"SimulateApi.post_simulate_advanced_clearing",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SimulateApi#post_simulate_advanced_clearing\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Simulates an authorization
    # @param [Hash] opts the optional parameters
    # @option opts [AuthRequestModel] :body 
    # @return [SimulationResponseModel]
    def post_simulate_authorization(opts = {})
      data, _status_code, _headers = post_simulate_authorization_with_http_info(opts)
      data
    end

    # Simulates an authorization
    # @param [Hash] opts the optional parameters
    # @option opts [AuthRequestModel] :body 
    # @return [Array<(SimulationResponseModel, Integer, Hash)>] SimulationResponseModel data, response status code and response headers
    def post_simulate_authorization_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SimulateApi.post_simulate_authorization ...'
      end
      # resource path
      local_var_path = '/simulate/authorization'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'body'])

      # return_type
      return_type = opts[:debug_return_type] || 'SimulationResponseModel'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"SimulateApi.post_simulate_authorization",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SimulateApi#post_simulate_authorization\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Simulates an authorization advice transaction
    # @param [Hash] opts the optional parameters
    # @option opts [AuthorizationAdviceModel] :body 
    # @return [SimulationResponseModel]
    def post_simulate_authorization_advice(opts = {})
      data, _status_code, _headers = post_simulate_authorization_advice_with_http_info(opts)
      data
    end

    # Simulates an authorization advice transaction
    # @param [Hash] opts the optional parameters
    # @option opts [AuthorizationAdviceModel] :body 
    # @return [Array<(SimulationResponseModel, Integer, Hash)>] SimulationResponseModel data, response status code and response headers
    def post_simulate_authorization_advice_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SimulateApi.post_simulate_authorization_advice ...'
      end
      # resource path
      local_var_path = '/simulate/authorization/advice'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'body'])

      # return_type
      return_type = opts[:debug_return_type] || 'SimulationResponseModel'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"SimulateApi.post_simulate_authorization_advice",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SimulateApi#post_simulate_authorization_advice\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Simulates a clearing/settlement transaction
    # @param [Hash] opts the optional parameters
    # @option opts [ClearingModel] :body 
    # @return [SimulationResponseModel]
    def post_simulate_clearing(opts = {})
      data, _status_code, _headers = post_simulate_clearing_with_http_info(opts)
      data
    end

    # Simulates a clearing/settlement transaction
    # @param [Hash] opts the optional parameters
    # @option opts [ClearingModel] :body 
    # @return [Array<(SimulationResponseModel, Integer, Hash)>] SimulationResponseModel data, response status code and response headers
    def post_simulate_clearing_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SimulateApi.post_simulate_clearing ...'
      end
      # resource path
      local_var_path = '/simulate/clearing'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'body'])

      # return_type
      return_type = opts[:debug_return_type] || 'SimulationResponseModel'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"SimulateApi.post_simulate_clearing",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SimulateApi#post_simulate_clearing\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Simulates the creation of direct deposit
    # @param body [DirectDepositRequest] Direct deposit simulate request model
    # @param [Hash] opts the optional parameters
    # @return [DepositDepositResponse]
    def post_simulate_directdeposits(body, opts = {})
      data, _status_code, _headers = post_simulate_directdeposits_with_http_info(body, opts)
      data
    end

    # Simulates the creation of direct deposit
    # @param body [DirectDepositRequest] Direct deposit simulate request model
    # @param [Hash] opts the optional parameters
    # @return [Array<(DepositDepositResponse, Integer, Hash)>] DepositDepositResponse data, response status code and response headers
    def post_simulate_directdeposits_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SimulateApi.post_simulate_directdeposits ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling SimulateApi.post_simulate_directdeposits"
      end
      # resource path
      local_var_path = '/simulate/directdeposits'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'DepositDepositResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"SimulateApi.post_simulate_directdeposits",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SimulateApi#post_simulate_directdeposits\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Simulates a financial request (PIN debit) transaction with optional cash back
    # @param body [FinancialRequestModel] Financial request model
    # @param [Hash] opts the optional parameters
    # @return [SimulationResponseModel]
    def post_simulate_financial(body, opts = {})
      data, _status_code, _headers = post_simulate_financial_with_http_info(body, opts)
      data
    end

    # Simulates a financial request (PIN debit) transaction with optional cash back
    # @param body [FinancialRequestModel] Financial request model
    # @param [Hash] opts the optional parameters
    # @return [Array<(SimulationResponseModel, Integer, Hash)>] SimulationResponseModel data, response status code and response headers
    def post_simulate_financial_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SimulateApi.post_simulate_financial ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling SimulateApi.post_simulate_financial"
      end
      # resource path
      local_var_path = '/simulate/financial'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'SimulationResponseModel'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"SimulateApi.post_simulate_financial",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SimulateApi#post_simulate_financial\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Simulates a financial advice transaction
    # @param body [AuthorizationAdviceModel] Financial advice request model
    # @param [Hash] opts the optional parameters
    # @return [SimulationResponseModel]
    def post_simulate_financial_advice(body, opts = {})
      data, _status_code, _headers = post_simulate_financial_advice_with_http_info(body, opts)
      data
    end

    # Simulates a financial advice transaction
    # @param body [AuthorizationAdviceModel] Financial advice request model
    # @param [Hash] opts the optional parameters
    # @return [Array<(SimulationResponseModel, Integer, Hash)>] SimulationResponseModel data, response status code and response headers
    def post_simulate_financial_advice_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SimulateApi.post_simulate_financial_advice ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling SimulateApi.post_simulate_financial_advice"
      end
      # resource path
      local_var_path = '/simulate/financial/advice'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'SimulationResponseModel'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"SimulateApi.post_simulate_financial_advice",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SimulateApi#post_simulate_financial_advice\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Simulates a balance inquiry
    # @param body [BalanceInquiryRequestModel] Balance inquiry request model
    # @param [Hash] opts the optional parameters
    # @return [SimulationResponseModel]
    def post_simulate_financial_balanceinquiry(body, opts = {})
      data, _status_code, _headers = post_simulate_financial_balanceinquiry_with_http_info(body, opts)
      data
    end

    # Simulates a balance inquiry
    # @param body [BalanceInquiryRequestModel] Balance inquiry request model
    # @param [Hash] opts the optional parameters
    # @return [Array<(SimulationResponseModel, Integer, Hash)>] SimulationResponseModel data, response status code and response headers
    def post_simulate_financial_balanceinquiry_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SimulateApi.post_simulate_financial_balanceinquiry ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling SimulateApi.post_simulate_financial_balanceinquiry"
      end
      # resource path
      local_var_path = '/simulate/financial/balanceinquiry'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'SimulationResponseModel'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"SimulateApi.post_simulate_financial_balanceinquiry",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SimulateApi#post_simulate_financial_balanceinquiry\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Simulates an orignal credit transaction
    # @param body [OrignalcreditRequestModel] Orignal Credit request model
    # @param [Hash] opts the optional parameters
    # @return [SimulationResponseModel]
    def post_simulate_financial_originalcredit(body, opts = {})
      data, _status_code, _headers = post_simulate_financial_originalcredit_with_http_info(body, opts)
      data
    end

    # Simulates an orignal credit transaction
    # @param body [OrignalcreditRequestModel] Orignal Credit request model
    # @param [Hash] opts the optional parameters
    # @return [Array<(SimulationResponseModel, Integer, Hash)>] SimulationResponseModel data, response status code and response headers
    def post_simulate_financial_originalcredit_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SimulateApi.post_simulate_financial_originalcredit ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling SimulateApi.post_simulate_financial_originalcredit"
      end
      # resource path
      local_var_path = '/simulate/financial/originalcredit'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'SimulationResponseModel'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"SimulateApi.post_simulate_financial_originalcredit",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SimulateApi#post_simulate_financial_originalcredit\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Simulates an ATM withdrawal transaction
    # @param body [WithdrawalRequestModel] ATM withdrawal request model
    # @param [Hash] opts the optional parameters
    # @return [SimulationResponseModel]
    def post_simulate_financial_withdrawal(body, opts = {})
      data, _status_code, _headers = post_simulate_financial_withdrawal_with_http_info(body, opts)
      data
    end

    # Simulates an ATM withdrawal transaction
    # @param body [WithdrawalRequestModel] ATM withdrawal request model
    # @param [Hash] opts the optional parameters
    # @return [Array<(SimulationResponseModel, Integer, Hash)>] SimulationResponseModel data, response status code and response headers
    def post_simulate_financial_withdrawal_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SimulateApi.post_simulate_financial_withdrawal ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling SimulateApi.post_simulate_financial_withdrawal"
      end
      # resource path
      local_var_path = '/simulate/financial/withdrawal'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'SimulationResponseModel'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"SimulateApi.post_simulate_financial_withdrawal",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SimulateApi#post_simulate_financial_withdrawal\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Simulates a reversal transaction
    # @param [Hash] opts the optional parameters
    # @option opts [ReversalModel] :body 
    # @return [SimulationResponseModel]
    def post_simulate_reversal(opts = {})
      data, _status_code, _headers = post_simulate_reversal_with_http_info(opts)
      data
    end

    # Simulates a reversal transaction
    # @param [Hash] opts the optional parameters
    # @option opts [ReversalModel] :body 
    # @return [Array<(SimulationResponseModel, Integer, Hash)>] SimulationResponseModel data, response status code and response headers
    def post_simulate_reversal_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SimulateApi.post_simulate_reversal ...'
      end
      # resource path
      local_var_path = '/simulate/reversal'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'body'])

      # return_type
      return_type = opts[:debug_return_type] || 'SimulationResponseModel'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"SimulateApi.post_simulate_reversal",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SimulateApi#post_simulate_reversal\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
