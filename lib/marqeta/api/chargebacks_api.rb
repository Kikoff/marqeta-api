=begin
#Marqeta Core API

#Simplified management of your payment programs

The version of the OpenAPI document: 3.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.0.0

=end

require 'cgi'

module Marqeta
  class ChargebacksApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # List all chargebacks
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :count Number of chargebacks to retrieve (default to 5)
    # @option opts [Integer] :start_index Start index (default to 0)
    # @option opts [String] :network_reference_id Network reference ID
    # @option opts [String] :transaction_token Transaction token
    # @option opts [String] :amount Amount
    # @option opts [String] :states Comma-delimited list of chargeback states to display e.g. INITIATED | REPRESENTMENT | PREARBITRATION | ARBITRATION | CASE_WON | CASE_LOST | NETWORK_REJECTED | WITHDRAWN | WRITTEN_OFF_ISSUER | WRITTEN_OFF_PROGRAM
    # @option opts [String] :sort_by Sort order (default to '-lastModifiedTime')
    # @option opts [String] :network_case_id 
    # @return [ChargebackListResponse]
    def get_chargebacks(opts = {})
      data, _status_code, _headers = get_chargebacks_with_http_info(opts)
      data
    end

    # List all chargebacks
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :count Number of chargebacks to retrieve
    # @option opts [Integer] :start_index Start index
    # @option opts [String] :network_reference_id Network reference ID
    # @option opts [String] :transaction_token Transaction token
    # @option opts [String] :amount Amount
    # @option opts [String] :states Comma-delimited list of chargeback states to display e.g. INITIATED | REPRESENTMENT | PREARBITRATION | ARBITRATION | CASE_WON | CASE_LOST | NETWORK_REJECTED | WITHDRAWN | WRITTEN_OFF_ISSUER | WRITTEN_OFF_PROGRAM
    # @option opts [String] :sort_by Sort order
    # @option opts [String] :network_case_id 
    # @return [Array<(ChargebackListResponse, Integer, Hash)>] ChargebackListResponse data, response status code and response headers
    def get_chargebacks_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ChargebacksApi.get_chargebacks ...'
      end
      # resource path
      local_var_path = '/chargebacks'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'count'] = opts[:'count'] if !opts[:'count'].nil?
      query_params[:'start_index'] = opts[:'start_index'] if !opts[:'start_index'].nil?
      query_params[:'network_reference_id'] = opts[:'network_reference_id'] if !opts[:'network_reference_id'].nil?
      query_params[:'transaction_token'] = opts[:'transaction_token'] if !opts[:'transaction_token'].nil?
      query_params[:'amount'] = opts[:'amount'] if !opts[:'amount'].nil?
      query_params[:'states'] = opts[:'states'] if !opts[:'states'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?
      query_params[:'network_case_id'] = opts[:'network_case_id'] if !opts[:'network_case_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ChargebackListResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ChargebacksApi.get_chargebacks",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ChargebacksApi#get_chargebacks\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Lists all chargeback transitions that are related to a chargeback
    # @param chargeback_token [String] Chargeback token
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :count Number of transitions to retrieve (default to 5)
    # @option opts [Integer] :start_index Start index (default to 0)
    # @option opts [String] :sort_by Sort order (default to '-lastModifiedTime')
    # @return [ChargebackTransitionListResponse]
    def get_chargebacks_chargebacktoken_transitions(chargeback_token, opts = {})
      data, _status_code, _headers = get_chargebacks_chargebacktoken_transitions_with_http_info(chargeback_token, opts)
      data
    end

    # Lists all chargeback transitions that are related to a chargeback
    # @param chargeback_token [String] Chargeback token
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :count Number of transitions to retrieve
    # @option opts [Integer] :start_index Start index
    # @option opts [String] :sort_by Sort order
    # @return [Array<(ChargebackTransitionListResponse, Integer, Hash)>] ChargebackTransitionListResponse data, response status code and response headers
    def get_chargebacks_chargebacktoken_transitions_with_http_info(chargeback_token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ChargebacksApi.get_chargebacks_chargebacktoken_transitions ...'
      end
      # verify the required parameter 'chargeback_token' is set
      if @api_client.config.client_side_validation && chargeback_token.nil?
        fail ArgumentError, "Missing the required parameter 'chargeback_token' when calling ChargebacksApi.get_chargebacks_chargebacktoken_transitions"
      end
      # resource path
      local_var_path = '/chargebacks/{chargeback_token}/transitions'.sub('{' + 'chargeback_token' + '}', CGI.escape(chargeback_token.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'count'] = opts[:'count'] if !opts[:'count'].nil?
      query_params[:'start_index'] = opts[:'start_index'] if !opts[:'start_index'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ChargebackTransitionListResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ChargebacksApi.get_chargebacks_chargebacktoken_transitions",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ChargebacksApi#get_chargebacks_chargebacktoken_transitions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns a specific chargeback
    # @param token [String] 
    # @param [Hash] opts the optional parameters
    # @return [ChargebackResponse]
    def get_chargebacks_token(token, opts = {})
      data, _status_code, _headers = get_chargebacks_token_with_http_info(token, opts)
      data
    end

    # Returns a specific chargeback
    # @param token [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ChargebackResponse, Integer, Hash)>] ChargebackResponse data, response status code and response headers
    def get_chargebacks_token_with_http_info(token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ChargebacksApi.get_chargebacks_token ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling ChargebacksApi.get_chargebacks_token"
      end
      # resource path
      local_var_path = '/chargebacks/{token}'.sub('{' + 'token' + '}', CGI.escape(token.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ChargebackResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ChargebacksApi.get_chargebacks_token",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ChargebacksApi#get_chargebacks_token\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns a specific chargeback transition
    # @param token [String] Chargeback transition token
    # @param [Hash] opts the optional parameters
    # @return [ChargebackTransitionResponse]
    def get_chargebacks_transitions_token(token, opts = {})
      data, _status_code, _headers = get_chargebacks_transitions_token_with_http_info(token, opts)
      data
    end

    # Returns a specific chargeback transition
    # @param token [String] Chargeback transition token
    # @param [Hash] opts the optional parameters
    # @return [Array<(ChargebackTransitionResponse, Integer, Hash)>] ChargebackTransitionResponse data, response status code and response headers
    def get_chargebacks_transitions_token_with_http_info(token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ChargebacksApi.get_chargebacks_transitions_token ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling ChargebacksApi.get_chargebacks_transitions_token"
      end
      # resource path
      local_var_path = '/chargebacks/transitions/{token}'.sub('{' + 'token' + '}', CGI.escape(token.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ChargebackTransitionResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ChargebacksApi.get_chargebacks_transitions_token",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ChargebacksApi#get_chargebacks_transitions_token\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Creates a chargeback allocation acknowledgement
    # @param [Hash] opts the optional parameters
    # @option opts [ChargebackRequest] :body 
    # @return [ChargebackResponse]
    def post_chargeback_allocation_acknowledgment(opts = {})
      data, _status_code, _headers = post_chargeback_allocation_acknowledgment_with_http_info(opts)
      data
    end

    # Creates a chargeback allocation acknowledgement
    # @param [Hash] opts the optional parameters
    # @option opts [ChargebackRequest] :body 
    # @return [Array<(ChargebackResponse, Integer, Hash)>] ChargebackResponse data, response status code and response headers
    def post_chargeback_allocation_acknowledgment_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ChargebacksApi.post_chargeback_allocation_acknowledgment ...'
      end
      # resource path
      local_var_path = '/chargebacks/allocationacknowledgement'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'body'])

      # return_type
      return_type = opts[:debug_return_type] || 'ChargebackResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ChargebacksApi.post_chargeback_allocation_acknowledgment",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ChargebacksApi#post_chargeback_allocation_acknowledgment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Creates a chargeback
    # @param [Hash] opts the optional parameters
    # @option opts [ChargebackRequest] :body 
    # @return [ChargebackResponse]
    def post_chargebacks(opts = {})
      data, _status_code, _headers = post_chargebacks_with_http_info(opts)
      data
    end

    # Creates a chargeback
    # @param [Hash] opts the optional parameters
    # @option opts [ChargebackRequest] :body 
    # @return [Array<(ChargebackResponse, Integer, Hash)>] ChargebackResponse data, response status code and response headers
    def post_chargebacks_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ChargebacksApi.post_chargebacks ...'
      end
      # resource path
      local_var_path = '/chargebacks'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'body'])

      # return_type
      return_type = opts[:debug_return_type] || 'ChargebackResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ChargebacksApi.post_chargebacks",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ChargebacksApi#post_chargebacks\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Creates a chargeback transition
    # @param [Hash] opts the optional parameters
    # @option opts [ChargebackTransitionRequest] :body 
    # @return [ChargebackTransitionResponse]
    def post_chargebacks_transitions(opts = {})
      data, _status_code, _headers = post_chargebacks_transitions_with_http_info(opts)
      data
    end

    # Creates a chargeback transition
    # @param [Hash] opts the optional parameters
    # @option opts [ChargebackTransitionRequest] :body 
    # @return [Array<(ChargebackTransitionResponse, Integer, Hash)>] ChargebackTransitionResponse data, response status code and response headers
    def post_chargebacks_transitions_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ChargebacksApi.post_chargebacks_transitions ...'
      end
      # resource path
      local_var_path = '/chargebacks/transitions'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'body'])

      # return_type
      return_type = opts[:debug_return_type] || 'ChargebackTransitionResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ChargebacksApi.post_chargebacks_transitions",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ChargebacksApi#post_chargebacks_transitions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Updates chargeback data
    # @param token [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [ChargebackUpdateRequest] :body 
    # @return [ChargebackResponse]
    def put_chargebacks_token(token, opts = {})
      data, _status_code, _headers = put_chargebacks_token_with_http_info(token, opts)
      data
    end

    # Updates chargeback data
    # @param token [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [ChargebackUpdateRequest] :body 
    # @return [Array<(ChargebackResponse, Integer, Hash)>] ChargebackResponse data, response status code and response headers
    def put_chargebacks_token_with_http_info(token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ChargebacksApi.put_chargebacks_token ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling ChargebacksApi.put_chargebacks_token"
      end
      # resource path
      local_var_path = '/chargebacks/{token}'.sub('{' + 'token' + '}', CGI.escape(token.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'body'])

      # return_type
      return_type = opts[:debug_return_type] || 'ChargebackResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ChargebacksApi.put_chargebacks_token",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ChargebacksApi#put_chargebacks_token\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Grants provisional credit
    # @param token [String] 
    # @param [Hash] opts the optional parameters
    # @return [ChargebackResponse]
    def put_chargebacks_token_grantprovisionalcredit(token, opts = {})
      data, _status_code, _headers = put_chargebacks_token_grantprovisionalcredit_with_http_info(token, opts)
      data
    end

    # Grants provisional credit
    # @param token [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ChargebackResponse, Integer, Hash)>] ChargebackResponse data, response status code and response headers
    def put_chargebacks_token_grantprovisionalcredit_with_http_info(token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ChargebacksApi.put_chargebacks_token_grantprovisionalcredit ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling ChargebacksApi.put_chargebacks_token_grantprovisionalcredit"
      end
      # resource path
      local_var_path = '/chargebacks/{token}/grantprovisionalcredit'.sub('{' + 'token' + '}', CGI.escape(token.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ChargebackResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ChargebacksApi.put_chargebacks_token_grantprovisionalcredit",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ChargebacksApi#put_chargebacks_token_grantprovisionalcredit\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Reverses provisional credit
    # @param token [String] 
    # @param [Hash] opts the optional parameters
    # @return [ChargebackResponse]
    def put_chargebacks_token_reverseprovisionalcredit(token, opts = {})
      data, _status_code, _headers = put_chargebacks_token_reverseprovisionalcredit_with_http_info(token, opts)
      data
    end

    # Reverses provisional credit
    # @param token [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ChargebackResponse, Integer, Hash)>] ChargebackResponse data, response status code and response headers
    def put_chargebacks_token_reverseprovisionalcredit_with_http_info(token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ChargebacksApi.put_chargebacks_token_reverseprovisionalcredit ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling ChargebacksApi.put_chargebacks_token_reverseprovisionalcredit"
      end
      # resource path
      local_var_path = '/chargebacks/{token}/reverseprovisionalcredit'.sub('{' + 'token' + '}', CGI.escape(token.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ChargebackResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ChargebacksApi.put_chargebacks_token_reverseprovisionalcredit",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ChargebacksApi#put_chargebacks_token_reverseprovisionalcredit\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
