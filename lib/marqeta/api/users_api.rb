=begin
#Marqeta Core API

#Simplified management of your payment programs

The version of the OpenAPI document: 3.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.0.0

=end

require 'cgi'

module Marqeta
  class UsersApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Lists all users
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :count Number of users to retrieve (default to 5)
    # @option opts [Integer] :start_index Start index (default to 0)
    # @option opts [String] :search_type Search type
    # @option opts [String] :fields Comma-delimited list of fields to return (e.g. field_1,field_2,..). Leave blank to return all fields.
    # @option opts [String] :sort_by Sort order (default to '-lastModifiedTime')
    # @return [UserCardHolderListResponse]
    def get_users(opts = {})
      data, _status_code, _headers = get_users_with_http_info(opts)
      data
    end

    # Lists all users
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :count Number of users to retrieve
    # @option opts [Integer] :start_index Start index
    # @option opts [String] :search_type Search type
    # @option opts [String] :fields Comma-delimited list of fields to return (e.g. field_1,field_2,..). Leave blank to return all fields.
    # @option opts [String] :sort_by Sort order
    # @return [Array<(UserCardHolderListResponse, Integer, Hash)>] UserCardHolderListResponse data, response status code and response headers
    def get_users_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.get_users ...'
      end
      # resource path
      local_var_path = '/users'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'count'] = opts[:'count'] if !opts[:'count'].nil?
      query_params[:'start_index'] = opts[:'start_index'] if !opts[:'start_index'].nil?
      query_params[:'search_type'] = opts[:'search_type'] if !opts[:'search_type'].nil?
      query_params[:'fields'] = opts[:'fields'] if !opts[:'fields'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'UserCardHolderListResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"UsersApi.get_users",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#get_users\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns a client access token
    # @param token [String] Client access token
    # @param [Hash] opts the optional parameters
    # @option opts [String] :application_token 
    # @return [ClientAccessTokenResponse]
    def get_users_auth_clientaccesstoken_token(token, opts = {})
      data, _status_code, _headers = get_users_auth_clientaccesstoken_token_with_http_info(token, opts)
      data
    end

    # Returns a client access token
    # @param token [String] Client access token
    # @param [Hash] opts the optional parameters
    # @option opts [String] :application_token 
    # @return [Array<(ClientAccessTokenResponse, Integer, Hash)>] ClientAccessTokenResponse data, response status code and response headers
    def get_users_auth_clientaccesstoken_token_with_http_info(token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.get_users_auth_clientaccesstoken_token ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling UsersApi.get_users_auth_clientaccesstoken_token"
      end
      # resource path
      local_var_path = '/users/auth/clientaccesstoken/{token}'.sub('{' + 'token' + '}', CGI.escape(token.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'application_token'] = opts[:'application_token'] if !opts[:'application_token'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ClientAccessTokenResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"UsersApi.get_users_auth_clientaccesstoken_token",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#get_users_auth_clientaccesstoken_token\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Lists all children of a parent user
    # @param parent_token [String] Token of parent cardholder
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :count Number of users to retrieve (default to 5)
    # @option opts [Integer] :start_index Start index (default to 0)
    # @option opts [String] :fields Comma-delimited list of fields to return (e.g. field_1,field_2,..). Leave blank to return all fields.
    # @option opts [String] :sort_by Sort order (default to '-lastModifiedTime')
    # @return [UserCardHolderListResponse]
    def get_users_parenttoken_children(parent_token, opts = {})
      data, _status_code, _headers = get_users_parenttoken_children_with_http_info(parent_token, opts)
      data
    end

    # Lists all children of a parent user
    # @param parent_token [String] Token of parent cardholder
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :count Number of users to retrieve
    # @option opts [Integer] :start_index Start index
    # @option opts [String] :fields Comma-delimited list of fields to return (e.g. field_1,field_2,..). Leave blank to return all fields.
    # @option opts [String] :sort_by Sort order
    # @return [Array<(UserCardHolderListResponse, Integer, Hash)>] UserCardHolderListResponse data, response status code and response headers
    def get_users_parenttoken_children_with_http_info(parent_token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.get_users_parenttoken_children ...'
      end
      # verify the required parameter 'parent_token' is set
      if @api_client.config.client_side_validation && parent_token.nil?
        fail ArgumentError, "Missing the required parameter 'parent_token' when calling UsersApi.get_users_parenttoken_children"
      end
      # resource path
      local_var_path = '/users/{parent_token}/children'.sub('{' + 'parent_token' + '}', CGI.escape(parent_token.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'count'] = opts[:'count'] if !opts[:'count'].nil?
      query_params[:'start_index'] = opts[:'start_index'] if !opts[:'start_index'].nil?
      query_params[:'fields'] = opts[:'fields'] if !opts[:'fields'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'UserCardHolderListResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"UsersApi.get_users_parenttoken_children",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#get_users_parenttoken_children\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Lists all users who match a phone number
    # @param phone_number [String] Phone number
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :count Number of users to retrieve (default to 5)
    # @option opts [Integer] :start_index Start index (default to 0)
    # @option opts [String] :fields Comma-delimited list of fields to return (e.g. field_1,field_2,..). Leave blank to return all fields.
    # @option opts [String] :sort_by Sort order (default to '-lastModifiedTime')
    # @return [UserCardHolderListResponse]
    def get_users_phonenumber_phonenumber(phone_number, opts = {})
      data, _status_code, _headers = get_users_phonenumber_phonenumber_with_http_info(phone_number, opts)
      data
    end

    # Lists all users who match a phone number
    # @param phone_number [String] Phone number
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :count Number of users to retrieve
    # @option opts [Integer] :start_index Start index
    # @option opts [String] :fields Comma-delimited list of fields to return (e.g. field_1,field_2,..). Leave blank to return all fields.
    # @option opts [String] :sort_by Sort order
    # @return [Array<(UserCardHolderListResponse, Integer, Hash)>] UserCardHolderListResponse data, response status code and response headers
    def get_users_phonenumber_phonenumber_with_http_info(phone_number, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.get_users_phonenumber_phonenumber ...'
      end
      # verify the required parameter 'phone_number' is set
      if @api_client.config.client_side_validation && phone_number.nil?
        fail ArgumentError, "Missing the required parameter 'phone_number' when calling UsersApi.get_users_phonenumber_phonenumber"
      end
      # resource path
      local_var_path = '/users/phonenumber/{phone_number}'.sub('{' + 'phone_number' + '}', CGI.escape(phone_number.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'count'] = opts[:'count'] if !opts[:'count'].nil?
      query_params[:'start_index'] = opts[:'start_index'] if !opts[:'start_index'].nil?
      query_params[:'fields'] = opts[:'fields'] if !opts[:'fields'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'UserCardHolderListResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"UsersApi.get_users_phonenumber_phonenumber",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#get_users_phonenumber_phonenumber\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns a specific user
    # @param token [String] User token
    # @param [Hash] opts the optional parameters
    # @option opts [String] :fields Comma-delimited list of fields to return (e.g. field_1,field_2,..). Leave blank to return all fields.
    # @return [UserCardHolderResponse]
    def get_users_token(token, opts = {})
      data, _status_code, _headers = get_users_token_with_http_info(token, opts)
      data
    end

    # Returns a specific user
    # @param token [String] User token
    # @param [Hash] opts the optional parameters
    # @option opts [String] :fields Comma-delimited list of fields to return (e.g. field_1,field_2,..). Leave blank to return all fields.
    # @return [Array<(UserCardHolderResponse, Integer, Hash)>] UserCardHolderResponse data, response status code and response headers
    def get_users_token_with_http_info(token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.get_users_token ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling UsersApi.get_users_token"
      end
      # resource path
      local_var_path = '/users/{token}'.sub('{' + 'token' + '}', CGI.escape(token.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'fields'] = opts[:'fields'] if !opts[:'fields'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'UserCardHolderResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"UsersApi.get_users_token",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#get_users_token\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Lists cardholder notes
    # @param token [String] User token
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start_index Start index (default to 0)
    # @option opts [Integer] :count Number of notes to retrieve (default to 5)
    # @option opts [String] :created_by Created by
    # @option opts [String] :created_by_user_role Comma-delimited list of created by user roles
    # @option opts [Boolean] :include_private Include private notes and private fields in note response
    # @option opts [String] :search_type Search type
    # @option opts [String] :fields Comma-delimited list of fields to return (e.g. field_1,field_2,..). Leave blank to return all fields.
    # @option opts [String] :sort_by Sort order (default to '-lastModifiedTime')
    # @return [CardHolderNoteListResponse]
    def get_users_token_notes(token, opts = {})
      data, _status_code, _headers = get_users_token_notes_with_http_info(token, opts)
      data
    end

    # Lists cardholder notes
    # @param token [String] User token
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start_index Start index
    # @option opts [Integer] :count Number of notes to retrieve
    # @option opts [String] :created_by Created by
    # @option opts [String] :created_by_user_role Comma-delimited list of created by user roles
    # @option opts [Boolean] :include_private Include private notes and private fields in note response
    # @option opts [String] :search_type Search type
    # @option opts [String] :fields Comma-delimited list of fields to return (e.g. field_1,field_2,..). Leave blank to return all fields.
    # @option opts [String] :sort_by Sort order
    # @return [Array<(CardHolderNoteListResponse, Integer, Hash)>] CardHolderNoteListResponse data, response status code and response headers
    def get_users_token_notes_with_http_info(token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.get_users_token_notes ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling UsersApi.get_users_token_notes"
      end
      # resource path
      local_var_path = '/users/{token}/notes'.sub('{' + 'token' + '}', CGI.escape(token.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'start_index'] = opts[:'start_index'] if !opts[:'start_index'].nil?
      query_params[:'count'] = opts[:'count'] if !opts[:'count'].nil?
      query_params[:'created_by'] = opts[:'created_by'] if !opts[:'created_by'].nil?
      query_params[:'created_by_user_role'] = opts[:'created_by_user_role'] if !opts[:'created_by_user_role'].nil?
      query_params[:'include_private'] = opts[:'include_private'] if !opts[:'include_private'].nil?
      query_params[:'search_type'] = opts[:'search_type'] if !opts[:'search_type'].nil?
      query_params[:'fields'] = opts[:'fields'] if !opts[:'fields'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CardHolderNoteListResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"UsersApi.get_users_token_notes",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#get_users_token_notes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns a specific user's SSN
    # @param token [String] User token
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :full_ssn 
    # @return [SsnResponseModel]
    def get_users_token_ssn(token, opts = {})
      data, _status_code, _headers = get_users_token_ssn_with_http_info(token, opts)
      data
    end

    # Returns a specific user&#39;s SSN
    # @param token [String] User token
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :full_ssn 
    # @return [Array<(SsnResponseModel, Integer, Hash)>] SsnResponseModel data, response status code and response headers
    def get_users_token_ssn_with_http_info(token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.get_users_token_ssn ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling UsersApi.get_users_token_ssn"
      end
      # resource path
      local_var_path = '/users/{token}/ssn'.sub('{' + 'token' + '}', CGI.escape(token.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'full_ssn'] = opts[:'full_ssn'] if !opts[:'full_ssn'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SsnResponseModel'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"UsersApi.get_users_token_ssn",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#get_users_token_ssn\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Creates a user
    # @param [Hash] opts the optional parameters
    # @option opts [CardHolderModel] :body 
    # @return [UserCardHolderResponse]
    def post_users(opts = {})
      data, _status_code, _headers = post_users_with_http_info(opts)
      data
    end

    # Creates a user
    # @param [Hash] opts the optional parameters
    # @option opts [CardHolderModel] :body 
    # @return [Array<(UserCardHolderResponse, Integer, Hash)>] UserCardHolderResponse data, response status code and response headers
    def post_users_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.post_users ...'
      end
      # resource path
      local_var_path = '/users'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'body'])

      # return_type
      return_type = opts[:debug_return_type] || 'UserCardHolderResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"UsersApi.post_users",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#post_users\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Updates a user password
    # @param body [PasswordUpdateModel] Password update object
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def post_users_auth_changepassword(body, opts = {})
      post_users_auth_changepassword_with_http_info(body, opts)
      nil
    end

    # Updates a user password
    # @param body [PasswordUpdateModel] Password update object
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def post_users_auth_changepassword_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.post_users_auth_changepassword ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling UsersApi.post_users_auth_changepassword"
      end
      # resource path
      local_var_path = '/users/auth/changepassword'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"UsersApi.post_users_auth_changepassword",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#post_users_auth_changepassword\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Creates a client access token
    # @param [Hash] opts the optional parameters
    # @option opts [ClientAccessTokenRequest] :body 
    # @return [ClientAccessTokenResponse]
    def post_users_auth_clientaccesstoken(opts = {})
      data, _status_code, _headers = post_users_auth_clientaccesstoken_with_http_info(opts)
      data
    end

    # Creates a client access token
    # @param [Hash] opts the optional parameters
    # @option opts [ClientAccessTokenRequest] :body 
    # @return [Array<(ClientAccessTokenResponse, Integer, Hash)>] ClientAccessTokenResponse data, response status code and response headers
    def post_users_auth_clientaccesstoken_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.post_users_auth_clientaccesstoken ...'
      end
      # resource path
      local_var_path = '/users/auth/clientaccesstoken'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'body'])

      # return_type
      return_type = opts[:debug_return_type] || 'ClientAccessTokenResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"UsersApi.post_users_auth_clientaccesstoken",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#post_users_auth_clientaccesstoken\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Logs in a user
    # @param [Hash] opts the optional parameters
    # @option opts [LoginRequestModel] :body User login object
    # @return [LoginResponseModel]
    def post_users_auth_login(opts = {})
      data, _status_code, _headers = post_users_auth_login_with_http_info(opts)
      data
    end

    # Logs in a user
    # @param [Hash] opts the optional parameters
    # @option opts [LoginRequestModel] :body User login object
    # @return [Array<(LoginResponseModel, Integer, Hash)>] LoginResponseModel data, response status code and response headers
    def post_users_auth_login_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.post_users_auth_login ...'
      end
      # resource path
      local_var_path = '/users/auth/login'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'body'])

      # return_type
      return_type = opts[:debug_return_type] || 'LoginResponseModel'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"UsersApi.post_users_auth_login",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#post_users_auth_login\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Logs out a user
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def post_users_auth_logout(opts = {})
      post_users_auth_logout_with_http_info(opts)
      nil
    end

    # Logs out a user
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def post_users_auth_logout_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.post_users_auth_logout ...'
      end
      # resource path
      local_var_path = '/users/auth/logout'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"UsersApi.post_users_auth_logout",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#post_users_auth_logout\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Creates a one-time token
    # @param [Hash] opts the optional parameters
    # @option opts [OneTimeRequestModel] :body One-time object
    # @return [AccessTokenResponse]
    def post_users_auth_onetime(opts = {})
      data, _status_code, _headers = post_users_auth_onetime_with_http_info(opts)
      data
    end

    # Creates a one-time token
    # @param [Hash] opts the optional parameters
    # @option opts [OneTimeRequestModel] :body One-time object
    # @return [Array<(AccessTokenResponse, Integer, Hash)>] AccessTokenResponse data, response status code and response headers
    def post_users_auth_onetime_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.post_users_auth_onetime ...'
      end
      # resource path
      local_var_path = '/users/auth/onetime'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'body'])

      # return_type
      return_type = opts[:debug_return_type] || 'AccessTokenResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"UsersApi.post_users_auth_onetime",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#post_users_auth_onetime\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Generates a reset password email
    # @param [Hash] opts the optional parameters
    # @option opts [ResetUserPasswordEmailModel] :body 
    # @return [nil]
    def post_users_auth_resetpassword(opts = {})
      post_users_auth_resetpassword_with_http_info(opts)
      nil
    end

    # Generates a reset password email
    # @param [Hash] opts the optional parameters
    # @option opts [ResetUserPasswordEmailModel] :body 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def post_users_auth_resetpassword_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.post_users_auth_resetpassword ...'
      end
      # resource path
      local_var_path = '/users/auth/resetpassword'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'body'])

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"UsersApi.post_users_auth_resetpassword",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#post_users_auth_resetpassword\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Resets a user password
    # @param token [String] Reset password verification token
    # @param [Hash] opts the optional parameters
    # @option opts [ResetUserPasswordModel] :body 
    # @return [nil]
    def post_users_auth_resetpassword_token(token, opts = {})
      post_users_auth_resetpassword_token_with_http_info(token, opts)
      nil
    end

    # Resets a user password
    # @param token [String] Reset password verification token
    # @param [Hash] opts the optional parameters
    # @option opts [ResetUserPasswordModel] :body 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def post_users_auth_resetpassword_token_with_http_info(token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.post_users_auth_resetpassword_token ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling UsersApi.post_users_auth_resetpassword_token"
      end
      # resource path
      local_var_path = '/users/auth/resetpassword/{token}'.sub('{' + 'token' + '}', CGI.escape(token.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'body'])

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"UsersApi.post_users_auth_resetpassword_token",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#post_users_auth_resetpassword_token\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Generates an email verification request
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def post_users_auth_verifyemail(opts = {})
      post_users_auth_verifyemail_with_http_info(opts)
      nil
    end

    # Generates an email verification request
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def post_users_auth_verifyemail_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.post_users_auth_verifyemail ...'
      end
      # resource path
      local_var_path = '/users/auth/verifyemail'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"UsersApi.post_users_auth_verifyemail",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#post_users_auth_verifyemail\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Verifies the email token
    # @param token [String] Email verification token
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def post_users_auth_verifyemail_token(token, opts = {})
      post_users_auth_verifyemail_token_with_http_info(token, opts)
      nil
    end

    # Verifies the email token
    # @param token [String] Email verification token
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def post_users_auth_verifyemail_token_with_http_info(token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.post_users_auth_verifyemail_token ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling UsersApi.post_users_auth_verifyemail_token"
      end
      # resource path
      local_var_path = '/users/auth/verifyemail/{token}'.sub('{' + 'token' + '}', CGI.escape(token.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"UsersApi.post_users_auth_verifyemail_token",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#post_users_auth_verifyemail_token\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Lists all users
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :count Number of users to retrieve (default to 5)
    # @option opts [Integer] :start_index Start index (default to 0)
    # @option opts [String] :search_type Search type
    # @option opts [String] :fields Comma-delimited list of fields to return (e.g. field_1,field_2,..). Leave blank to return all fields.
    # @option opts [String] :sort_by Sort order (default to '-lastModifiedTime')
    # @option opts [UserCardHolderSearchModel] :body 
    # @return [UserCardHolderListResponse]
    def post_users_lookup(opts = {})
      data, _status_code, _headers = post_users_lookup_with_http_info(opts)
      data
    end

    # Lists all users
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :count Number of users to retrieve
    # @option opts [Integer] :start_index Start index
    # @option opts [String] :search_type Search type
    # @option opts [String] :fields Comma-delimited list of fields to return (e.g. field_1,field_2,..). Leave blank to return all fields.
    # @option opts [String] :sort_by Sort order
    # @option opts [UserCardHolderSearchModel] :body 
    # @return [Array<(UserCardHolderListResponse, Integer, Hash)>] UserCardHolderListResponse data, response status code and response headers
    def post_users_lookup_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.post_users_lookup ...'
      end
      # resource path
      local_var_path = '/users/lookup'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'count'] = opts[:'count'] if !opts[:'count'].nil?
      query_params[:'start_index'] = opts[:'start_index'] if !opts[:'start_index'].nil?
      query_params[:'search_type'] = opts[:'search_type'] if !opts[:'search_type'].nil?
      query_params[:'fields'] = opts[:'fields'] if !opts[:'fields'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'body'])

      # return_type
      return_type = opts[:debug_return_type] || 'UserCardHolderListResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"UsersApi.post_users_lookup",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#post_users_lookup\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Creates a note for the cardholder
    # @param token [String] User token
    # @param [Hash] opts the optional parameters
    # @option opts [CardholderNoteRequestModel] :body 
    # @return [CardholderNoteResponseModel]
    def post_users_token_notes(token, opts = {})
      data, _status_code, _headers = post_users_token_notes_with_http_info(token, opts)
      data
    end

    # Creates a note for the cardholder
    # @param token [String] User token
    # @param [Hash] opts the optional parameters
    # @option opts [CardholderNoteRequestModel] :body 
    # @return [Array<(CardholderNoteResponseModel, Integer, Hash)>] CardholderNoteResponseModel data, response status code and response headers
    def post_users_token_notes_with_http_info(token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.post_users_token_notes ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling UsersApi.post_users_token_notes"
      end
      # resource path
      local_var_path = '/users/{token}/notes'.sub('{' + 'token' + '}', CGI.escape(token.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'body'])

      # return_type
      return_type = opts[:debug_return_type] || 'CardholderNoteResponseModel'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"UsersApi.post_users_token_notes",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#post_users_token_notes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Updates a specific user
    # @param token [String] User token
    # @param body [UserCardHolderUpdateModel] User object
    # @param [Hash] opts the optional parameters
    # @return [CardHolderModel]
    def put_users_token(token, body, opts = {})
      data, _status_code, _headers = put_users_token_with_http_info(token, body, opts)
      data
    end

    # Updates a specific user
    # @param token [String] User token
    # @param body [UserCardHolderUpdateModel] User object
    # @param [Hash] opts the optional parameters
    # @return [Array<(CardHolderModel, Integer, Hash)>] CardHolderModel data, response status code and response headers
    def put_users_token_with_http_info(token, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.put_users_token ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling UsersApi.put_users_token"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling UsersApi.put_users_token"
      end
      # resource path
      local_var_path = '/users/{token}'.sub('{' + 'token' + '}', CGI.escape(token.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'CardHolderModel'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"UsersApi.put_users_token",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#put_users_token\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Updates a specific note for a cardholder
    # @param token [String] User token
    # @param notes_token [String] Notes token
    # @param [Hash] opts the optional parameters
    # @option opts [CardholderNoteUpdateRequestModel] :body 
    # @return [CardholderNoteResponseModel]
    def put_users_token_notes_notestoken(token, notes_token, opts = {})
      data, _status_code, _headers = put_users_token_notes_notestoken_with_http_info(token, notes_token, opts)
      data
    end

    # Updates a specific note for a cardholder
    # @param token [String] User token
    # @param notes_token [String] Notes token
    # @param [Hash] opts the optional parameters
    # @option opts [CardholderNoteUpdateRequestModel] :body 
    # @return [Array<(CardholderNoteResponseModel, Integer, Hash)>] CardholderNoteResponseModel data, response status code and response headers
    def put_users_token_notes_notestoken_with_http_info(token, notes_token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.put_users_token_notes_notestoken ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling UsersApi.put_users_token_notes_notestoken"
      end
      # verify the required parameter 'notes_token' is set
      if @api_client.config.client_side_validation && notes_token.nil?
        fail ArgumentError, "Missing the required parameter 'notes_token' when calling UsersApi.put_users_token_notes_notestoken"
      end
      # resource path
      local_var_path = '/users/{token}/notes/{notes_token}'.sub('{' + 'token' + '}', CGI.escape(token.to_s)).sub('{' + 'notes_token' + '}', CGI.escape(notes_token.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'body'])

      # return_type
      return_type = opts[:debug_return_type] || 'CardholderNoteResponseModel'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"UsersApi.put_users_token_notes_notestoken",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#put_users_token_notes_notestoken\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
