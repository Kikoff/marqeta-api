=begin
#Marqeta Core API

#Simplified management of your payment programs

The version of the OpenAPI document: 3.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.0.0

=end

require 'cgi'

module Marqeta
  class DirectDepositAccountsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Creates new direct deposit account for cardholder.
    # @param body [DirectDepositAccountRequest] Create direct deposit account for cardholder
    # @param [Hash] opts the optional parameters
    # @return [DirectDepositAccountResponse]
    def create_account(body, opts = {})
      data, _status_code, _headers = create_account_with_http_info(body, opts)
      data
    end

    # Creates new direct deposit account for cardholder.
    # @param body [DirectDepositAccountRequest] Create direct deposit account for cardholder
    # @param [Hash] opts the optional parameters
    # @return [Array<(DirectDepositAccountResponse, Integer, Hash)>] DirectDepositAccountResponse data, response status code and response headers
    def create_account_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DirectDepositAccountsApi.create_account ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling DirectDepositAccountsApi.create_account"
      end
      # resource path
      local_var_path = '/depositaccounts'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'DirectDepositAccountResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DirectDepositAccountsApi.create_account",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DirectDepositAccountsApi#create_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Creates new transition for a direct deposit account.
    # @param body [DirectDepositAccountTransitionRequest] Create transition for direct deposit account
    # @param [Hash] opts the optional parameters
    # @return [DirectDepositAccountTransitionResponse]
    def create_transition(body, opts = {})
      data, _status_code, _headers = create_transition_with_http_info(body, opts)
      data
    end

    # Creates new transition for a direct deposit account.
    # @param body [DirectDepositAccountTransitionRequest] Create transition for direct deposit account
    # @param [Hash] opts the optional parameters
    # @return [Array<(DirectDepositAccountTransitionResponse, Integer, Hash)>] DirectDepositAccountTransitionResponse data, response status code and response headers
    def create_transition_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DirectDepositAccountsApi.create_transition ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling DirectDepositAccountsApi.create_transition"
      end
      # resource path
      local_var_path = '/depositaccounts/transitions'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'DirectDepositAccountTransitionResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DirectDepositAccountsApi.create_transition",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DirectDepositAccountsApi#create_transition\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get direct deposit account transition list for card holder.
    # @param token [String] Get CDD info for a specific DDA token
    # @param [Hash] opts the optional parameters
    # @return [CustomerDueDiligenceResponse]
    def get_cdd_info(token, opts = {})
      data, _status_code, _headers = get_cdd_info_with_http_info(token, opts)
      data
    end

    # Get direct deposit account transition list for card holder.
    # @param token [String] Get CDD info for a specific DDA token
    # @param [Hash] opts the optional parameters
    # @return [Array<(CustomerDueDiligenceResponse, Integer, Hash)>] CustomerDueDiligenceResponse data, response status code and response headers
    def get_cdd_info_with_http_info(token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DirectDepositAccountsApi.get_cdd_info ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DirectDepositAccountsApi.get_cdd_info"
      end
      # resource path
      local_var_path = '/depositaccounts/{token}/cdd'.sub('{' + 'token' + '}', CGI.escape(token.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CustomerDueDiligenceResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DirectDepositAccountsApi.get_cdd_info",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DirectDepositAccountsApi#get_cdd_info\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get direct deposit account.
    # @param token [String] Get specific direct deposit account
    # @param [Hash] opts the optional parameters
    # @return [DirectDepositAccountResponse]
    def get_direct_deposit_account(token, opts = {})
      data, _status_code, _headers = get_direct_deposit_account_with_http_info(token, opts)
      data
    end

    # Get direct deposit account.
    # @param token [String] Get specific direct deposit account
    # @param [Hash] opts the optional parameters
    # @return [Array<(DirectDepositAccountResponse, Integer, Hash)>] DirectDepositAccountResponse data, response status code and response headers
    def get_direct_deposit_account_with_http_info(token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DirectDepositAccountsApi.get_direct_deposit_account ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DirectDepositAccountsApi.get_direct_deposit_account"
      end
      # resource path
      local_var_path = '/depositaccounts/{token}'.sub('{' + 'token' + '}', CGI.escape(token.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DirectDepositAccountResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DirectDepositAccountsApi.get_direct_deposit_account",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DirectDepositAccountsApi#get_direct_deposit_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get direct deposit account transition.
    # @param token [String] Get specific direct deposit account transition
    # @param [Hash] opts the optional parameters
    # @return [DirectDepositAccountTransitionResponse]
    def get_direct_deposit_account_transition(token, opts = {})
      data, _status_code, _headers = get_direct_deposit_account_transition_with_http_info(token, opts)
      data
    end

    # Get direct deposit account transition.
    # @param token [String] Get specific direct deposit account transition
    # @param [Hash] opts the optional parameters
    # @return [Array<(DirectDepositAccountTransitionResponse, Integer, Hash)>] DirectDepositAccountTransitionResponse data, response status code and response headers
    def get_direct_deposit_account_transition_with_http_info(token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DirectDepositAccountsApi.get_direct_deposit_account_transition ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DirectDepositAccountsApi.get_direct_deposit_account_transition"
      end
      # resource path
      local_var_path = '/depositaccounts/transitions/{token}'.sub('{' + 'token' + '}', CGI.escape(token.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DirectDepositAccountTransitionResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DirectDepositAccountsApi.get_direct_deposit_account_transition",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DirectDepositAccountsApi#get_direct_deposit_account_transition\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get direct deposit account transition list for card holder.
    # @param user_token [String] Get direct deposit account transition list for user
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :count Number of users to retrieve (default to 5)
    # @option opts [Integer] :start_index Start index (default to 0)
    # @option opts [String] :sort_by Sort order (default to '-createdTime')
    # @return [DirectDepositAccountTransitionResponse]
    def get_transition_list(user_token, opts = {})
      data, _status_code, _headers = get_transition_list_with_http_info(user_token, opts)
      data
    end

    # Get direct deposit account transition list for card holder.
    # @param user_token [String] Get direct deposit account transition list for user
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :count Number of users to retrieve
    # @option opts [Integer] :start_index Start index
    # @option opts [String] :sort_by Sort order
    # @return [Array<(DirectDepositAccountTransitionResponse, Integer, Hash)>] DirectDepositAccountTransitionResponse data, response status code and response headers
    def get_transition_list_with_http_info(user_token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DirectDepositAccountsApi.get_transition_list ...'
      end
      # verify the required parameter 'user_token' is set
      if @api_client.config.client_side_validation && user_token.nil?
        fail ArgumentError, "Missing the required parameter 'user_token' when calling DirectDepositAccountsApi.get_transition_list"
      end
      # resource path
      local_var_path = '/depositaccounts/{user_token}/transitions'.sub('{' + 'user_token' + '}', CGI.escape(user_token.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'count'] = opts[:'count'] if !opts[:'count'].nil?
      query_params[:'start_index'] = opts[:'start_index'] if !opts[:'start_index'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DirectDepositAccountTransitionResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DirectDepositAccountsApi.get_transition_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DirectDepositAccountsApi#get_transition_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List all specific direct deposit accounts.
    # @param token [String] Get specific direct deposit account
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :count Number of users to retrieve (default to 5)
    # @option opts [Integer] :start_index Start index (default to 0)
    # @option opts [String] :sort_by Sort order (default to '-lastModifiedTime')
    # @option opts [String] :state Direct deposit account status
    # @return [DirectDepositAccountListResponse]
    def get_user_direct_deposit_accounts(token, opts = {})
      data, _status_code, _headers = get_user_direct_deposit_accounts_with_http_info(token, opts)
      data
    end

    # List all specific direct deposit accounts.
    # @param token [String] Get specific direct deposit account
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :count Number of users to retrieve
    # @option opts [Integer] :start_index Start index
    # @option opts [String] :sort_by Sort order
    # @option opts [String] :state Direct deposit account status
    # @return [Array<(DirectDepositAccountListResponse, Integer, Hash)>] DirectDepositAccountListResponse data, response status code and response headers
    def get_user_direct_deposit_accounts_with_http_info(token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DirectDepositAccountsApi.get_user_direct_deposit_accounts ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DirectDepositAccountsApi.get_user_direct_deposit_accounts"
      end
      allowable_values = ["ACTIVE", "SUSPENDED", "TERMINATED", "UNSUPPORTED", "UNACTIVATED"]
      if @api_client.config.client_side_validation && opts[:'state'] && !allowable_values.include?(opts[:'state'])
        fail ArgumentError, "invalid value for \"state\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/depositaccounts/user/{token}'.sub('{' + 'token' + '}', CGI.escape(token.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'count'] = opts[:'count'] if !opts[:'count'].nil?
      query_params[:'start_index'] = opts[:'start_index'] if !opts[:'start_index'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?
      query_params[:'state'] = opts[:'state'] if !opts[:'state'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DirectDepositAccountListResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DirectDepositAccountsApi.get_user_direct_deposit_accounts",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DirectDepositAccountsApi#get_user_direct_deposit_accounts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get User for Plain Text Account Number
    # @param account_number [String] Get user associated with direct deposit account number
    # @param [Hash] opts the optional parameters
    # @return [DirectDepositAccountResponse]
    def get_user_for_direct_deposit_account(account_number, opts = {})
      data, _status_code, _headers = get_user_for_direct_deposit_account_with_http_info(account_number, opts)
      data
    end

    # Get User for Plain Text Account Number
    # @param account_number [String] Get user associated with direct deposit account number
    # @param [Hash] opts the optional parameters
    # @return [Array<(DirectDepositAccountResponse, Integer, Hash)>] DirectDepositAccountResponse data, response status code and response headers
    def get_user_for_direct_deposit_account_with_http_info(account_number, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DirectDepositAccountsApi.get_user_for_direct_deposit_account ...'
      end
      # verify the required parameter 'account_number' is set
      if @api_client.config.client_side_validation && account_number.nil?
        fail ArgumentError, "Missing the required parameter 'account_number' when calling DirectDepositAccountsApi.get_user_for_direct_deposit_account"
      end
      # resource path
      local_var_path = '/depositaccounts/account/{account_number}/user'.sub('{' + 'account_number' + '}', CGI.escape(account_number.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DirectDepositAccountResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DirectDepositAccountsApi.get_user_for_direct_deposit_account",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DirectDepositAccountsApi#get_user_for_direct_deposit_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update direct deposit account.
    # @param token [String] 
    # @param body [DepositAccountUpdateRequest] Update direct deposit account
    # @param [Hash] opts the optional parameters
    # @return [DirectDepositAccountResponse]
    def update(token, body, opts = {})
      data, _status_code, _headers = update_with_http_info(token, body, opts)
      data
    end

    # Update direct deposit account.
    # @param token [String] 
    # @param body [DepositAccountUpdateRequest] Update direct deposit account
    # @param [Hash] opts the optional parameters
    # @return [Array<(DirectDepositAccountResponse, Integer, Hash)>] DirectDepositAccountResponse data, response status code and response headers
    def update_with_http_info(token, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DirectDepositAccountsApi.update ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DirectDepositAccountsApi.update"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling DirectDepositAccountsApi.update"
      end
      # resource path
      local_var_path = '/depositaccounts/{token}'.sub('{' + 'token' + '}', CGI.escape(token.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'DirectDepositAccountResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DirectDepositAccountsApi.update",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DirectDepositAccountsApi#update\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update CDD answers for Direct Deposit Account
    # @param token [String] 
    # @param cddtoken [String] 
    # @param body [CustomerDueDiligenceUpdateResponse] Update CDD answers
    # @param [Hash] opts the optional parameters
    # @return [CustomerDueDiligenceResponse]
    def update_cdd_info(token, cddtoken, body, opts = {})
      data, _status_code, _headers = update_cdd_info_with_http_info(token, cddtoken, body, opts)
      data
    end

    # Update CDD answers for Direct Deposit Account
    # @param token [String] 
    # @param cddtoken [String] 
    # @param body [CustomerDueDiligenceUpdateResponse] Update CDD answers
    # @param [Hash] opts the optional parameters
    # @return [Array<(CustomerDueDiligenceResponse, Integer, Hash)>] CustomerDueDiligenceResponse data, response status code and response headers
    def update_cdd_info_with_http_info(token, cddtoken, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DirectDepositAccountsApi.update_cdd_info ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling DirectDepositAccountsApi.update_cdd_info"
      end
      # verify the required parameter 'cddtoken' is set
      if @api_client.config.client_side_validation && cddtoken.nil?
        fail ArgumentError, "Missing the required parameter 'cddtoken' when calling DirectDepositAccountsApi.update_cdd_info"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling DirectDepositAccountsApi.update_cdd_info"
      end
      # resource path
      local_var_path = '/depositaccounts/{token}/cdd/{cddtoken}'.sub('{' + 'token' + '}', CGI.escape(token.to_s)).sub('{' + 'cddtoken' + '}', CGI.escape(cddtoken.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'CustomerDueDiligenceResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DirectDepositAccountsApi.update_cdd_info",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DirectDepositAccountsApi#update_cdd_info\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
