=begin
#Marqeta Core API

#Simplified management of your payment programs

The version of the OpenAPI document: 3.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.0.0

=end

require 'cgi'

module Marqeta
  class CardsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Lists cards by the last 4 digits
    # @param last_four [String] Last four digits of card number
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :count Number of cards to retrieve (default to 5)
    # @option opts [Integer] :start_index Start index (default to 0)
    # @option opts [String] :fields Comma-delimited list of fields to return (e.g. field_1,field_2,..). Leave blank to return all fields.
    # @option opts [String] :sort_by Sort order (default to '-lastModifiedTime')
    # @return [CardListResponse]
    def get_cards(last_four, opts = {})
      data, _status_code, _headers = get_cards_with_http_info(last_four, opts)
      data
    end

    # Lists cards by the last 4 digits
    # @param last_four [String] Last four digits of card number
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :count Number of cards to retrieve
    # @option opts [Integer] :start_index Start index
    # @option opts [String] :fields Comma-delimited list of fields to return (e.g. field_1,field_2,..). Leave blank to return all fields.
    # @option opts [String] :sort_by Sort order
    # @return [Array<(CardListResponse, Integer, Hash)>] CardListResponse data, response status code and response headers
    def get_cards_with_http_info(last_four, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CardsApi.get_cards ...'
      end
      # verify the required parameter 'last_four' is set
      if @api_client.config.client_side_validation && last_four.nil?
        fail ArgumentError, "Missing the required parameter 'last_four' when calling CardsApi.get_cards"
      end
      # resource path
      local_var_path = '/cards'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'last_four'] = last_four
      query_params[:'count'] = opts[:'count'] if !opts[:'count'].nil?
      query_params[:'start_index'] = opts[:'start_index'] if !opts[:'start_index'].nil?
      query_params[:'fields'] = opts[:'fields'] if !opts[:'fields'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CardListResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"CardsApi.get_cards",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CardsApi#get_cards\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns a card's metadata
    # @param barcode [String] Barcode
    # @param [Hash] opts the optional parameters
    # @option opts [String] :fields Comma-delimited list of fields to return (e.g. field_1,field_2,..). Leave blank to return all fields.
    # @return [CardResponse]
    def get_cards_barcode_barcode(barcode, opts = {})
      data, _status_code, _headers = get_cards_barcode_barcode_with_http_info(barcode, opts)
      data
    end

    # Returns a card&#39;s metadata
    # @param barcode [String] Barcode
    # @param [Hash] opts the optional parameters
    # @option opts [String] :fields Comma-delimited list of fields to return (e.g. field_1,field_2,..). Leave blank to return all fields.
    # @return [Array<(CardResponse, Integer, Hash)>] CardResponse data, response status code and response headers
    def get_cards_barcode_barcode_with_http_info(barcode, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CardsApi.get_cards_barcode_barcode ...'
      end
      # verify the required parameter 'barcode' is set
      if @api_client.config.client_side_validation && barcode.nil?
        fail ArgumentError, "Missing the required parameter 'barcode' when calling CardsApi.get_cards_barcode_barcode"
      end
      # resource path
      local_var_path = '/cards/barcode/{barcode}'.sub('{' + 'barcode' + '}', CGI.escape(barcode.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'fields'] = opts[:'fields'] if !opts[:'fields'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CardResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"CardsApi.get_cards_barcode_barcode",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CardsApi#get_cards_barcode_barcode\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns a specific card - PAN visible
    # @param card_hash [String] Card Hash
    # @param [Hash] opts the optional parameters
    # @option opts [String] :fields Comma-delimited list of fields to return (e.g. field_1,field_2,..). Leave blank to return all fields.
    # @option opts [Boolean] :show_cvv_number 
    # @return [CardResponse]
    def get_cards_card_hash_showpan(card_hash, opts = {})
      data, _status_code, _headers = get_cards_card_hash_showpan_with_http_info(card_hash, opts)
      data
    end

    # Returns a specific card - PAN visible
    # @param card_hash [String] Card Hash
    # @param [Hash] opts the optional parameters
    # @option opts [String] :fields Comma-delimited list of fields to return (e.g. field_1,field_2,..). Leave blank to return all fields.
    # @option opts [Boolean] :show_cvv_number 
    # @return [Array<(CardResponse, Integer, Hash)>] CardResponse data, response status code and response headers
    def get_cards_card_hash_showpan_with_http_info(card_hash, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CardsApi.get_cards_card_hash_showpan ...'
      end
      # verify the required parameter 'card_hash' is set
      if @api_client.config.client_side_validation && card_hash.nil?
        fail ArgumentError, "Missing the required parameter 'card_hash' when calling CardsApi.get_cards_card_hash_showpan"
      end
      # resource path
      local_var_path = '/cards/{card_hash}/showpanbyhash'.sub('{' + 'card_hash' + '}', CGI.escape(card_hash.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'fields'] = opts[:'fields'] if !opts[:'fields'].nil?
      query_params[:'show_cvv_number'] = opts[:'show_cvv_number'] if !opts[:'show_cvv_number'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CardResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"CardsApi.get_cards_card_hash_showpan",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CardsApi#get_cards_card_hash_showpan\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns a merchant onboarding card
    # @param merchant_token [String] Merchant token
    # @param [Hash] opts the optional parameters
    # @option opts [String] :fields Comma-delimited list of fields to return (e.g. field_1,field_2,..). Leave blank to return all fields.
    # @return [CardResponse]
    def get_cards_merchant_merchanttoken(merchant_token, opts = {})
      data, _status_code, _headers = get_cards_merchant_merchanttoken_with_http_info(merchant_token, opts)
      data
    end

    # Returns a merchant onboarding card
    # @param merchant_token [String] Merchant token
    # @param [Hash] opts the optional parameters
    # @option opts [String] :fields Comma-delimited list of fields to return (e.g. field_1,field_2,..). Leave blank to return all fields.
    # @return [Array<(CardResponse, Integer, Hash)>] CardResponse data, response status code and response headers
    def get_cards_merchant_merchanttoken_with_http_info(merchant_token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CardsApi.get_cards_merchant_merchanttoken ...'
      end
      # verify the required parameter 'merchant_token' is set
      if @api_client.config.client_side_validation && merchant_token.nil?
        fail ArgumentError, "Missing the required parameter 'merchant_token' when calling CardsApi.get_cards_merchant_merchanttoken"
      end
      # resource path
      local_var_path = '/cards/merchant/{merchant_token}'.sub('{' + 'merchant_token' + '}', CGI.escape(merchant_token.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'fields'] = opts[:'fields'] if !opts[:'fields'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CardResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"CardsApi.get_cards_merchant_merchanttoken",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CardsApi#get_cards_merchant_merchanttoken\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns a specific card - PAN visible
    # @param merchant_token [String] Merchant token
    # @param [Hash] opts the optional parameters
    # @option opts [String] :fields Comma-delimited list of fields to return (e.g. field_1,field_2,..). Leave blank to return all fields.
    # @option opts [Boolean] :show_cvv_number 
    # @return [CardResponse]
    def get_cards_merchant_merchanttoken_showpan(merchant_token, opts = {})
      data, _status_code, _headers = get_cards_merchant_merchanttoken_showpan_with_http_info(merchant_token, opts)
      data
    end

    # Returns a specific card - PAN visible
    # @param merchant_token [String] Merchant token
    # @param [Hash] opts the optional parameters
    # @option opts [String] :fields Comma-delimited list of fields to return (e.g. field_1,field_2,..). Leave blank to return all fields.
    # @option opts [Boolean] :show_cvv_number 
    # @return [Array<(CardResponse, Integer, Hash)>] CardResponse data, response status code and response headers
    def get_cards_merchant_merchanttoken_showpan_with_http_info(merchant_token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CardsApi.get_cards_merchant_merchanttoken_showpan ...'
      end
      # verify the required parameter 'merchant_token' is set
      if @api_client.config.client_side_validation && merchant_token.nil?
        fail ArgumentError, "Missing the required parameter 'merchant_token' when calling CardsApi.get_cards_merchant_merchanttoken_showpan"
      end
      # resource path
      local_var_path = '/cards/merchant/{merchant_token}/showpan'.sub('{' + 'merchant_token' + '}', CGI.escape(merchant_token.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'fields'] = opts[:'fields'] if !opts[:'fields'].nil?
      query_params[:'show_cvv_number'] = opts[:'show_cvv_number'] if !opts[:'show_cvv_number'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CardResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"CardsApi.get_cards_merchant_merchanttoken_showpan",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CardsApi#get_cards_merchant_merchanttoken_showpan\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns a specific card
    # @param token [String] Card token
    # @param [Hash] opts the optional parameters
    # @option opts [String] :fields Comma-delimited list of fields to return (e.g. field_1,field_2,..). Leave blank to return all fields.
    # @option opts [String] :expand Object to expand
    # @return [CardResponse]
    def get_cards_token(token, opts = {})
      data, _status_code, _headers = get_cards_token_with_http_info(token, opts)
      data
    end

    # Returns a specific card
    # @param token [String] Card token
    # @param [Hash] opts the optional parameters
    # @option opts [String] :fields Comma-delimited list of fields to return (e.g. field_1,field_2,..). Leave blank to return all fields.
    # @option opts [String] :expand Object to expand
    # @return [Array<(CardResponse, Integer, Hash)>] CardResponse data, response status code and response headers
    def get_cards_token_with_http_info(token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CardsApi.get_cards_token ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling CardsApi.get_cards_token"
      end
      # resource path
      local_var_path = '/cards/{token}'.sub('{' + 'token' + '}', CGI.escape(token.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'fields'] = opts[:'fields'] if !opts[:'fields'].nil?
      query_params[:'expand'] = opts[:'expand'] if !opts[:'expand'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CardResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"CardsApi.get_cards_token",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CardsApi#get_cards_token\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns a specific card - PAN visible
    # @param token [String] Card token
    # @param [Hash] opts the optional parameters
    # @option opts [String] :fields Comma-delimited list of fields to return (e.g. field_1,field_2,..). Leave blank to return all fields.
    # @option opts [Boolean] :show_cvv_number 
    # @return [CardResponse]
    def get_cards_token_showpan(token, opts = {})
      data, _status_code, _headers = get_cards_token_showpan_with_http_info(token, opts)
      data
    end

    # Returns a specific card - PAN visible
    # @param token [String] Card token
    # @param [Hash] opts the optional parameters
    # @option opts [String] :fields Comma-delimited list of fields to return (e.g. field_1,field_2,..). Leave blank to return all fields.
    # @option opts [Boolean] :show_cvv_number 
    # @return [Array<(CardResponse, Integer, Hash)>] CardResponse data, response status code and response headers
    def get_cards_token_showpan_with_http_info(token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CardsApi.get_cards_token_showpan ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling CardsApi.get_cards_token_showpan"
      end
      # resource path
      local_var_path = '/cards/{token}/showpan'.sub('{' + 'token' + '}', CGI.escape(token.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'fields'] = opts[:'fields'] if !opts[:'fields'].nil?
      query_params[:'show_cvv_number'] = opts[:'show_cvv_number'] if !opts[:'show_cvv_number'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CardResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"CardsApi.get_cards_token_showpan",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CardsApi#get_cards_token_showpan\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Lists all cards for a specific user
    # @param token [String] User token
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :count Number of items to retrieve (default to 5)
    # @option opts [Integer] :start_index Start index (default to 0)
    # @option opts [String] :fields Comma-delimited list of fields to return (e.g. field_1,field_2,..). Leave blank to return all fields.
    # @option opts [String] :sort_by Sort order (default to '-lastModifiedTime')
    # @return [CardListResponse]
    def get_cards_user_token(token, opts = {})
      data, _status_code, _headers = get_cards_user_token_with_http_info(token, opts)
      data
    end

    # Lists all cards for a specific user
    # @param token [String] User token
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :count Number of items to retrieve
    # @option opts [Integer] :start_index Start index
    # @option opts [String] :fields Comma-delimited list of fields to return (e.g. field_1,field_2,..). Leave blank to return all fields.
    # @option opts [String] :sort_by Sort order
    # @return [Array<(CardListResponse, Integer, Hash)>] CardListResponse data, response status code and response headers
    def get_cards_user_token_with_http_info(token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CardsApi.get_cards_user_token ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling CardsApi.get_cards_user_token"
      end
      # resource path
      local_var_path = '/cards/user/{token}'.sub('{' + 'token' + '}', CGI.escape(token.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'count'] = opts[:'count'] if !opts[:'count'].nil?
      query_params[:'start_index'] = opts[:'start_index'] if !opts[:'start_index'].nil?
      query_params[:'fields'] = opts[:'fields'] if !opts[:'fields'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CardListResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"CardsApi.get_cards_user_token",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CardsApi#get_cards_user_token\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Creates a card
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :show_cvv_number Show CVV (default to false)
    # @option opts [Boolean] :show_pan Show PAN (default to false)
    # @option opts [CardRequest] :body 
    # @return [CardResponse]
    def post_cards(opts = {})
      data, _status_code, _headers = post_cards_with_http_info(opts)
      data
    end

    # Creates a card
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :show_cvv_number Show CVV
    # @option opts [Boolean] :show_pan Show PAN
    # @option opts [CardRequest] :body 
    # @return [Array<(CardResponse, Integer, Hash)>] CardResponse data, response status code and response headers
    def post_cards_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CardsApi.post_cards ...'
      end
      # resource path
      local_var_path = '/cards'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'show_cvv_number'] = opts[:'show_cvv_number'] if !opts[:'show_cvv_number'].nil?
      query_params[:'show_pan'] = opts[:'show_pan'] if !opts[:'show_pan'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'body'])

      # return_type
      return_type = opts[:debug_return_type] || 'CardResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"CardsApi.post_cards",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CardsApi#post_cards\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns user and card tokens for the specified PAN
    # @param [Hash] opts the optional parameters
    # @option opts [PanRequest] :body 
    # @return [PanResponse]
    def post_cards_getbypan(opts = {})
      data, _status_code, _headers = post_cards_getbypan_with_http_info(opts)
      data
    end

    # Returns user and card tokens for the specified PAN
    # @param [Hash] opts the optional parameters
    # @option opts [PanRequest] :body 
    # @return [Array<(PanResponse, Integer, Hash)>] PanResponse data, response status code and response headers
    def post_cards_getbypan_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CardsApi.post_cards_getbypan ...'
      end
      # resource path
      local_var_path = '/cards/getbypan'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'body'])

      # return_type
      return_type = opts[:debug_return_type] || 'PanResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"CardsApi.post_cards_getbypan",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CardsApi#post_cards_getbypan\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Creates a merchant onboarding card
    # @param merchant_token [String] Merchant token
    # @param [Hash] opts the optional parameters
    # @option opts [MerchantCardRequest] :body 
    # @return [CardResponse]
    def post_cards_merchant_merchanttoken(merchant_token, opts = {})
      data, _status_code, _headers = post_cards_merchant_merchanttoken_with_http_info(merchant_token, opts)
      data
    end

    # Creates a merchant onboarding card
    # @param merchant_token [String] Merchant token
    # @param [Hash] opts the optional parameters
    # @option opts [MerchantCardRequest] :body 
    # @return [Array<(CardResponse, Integer, Hash)>] CardResponse data, response status code and response headers
    def post_cards_merchant_merchanttoken_with_http_info(merchant_token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CardsApi.post_cards_merchant_merchanttoken ...'
      end
      # verify the required parameter 'merchant_token' is set
      if @api_client.config.client_side_validation && merchant_token.nil?
        fail ArgumentError, "Missing the required parameter 'merchant_token' when calling CardsApi.post_cards_merchant_merchanttoken"
      end
      # resource path
      local_var_path = '/cards/merchant/{merchant_token}'.sub('{' + 'merchant_token' + '}', CGI.escape(merchant_token.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'body'])

      # return_type
      return_type = opts[:debug_return_type] || 'CardResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"CardsApi.post_cards_merchant_merchanttoken",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CardsApi#post_cards_merchant_merchanttoken\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Updates a specific card
    # @param token [String] Card token
    # @param [Hash] opts the optional parameters
    # @option opts [CardUpdateRequest] :body 
    # @return [CardResponse]
    def put_cards_token(token, opts = {})
      data, _status_code, _headers = put_cards_token_with_http_info(token, opts)
      data
    end

    # Updates a specific card
    # @param token [String] Card token
    # @param [Hash] opts the optional parameters
    # @option opts [CardUpdateRequest] :body 
    # @return [Array<(CardResponse, Integer, Hash)>] CardResponse data, response status code and response headers
    def put_cards_token_with_http_info(token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CardsApi.put_cards_token ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling CardsApi.put_cards_token"
      end
      # resource path
      local_var_path = '/cards/{token}'.sub('{' + 'token' + '}', CGI.escape(token.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'body'])

      # return_type
      return_type = opts[:debug_return_type] || 'CardResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"CardsApi.put_cards_token",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CardsApi#put_cards_token\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
