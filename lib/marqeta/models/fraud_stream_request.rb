=begin
#Marqeta Core API

#Simplified management of your payment programs

The version of the OpenAPI document: 3.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.0.0

=end

require 'date'
require 'time'

module Marqeta
  class FraudStreamRequest
    attr_accessor :program

    attr_accessor :type

    attr_accessor :state

    attr_accessor :itc

    attr_accessor :token

    attr_accessor :user_token

    attr_accessor :acting_user_token

    attr_accessor :card_token

    attr_accessor :user_transaction_time

    attr_accessor :request_amount

    attr_accessor :amount

    attr_accessor :currency_code

    attr_accessor :network

    attr_accessor :account_risk_score

    attr_accessor :account_risk_score_reason_code

    attr_accessor :transaction_risk_score

    attr_accessor :transaction_risk_score_reason_code

    attr_accessor :card_acceptor

    attr_accessor :address_verification

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'program' => :'program',
        :'type' => :'type',
        :'state' => :'state',
        :'itc' => :'itc',
        :'token' => :'token',
        :'user_token' => :'user_token',
        :'acting_user_token' => :'acting_user_token',
        :'card_token' => :'card_token',
        :'user_transaction_time' => :'user_transaction_time',
        :'request_amount' => :'request_amount',
        :'amount' => :'amount',
        :'currency_code' => :'currency_code',
        :'network' => :'network',
        :'account_risk_score' => :'account_risk_score',
        :'account_risk_score_reason_code' => :'account_risk_score_reason_code',
        :'transaction_risk_score' => :'transaction_risk_score',
        :'transaction_risk_score_reason_code' => :'transaction_risk_score_reason_code',
        :'card_acceptor' => :'card_acceptor',
        :'address_verification' => :'address_verification'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'program' => :'String',
        :'type' => :'String',
        :'state' => :'String',
        :'itc' => :'String',
        :'token' => :'String',
        :'user_token' => :'String',
        :'acting_user_token' => :'String',
        :'card_token' => :'String',
        :'user_transaction_time' => :'Time',
        :'request_amount' => :'Float',
        :'amount' => :'Float',
        :'currency_code' => :'String',
        :'network' => :'String',
        :'account_risk_score' => :'String',
        :'account_risk_score_reason_code' => :'String',
        :'transaction_risk_score' => :'Integer',
        :'transaction_risk_score_reason_code' => :'String',
        :'card_acceptor' => :'TransactionCardAcceptorViewModelV1',
        :'address_verification' => :'AddressVerificationModel'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Marqeta::FraudStreamRequest` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Marqeta::FraudStreamRequest`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'program')
        self.program = attributes[:'program']
      end

      if attributes.key?(:'type')
        self.type = attributes[:'type']
      end

      if attributes.key?(:'state')
        self.state = attributes[:'state']
      end

      if attributes.key?(:'itc')
        self.itc = attributes[:'itc']
      end

      if attributes.key?(:'token')
        self.token = attributes[:'token']
      end

      if attributes.key?(:'user_token')
        self.user_token = attributes[:'user_token']
      end

      if attributes.key?(:'acting_user_token')
        self.acting_user_token = attributes[:'acting_user_token']
      end

      if attributes.key?(:'card_token')
        self.card_token = attributes[:'card_token']
      end

      if attributes.key?(:'user_transaction_time')
        self.user_transaction_time = attributes[:'user_transaction_time']
      end

      if attributes.key?(:'request_amount')
        self.request_amount = attributes[:'request_amount']
      end

      if attributes.key?(:'amount')
        self.amount = attributes[:'amount']
      end

      if attributes.key?(:'currency_code')
        self.currency_code = attributes[:'currency_code']
      end

      if attributes.key?(:'network')
        self.network = attributes[:'network']
      end

      if attributes.key?(:'account_risk_score')
        self.account_risk_score = attributes[:'account_risk_score']
      end

      if attributes.key?(:'account_risk_score_reason_code')
        self.account_risk_score_reason_code = attributes[:'account_risk_score_reason_code']
      end

      if attributes.key?(:'transaction_risk_score')
        self.transaction_risk_score = attributes[:'transaction_risk_score']
      end

      if attributes.key?(:'transaction_risk_score_reason_code')
        self.transaction_risk_score_reason_code = attributes[:'transaction_risk_score_reason_code']
      end

      if attributes.key?(:'card_acceptor')
        self.card_acceptor = attributes[:'card_acceptor']
      end

      if attributes.key?(:'address_verification')
        self.address_verification = attributes[:'address_verification']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      type_validator = EnumAttributeValidator.new('String', ["GPA_CREDIT_PENDING", "GPA_CREDIT_PENDING_REVERSAL", "GPA_CREDIT_REVERSAL", "GPA_CREDIT", "GPA_DEBIT", "GPA_DEBIT_PENDING_REVERSAL", "GPA_DEBIT_REVERSAL", "GPA_GRANT", "GPA_CREDIT_NETWORK_LOAD", "GPA_CREDIT_NETWORK_LOAD_CLEARING", "GPA_CREDIT_NETWORK_LOAD_REVERSAL", "GPA_DEBIT_NETWORK_LOAD", "GPA_DEBIT_NETWORK_LOAD_CLEARING", "GPA_DEBIT_NETWORK_LOAD_REVERSAL", "ORIGINAL_CREDIT_AUTH", "ORIGINAL_CREDIT_AUTH_CLEARING", "ORIGINAL_CREDIT_AUTH_REVERSAL", "ORIGINAL_CREDIT_AUTH_CAPTURE", "ORIGINAL_CREDIT_AUTH_CAPTURE_REVERSAL", "GPA_CREDIT_ISSUER_OPERATOR", "GPA_DEBIT_ISSUER_OPERATOR", "GPA_DEBIT_AUTHORIZATION", "GPA_CREDIT_AUTHORIZATION", "GPA_CREDIT_AUTHORIZATION_REVERSAL", "GPA_CREDIT_CHARGEBACK", "GPA_CREDIT_CHARGEBACK_REVERSAL", "GPA_CREDIT_BILLPAYMENT", "GPA_CREDIT_AUTHORIZATION_BILLPAYMENT", "GPA_CREDIT_AUTHORIZATION_BILLPAYMENT_REVERSAL", "MSA_CREDIT_PENDING", "MSA_CREDIT_PENDING_REVERSAL", "MSA_CREDIT_REVERSAL", "MSA_CREDIT", "MSA_DEBIT_REVERSAL", "MSA_DEBIT_PENDING_REVERSAL", "MSA_DEBIT", "MSA_CREDIT_AUTHORIZATION", "MSA_CREDIT_AUTHORIZATION_REVERSAL", "MSA_CREDIT_CHARGEBACK", "MSA_CREDIT_CHARGEBACK_REVERSAL", "AUTHORIZATION", "AUTHORIZATION_INCREMENTAL", "AUTHORIZATION_ADVICE", "AUTHORIZATION_REVERSAL", "AUTHORIZATION_CASHBACK", "AUTHORIZATION_QUASI_CASH", "AUTHORIZATION_ATM_WITHDRAWAL", "AUTHORIZATION_CLEARING", "AUTHORIZATION_CLEARING_NETWORK_FEE", "AUTHORIZATION_CLEARING_REPRESENTMENT", "AUTHORIZATION_REVERSAL_ISSUER_EXPIRATION", "DISPUTE_CREDIT", "DISPUTE_DEBIT", "AUTHORIZATION_CLEARING_CHARGEBACK", "AUTHORIZATION_CLEARING_CHARGEBACK_REVERSAL", "AUTHORIZATION_CLEARING_CHARGEBACK_COMPLETED", "AUTHORIZATION_CLEARING_CHARGEBACK_PROVISIONAL_CREDIT", "AUTHORIZATION_CLEARING_CHARGEBACK_PROVISIONAL_DEBIT", "AUTHORIZATION_CLEARING_CHARGEBACK_WRITEOFF", "AUTHORIZATION_CLEARING_CASHBACK", "AUTHORIZATION_CLEARING_QUASI_CASH", "AUTHORIZATION_CLEARING_ATM_WITHDRAWAL", "ACCOUNT_FUNDING_AUTHORIZATION", "ACCOUNT_FUNDING_AUTHORIZATION_CLEARING", "ACCOUNT_FUNDING_PLUS_AUTH_CAPTURE", "ACCOUNT_FUNDING_AUTHORIZATION_REVERSAL", "ACCOUNT_FUNDING_PLUS_AUTH_CAPTURE_REVERSAL", "BALANCE_INQUIRY", "REFUND", "PIN_DEBIT_CREDIT_ADJUSTMENT", "PIN_DEBIT_DEBIT_ADJUSTMENT", "PIN_DEBIT_ATM_WITHDRAWAL", "PIN_DEBIT_QUASI_CASH", "PIN_DEBIT_BALANCE_INQUIRY", "PIN_DEBIT_CASHBACK", "PIN_DEBIT_CHECK_AVS", "PIN_DEBIT_FINANCIAL_DEPOSIT", "PIN_DEBIT_FINANCIAL_REFUND", "PIN_DEBIT_FINANCIAL_REVERSAL", "PIN_DEBIT_FINANCIAL_REFUND_REVERSAL", "PIN_DEBIT_TRANSFER", "PIN_DEBIT", "PIN_DEBIT_REPRESENTMENT", "PIN_DEBIT_AUTHORIZATION", "PIN_DEBIT_AUTHORIZATION_CLEARING", "PIN_DEBIT_AUTHORIZATION_REVERSAL", "PIN_DEBIT_AUTHORIZATION_REVERSAL_ISSUER_EXPIRATION", "PIN_DEBIT_CHARGEBACK", "PIN_DEBIT_CHARGEBACK_REVERSAL", "PIN_DEBIT_CHARGEBACK_COMPLETED", "PIN_DEBIT_CHARGEBACK_PROVISIONAL_CREDIT", "PIN_DEBIT_CHARGEBACK_PROVISIONAL_DEBIT", "PIN_DEBIT_CHARGEBACK_WRITEOFF", "DIRECT_DEPOSIT_CREDIT", "DIRECT_DEPOSIT_DEBIT", "DIRECT_DEPOSIT_CREDIT_PENDING", "DIRECT_DEPOSIT_DEBIT_PENDING", "DIRECT_DEPOSIT_CREDIT_REJECT", "DIRECT_DEPOSIT_DEBIT_REJECT", "DIRECT_DEPOSIT_CREDIT_PENDING_REVERSAL", "DIRECT_DEPOSIT_DEBIT_PENDING_REVERSAL", "DIRECT_DEPOSIT_CREDIT_REVERSAL", "DIRECT_DEPOSIT_DEBIT_REVERSAL", "FEE_CHARGE_PENDING", "FEE_CHARGE", "FEE_CHARGE_REFUND", "FUNDS_EXPIRE", "PROGRAMRESERVE_CREDIT", "PROGRAMRESERVE_DEBIT", "REWARD_EARN", "TRANSFER_PEER", "TRANSFER_FEE", "ACCOUNT_CREDIT", "ACCOUNT_DEBIT", "TRANSFER_PROGRAM", "AUTHORIZATION_STANDIN", "PIN_DEBIT_STANDIN", "TOKEN_ACTIVATION_REQUEST", "TOKEN_ADVICE", "PTC_DEBIT", "PTC_PENDING_DB", "PTC_DB_REV", "BILLPAYMENT", "BILLPAYMENT_CLEARING", "BILLPAYMENT_REVERSAL", "RETURN_AUTHORIZATION", "RETURN_AUTHORIZATION_CLEARING", "RETURN_AUTHORIZATION_REVERSAL", "ACH_PUSH_PENDING", "ACH_PULL_PENDING", "ACH_PUSH", "ACH_PULL", "UNKNOWN"])
      return false unless type_validator.valid?(@type)
      state_validator = EnumAttributeValidator.new('String', ["PENDING", "CLEARED", "COMPLETION", "DECLINED", "ERROR", "ALL"])
      return false unless state_validator.valid?(@state)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] type Object to be assigned
    def type=(type)
      validator = EnumAttributeValidator.new('String', ["GPA_CREDIT_PENDING", "GPA_CREDIT_PENDING_REVERSAL", "GPA_CREDIT_REVERSAL", "GPA_CREDIT", "GPA_DEBIT", "GPA_DEBIT_PENDING_REVERSAL", "GPA_DEBIT_REVERSAL", "GPA_GRANT", "GPA_CREDIT_NETWORK_LOAD", "GPA_CREDIT_NETWORK_LOAD_CLEARING", "GPA_CREDIT_NETWORK_LOAD_REVERSAL", "GPA_DEBIT_NETWORK_LOAD", "GPA_DEBIT_NETWORK_LOAD_CLEARING", "GPA_DEBIT_NETWORK_LOAD_REVERSAL", "ORIGINAL_CREDIT_AUTH", "ORIGINAL_CREDIT_AUTH_CLEARING", "ORIGINAL_CREDIT_AUTH_REVERSAL", "ORIGINAL_CREDIT_AUTH_CAPTURE", "ORIGINAL_CREDIT_AUTH_CAPTURE_REVERSAL", "GPA_CREDIT_ISSUER_OPERATOR", "GPA_DEBIT_ISSUER_OPERATOR", "GPA_DEBIT_AUTHORIZATION", "GPA_CREDIT_AUTHORIZATION", "GPA_CREDIT_AUTHORIZATION_REVERSAL", "GPA_CREDIT_CHARGEBACK", "GPA_CREDIT_CHARGEBACK_REVERSAL", "GPA_CREDIT_BILLPAYMENT", "GPA_CREDIT_AUTHORIZATION_BILLPAYMENT", "GPA_CREDIT_AUTHORIZATION_BILLPAYMENT_REVERSAL", "MSA_CREDIT_PENDING", "MSA_CREDIT_PENDING_REVERSAL", "MSA_CREDIT_REVERSAL", "MSA_CREDIT", "MSA_DEBIT_REVERSAL", "MSA_DEBIT_PENDING_REVERSAL", "MSA_DEBIT", "MSA_CREDIT_AUTHORIZATION", "MSA_CREDIT_AUTHORIZATION_REVERSAL", "MSA_CREDIT_CHARGEBACK", "MSA_CREDIT_CHARGEBACK_REVERSAL", "AUTHORIZATION", "AUTHORIZATION_INCREMENTAL", "AUTHORIZATION_ADVICE", "AUTHORIZATION_REVERSAL", "AUTHORIZATION_CASHBACK", "AUTHORIZATION_QUASI_CASH", "AUTHORIZATION_ATM_WITHDRAWAL", "AUTHORIZATION_CLEARING", "AUTHORIZATION_CLEARING_NETWORK_FEE", "AUTHORIZATION_CLEARING_REPRESENTMENT", "AUTHORIZATION_REVERSAL_ISSUER_EXPIRATION", "DISPUTE_CREDIT", "DISPUTE_DEBIT", "AUTHORIZATION_CLEARING_CHARGEBACK", "AUTHORIZATION_CLEARING_CHARGEBACK_REVERSAL", "AUTHORIZATION_CLEARING_CHARGEBACK_COMPLETED", "AUTHORIZATION_CLEARING_CHARGEBACK_PROVISIONAL_CREDIT", "AUTHORIZATION_CLEARING_CHARGEBACK_PROVISIONAL_DEBIT", "AUTHORIZATION_CLEARING_CHARGEBACK_WRITEOFF", "AUTHORIZATION_CLEARING_CASHBACK", "AUTHORIZATION_CLEARING_QUASI_CASH", "AUTHORIZATION_CLEARING_ATM_WITHDRAWAL", "ACCOUNT_FUNDING_AUTHORIZATION", "ACCOUNT_FUNDING_AUTHORIZATION_CLEARING", "ACCOUNT_FUNDING_PLUS_AUTH_CAPTURE", "ACCOUNT_FUNDING_AUTHORIZATION_REVERSAL", "ACCOUNT_FUNDING_PLUS_AUTH_CAPTURE_REVERSAL", "BALANCE_INQUIRY", "REFUND", "PIN_DEBIT_CREDIT_ADJUSTMENT", "PIN_DEBIT_DEBIT_ADJUSTMENT", "PIN_DEBIT_ATM_WITHDRAWAL", "PIN_DEBIT_QUASI_CASH", "PIN_DEBIT_BALANCE_INQUIRY", "PIN_DEBIT_CASHBACK", "PIN_DEBIT_CHECK_AVS", "PIN_DEBIT_FINANCIAL_DEPOSIT", "PIN_DEBIT_FINANCIAL_REFUND", "PIN_DEBIT_FINANCIAL_REVERSAL", "PIN_DEBIT_FINANCIAL_REFUND_REVERSAL", "PIN_DEBIT_TRANSFER", "PIN_DEBIT", "PIN_DEBIT_REPRESENTMENT", "PIN_DEBIT_AUTHORIZATION", "PIN_DEBIT_AUTHORIZATION_CLEARING", "PIN_DEBIT_AUTHORIZATION_REVERSAL", "PIN_DEBIT_AUTHORIZATION_REVERSAL_ISSUER_EXPIRATION", "PIN_DEBIT_CHARGEBACK", "PIN_DEBIT_CHARGEBACK_REVERSAL", "PIN_DEBIT_CHARGEBACK_COMPLETED", "PIN_DEBIT_CHARGEBACK_PROVISIONAL_CREDIT", "PIN_DEBIT_CHARGEBACK_PROVISIONAL_DEBIT", "PIN_DEBIT_CHARGEBACK_WRITEOFF", "DIRECT_DEPOSIT_CREDIT", "DIRECT_DEPOSIT_DEBIT", "DIRECT_DEPOSIT_CREDIT_PENDING", "DIRECT_DEPOSIT_DEBIT_PENDING", "DIRECT_DEPOSIT_CREDIT_REJECT", "DIRECT_DEPOSIT_DEBIT_REJECT", "DIRECT_DEPOSIT_CREDIT_PENDING_REVERSAL", "DIRECT_DEPOSIT_DEBIT_PENDING_REVERSAL", "DIRECT_DEPOSIT_CREDIT_REVERSAL", "DIRECT_DEPOSIT_DEBIT_REVERSAL", "FEE_CHARGE_PENDING", "FEE_CHARGE", "FEE_CHARGE_REFUND", "FUNDS_EXPIRE", "PROGRAMRESERVE_CREDIT", "PROGRAMRESERVE_DEBIT", "REWARD_EARN", "TRANSFER_PEER", "TRANSFER_FEE", "ACCOUNT_CREDIT", "ACCOUNT_DEBIT", "TRANSFER_PROGRAM", "AUTHORIZATION_STANDIN", "PIN_DEBIT_STANDIN", "TOKEN_ACTIVATION_REQUEST", "TOKEN_ADVICE", "PTC_DEBIT", "PTC_PENDING_DB", "PTC_DB_REV", "BILLPAYMENT", "BILLPAYMENT_CLEARING", "BILLPAYMENT_REVERSAL", "RETURN_AUTHORIZATION", "RETURN_AUTHORIZATION_CLEARING", "RETURN_AUTHORIZATION_REVERSAL", "ACH_PUSH_PENDING", "ACH_PULL_PENDING", "ACH_PUSH", "ACH_PULL", "UNKNOWN"])
      unless validator.valid?(type)
        fail ArgumentError, "invalid value for \"type\", must be one of #{validator.allowable_values}."
      end
      @type = type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] state Object to be assigned
    def state=(state)
      validator = EnumAttributeValidator.new('String', ["PENDING", "CLEARED", "COMPLETION", "DECLINED", "ERROR", "ALL"])
      unless validator.valid?(state)
        fail ArgumentError, "invalid value for \"state\", must be one of #{validator.allowable_values}."
      end
      @state = state
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          program == o.program &&
          type == o.type &&
          state == o.state &&
          itc == o.itc &&
          token == o.token &&
          user_token == o.user_token &&
          acting_user_token == o.acting_user_token &&
          card_token == o.card_token &&
          user_transaction_time == o.user_transaction_time &&
          request_amount == o.request_amount &&
          amount == o.amount &&
          currency_code == o.currency_code &&
          network == o.network &&
          account_risk_score == o.account_risk_score &&
          account_risk_score_reason_code == o.account_risk_score_reason_code &&
          transaction_risk_score == o.transaction_risk_score &&
          transaction_risk_score_reason_code == o.transaction_risk_score_reason_code &&
          card_acceptor == o.card_acceptor &&
          address_verification == o.address_verification
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [program, type, state, itc, token, user_token, acting_user_token, card_token, user_transaction_time, request_amount, amount, currency_code, network, account_risk_score, account_risk_score_reason_code, transaction_risk_score, transaction_risk_score_reason_code, card_acceptor, address_verification].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Marqeta.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
