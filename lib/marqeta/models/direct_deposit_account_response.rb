=begin
#Marqeta Core API

#Simplified management of your payment programs

The version of the OpenAPI document: 3.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.0.0

=end

require 'date'
require 'time'

module Marqeta
  class DirectDepositAccountResponse
    attr_accessor :account_number

    attr_accessor :routing_number

    attr_accessor :token

    attr_accessor :user_token

    attr_accessor :business_token

    attr_accessor :state

    attr_accessor :allow_immediate_credit

    attr_accessor :type

    # yyyy-MM-ddTHH:mm:ssZ
    attr_accessor :created_time

    # yyyy-MM-ddTHH:mm:ssZ
    attr_accessor :last_modified_time

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'account_number' => :'account_number',
        :'routing_number' => :'routing_number',
        :'token' => :'token',
        :'user_token' => :'user_token',
        :'business_token' => :'business_token',
        :'state' => :'state',
        :'allow_immediate_credit' => :'allow_immediate_credit',
        :'type' => :'type',
        :'created_time' => :'created_time',
        :'last_modified_time' => :'last_modified_time'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'account_number' => :'String',
        :'routing_number' => :'String',
        :'token' => :'String',
        :'user_token' => :'String',
        :'business_token' => :'String',
        :'state' => :'String',
        :'allow_immediate_credit' => :'Boolean',
        :'type' => :'String',
        :'created_time' => :'Time',
        :'last_modified_time' => :'Time'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Marqeta::DirectDepositAccountResponse` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Marqeta::DirectDepositAccountResponse`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'account_number')
        self.account_number = attributes[:'account_number']
      end

      if attributes.key?(:'routing_number')
        self.routing_number = attributes[:'routing_number']
      end

      if attributes.key?(:'token')
        self.token = attributes[:'token']
      end

      if attributes.key?(:'user_token')
        self.user_token = attributes[:'user_token']
      end

      if attributes.key?(:'business_token')
        self.business_token = attributes[:'business_token']
      end

      if attributes.key?(:'state')
        self.state = attributes[:'state']
      end

      if attributes.key?(:'allow_immediate_credit')
        self.allow_immediate_credit = attributes[:'allow_immediate_credit']
      else
        self.allow_immediate_credit = false
      end

      if attributes.key?(:'type')
        self.type = attributes[:'type']
      end

      if attributes.key?(:'created_time')
        self.created_time = attributes[:'created_time']
      end

      if attributes.key?(:'last_modified_time')
        self.last_modified_time = attributes[:'last_modified_time']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @account_number.nil?
        invalid_properties.push('invalid value for "account_number", account_number cannot be nil.')
      end

      if @account_number.to_s.length > 17
        invalid_properties.push('invalid value for "account_number", the character length must be smaller than or equal to 17.')
      end

      if @account_number.to_s.length < 13
        invalid_properties.push('invalid value for "account_number", the character length must be great than or equal to 13.')
      end

      if @routing_number.nil?
        invalid_properties.push('invalid value for "routing_number", routing_number cannot be nil.')
      end

      if @routing_number.to_s.length > 9
        invalid_properties.push('invalid value for "routing_number", the character length must be smaller than or equal to 9.')
      end

      if @routing_number.to_s.length < 9
        invalid_properties.push('invalid value for "routing_number", the character length must be great than or equal to 9.')
      end

      if @token.nil?
        invalid_properties.push('invalid value for "token", token cannot be nil.')
      end

      if @token.to_s.length > 36
        invalid_properties.push('invalid value for "token", the character length must be smaller than or equal to 36.')
      end

      if @token.to_s.length < 36
        invalid_properties.push('invalid value for "token", the character length must be great than or equal to 36.')
      end

      if @user_token.nil?
        invalid_properties.push('invalid value for "user_token", user_token cannot be nil.')
      end

      if @user_token.to_s.length > 36
        invalid_properties.push('invalid value for "user_token", the character length must be smaller than or equal to 36.')
      end

      if @user_token.to_s.length < 36
        invalid_properties.push('invalid value for "user_token", the character length must be great than or equal to 36.')
      end

      if @business_token.nil?
        invalid_properties.push('invalid value for "business_token", business_token cannot be nil.')
      end

      if @business_token.to_s.length > 36
        invalid_properties.push('invalid value for "business_token", the character length must be smaller than or equal to 36.')
      end

      if @business_token.to_s.length < 36
        invalid_properties.push('invalid value for "business_token", the character length must be great than or equal to 36.')
      end

      if @state.nil?
        invalid_properties.push('invalid value for "state", state cannot be nil.')
      end

      if @state.to_s.length > 10
        invalid_properties.push('invalid value for "state", the character length must be smaller than or equal to 10.')
      end

      if @state.to_s.length < 6
        invalid_properties.push('invalid value for "state", the character length must be great than or equal to 6.')
      end

      if @allow_immediate_credit.nil?
        invalid_properties.push('invalid value for "allow_immediate_credit", allow_immediate_credit cannot be nil.')
      end

      if !@type.nil? && @type.to_s.length > 36
        invalid_properties.push('invalid value for "type", the character length must be smaller than or equal to 36.')
      end

      if !@type.nil? && @type.to_s.length < 7
        invalid_properties.push('invalid value for "type", the character length must be great than or equal to 7.')
      end

      if @created_time.nil?
        invalid_properties.push('invalid value for "created_time", created_time cannot be nil.')
      end

      if @last_modified_time.nil?
        invalid_properties.push('invalid value for "last_modified_time", last_modified_time cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @account_number.nil?
      return false if @account_number.to_s.length > 17
      return false if @account_number.to_s.length < 13
      return false if @routing_number.nil?
      return false if @routing_number.to_s.length > 9
      return false if @routing_number.to_s.length < 9
      return false if @token.nil?
      return false if @token.to_s.length > 36
      return false if @token.to_s.length < 36
      return false if @user_token.nil?
      return false if @user_token.to_s.length > 36
      return false if @user_token.to_s.length < 36
      return false if @business_token.nil?
      return false if @business_token.to_s.length > 36
      return false if @business_token.to_s.length < 36
      return false if @state.nil?
      return false if @state.to_s.length > 10
      return false if @state.to_s.length < 6
      return false if @allow_immediate_credit.nil?
      return false if !@type.nil? && @type.to_s.length > 36
      return false if !@type.nil? && @type.to_s.length < 7
      return false if @created_time.nil?
      return false if @last_modified_time.nil?
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] account_number Value to be assigned
    def account_number=(account_number)
      if account_number.nil?
        fail ArgumentError, 'account_number cannot be nil'
      end

      if account_number.to_s.length > 17
        fail ArgumentError, 'invalid value for "account_number", the character length must be smaller than or equal to 17.'
      end

      if account_number.to_s.length < 13
        fail ArgumentError, 'invalid value for "account_number", the character length must be great than or equal to 13.'
      end

      @account_number = account_number
    end

    # Custom attribute writer method with validation
    # @param [Object] routing_number Value to be assigned
    def routing_number=(routing_number)
      if routing_number.nil?
        fail ArgumentError, 'routing_number cannot be nil'
      end

      if routing_number.to_s.length > 9
        fail ArgumentError, 'invalid value for "routing_number", the character length must be smaller than or equal to 9.'
      end

      if routing_number.to_s.length < 9
        fail ArgumentError, 'invalid value for "routing_number", the character length must be great than or equal to 9.'
      end

      @routing_number = routing_number
    end

    # Custom attribute writer method with validation
    # @param [Object] token Value to be assigned
    def token=(token)
      if token.nil?
        fail ArgumentError, 'token cannot be nil'
      end

      if token.to_s.length > 36
        fail ArgumentError, 'invalid value for "token", the character length must be smaller than or equal to 36.'
      end

      if token.to_s.length < 36
        fail ArgumentError, 'invalid value for "token", the character length must be great than or equal to 36.'
      end

      @token = token
    end

    # Custom attribute writer method with validation
    # @param [Object] user_token Value to be assigned
    def user_token=(user_token)
      if user_token.nil?
        fail ArgumentError, 'user_token cannot be nil'
      end

      if user_token.to_s.length > 36
        fail ArgumentError, 'invalid value for "user_token", the character length must be smaller than or equal to 36.'
      end

      if user_token.to_s.length < 36
        fail ArgumentError, 'invalid value for "user_token", the character length must be great than or equal to 36.'
      end

      @user_token = user_token
    end

    # Custom attribute writer method with validation
    # @param [Object] business_token Value to be assigned
    def business_token=(business_token)
      if business_token.nil?
        fail ArgumentError, 'business_token cannot be nil'
      end

      if business_token.to_s.length > 36
        fail ArgumentError, 'invalid value for "business_token", the character length must be smaller than or equal to 36.'
      end

      if business_token.to_s.length < 36
        fail ArgumentError, 'invalid value for "business_token", the character length must be great than or equal to 36.'
      end

      @business_token = business_token
    end

    # Custom attribute writer method with validation
    # @param [Object] state Value to be assigned
    def state=(state)
      if state.nil?
        fail ArgumentError, 'state cannot be nil'
      end

      if state.to_s.length > 10
        fail ArgumentError, 'invalid value for "state", the character length must be smaller than or equal to 10.'
      end

      if state.to_s.length < 6
        fail ArgumentError, 'invalid value for "state", the character length must be great than or equal to 6.'
      end

      @state = state
    end

    # Custom attribute writer method with validation
    # @param [Object] type Value to be assigned
    def type=(type)
      if !type.nil? && type.to_s.length > 36
        fail ArgumentError, 'invalid value for "type", the character length must be smaller than or equal to 36.'
      end

      if !type.nil? && type.to_s.length < 7
        fail ArgumentError, 'invalid value for "type", the character length must be great than or equal to 7.'
      end

      @type = type
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          account_number == o.account_number &&
          routing_number == o.routing_number &&
          token == o.token &&
          user_token == o.user_token &&
          business_token == o.business_token &&
          state == o.state &&
          allow_immediate_credit == o.allow_immediate_credit &&
          type == o.type &&
          created_time == o.created_time &&
          last_modified_time == o.last_modified_time
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [account_number, routing_number, token, user_token, business_token, state, allow_immediate_credit, type, created_time, last_modified_time].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Marqeta.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
