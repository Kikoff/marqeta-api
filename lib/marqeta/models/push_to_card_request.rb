=begin
#Marqeta Core API

#Simplified management of your payment programs

The version of the OpenAPI document: 3.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.0.0

=end

require 'date'
require 'time'

module Marqeta
  class PushToCardRequest
    attr_accessor :address_1

    attr_accessor :address_2

    attr_accessor :city

    attr_accessor :state

    attr_accessor :zip

    attr_accessor :country

    attr_accessor :token

    attr_accessor :user_token

    attr_accessor :name_on_card

    attr_accessor :pan

    attr_accessor :cvv

    attr_accessor :exp_date

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'address_1' => :'address_1',
        :'address_2' => :'address_2',
        :'city' => :'city',
        :'state' => :'state',
        :'zip' => :'zip',
        :'country' => :'country',
        :'token' => :'token',
        :'user_token' => :'user_token',
        :'name_on_card' => :'name_on_card',
        :'pan' => :'pan',
        :'cvv' => :'cvv',
        :'exp_date' => :'exp_date'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'address_1' => :'String',
        :'address_2' => :'String',
        :'city' => :'String',
        :'state' => :'String',
        :'zip' => :'String',
        :'country' => :'String',
        :'token' => :'String',
        :'user_token' => :'String',
        :'name_on_card' => :'String',
        :'pan' => :'String',
        :'cvv' => :'String',
        :'exp_date' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Marqeta::PushToCardRequest` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Marqeta::PushToCardRequest`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'address_1')
        self.address_1 = attributes[:'address_1']
      end

      if attributes.key?(:'address_2')
        self.address_2 = attributes[:'address_2']
      end

      if attributes.key?(:'city')
        self.city = attributes[:'city']
      end

      if attributes.key?(:'state')
        self.state = attributes[:'state']
      end

      if attributes.key?(:'zip')
        self.zip = attributes[:'zip']
      end

      if attributes.key?(:'country')
        self.country = attributes[:'country']
      end

      if attributes.key?(:'token')
        self.token = attributes[:'token']
      end

      if attributes.key?(:'user_token')
        self.user_token = attributes[:'user_token']
      end

      if attributes.key?(:'name_on_card')
        self.name_on_card = attributes[:'name_on_card']
      end

      if attributes.key?(:'pan')
        self.pan = attributes[:'pan']
      end

      if attributes.key?(:'cvv')
        self.cvv = attributes[:'cvv']
      end

      if attributes.key?(:'exp_date')
        self.exp_date = attributes[:'exp_date']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @address_1.nil?
        invalid_properties.push('invalid value for "address_1", address_1 cannot be nil.')
      end

      if @address_1.to_s.length > 255
        invalid_properties.push('invalid value for "address_1", the character length must be smaller than or equal to 255.')
      end

      if @address_1.to_s.length < 1
        invalid_properties.push('invalid value for "address_1", the character length must be great than or equal to 1.')
      end

      if !@address_2.nil? && @address_2.to_s.length > 255
        invalid_properties.push('invalid value for "address_2", the character length must be smaller than or equal to 255.')
      end

      if !@address_2.nil? && @address_2.to_s.length < 1
        invalid_properties.push('invalid value for "address_2", the character length must be great than or equal to 1.')
      end

      if @city.nil?
        invalid_properties.push('invalid value for "city", city cannot be nil.')
      end

      if @city.to_s.length > 40
        invalid_properties.push('invalid value for "city", the character length must be smaller than or equal to 40.')
      end

      if @city.to_s.length < 1
        invalid_properties.push('invalid value for "city", the character length must be great than or equal to 1.')
      end

      if @state.nil?
        invalid_properties.push('invalid value for "state", state cannot be nil.')
      end

      if @state.to_s.length > 2
        invalid_properties.push('invalid value for "state", the character length must be smaller than or equal to 2.')
      end

      if @state.to_s.length < 1
        invalid_properties.push('invalid value for "state", the character length must be great than or equal to 1.')
      end

      if @zip.nil?
        invalid_properties.push('invalid value for "zip", zip cannot be nil.')
      end

      if @zip.to_s.length > 10
        invalid_properties.push('invalid value for "zip", the character length must be smaller than or equal to 10.')
      end

      if @zip.to_s.length < 1
        invalid_properties.push('invalid value for "zip", the character length must be great than or equal to 1.')
      end

      if @country.nil?
        invalid_properties.push('invalid value for "country", country cannot be nil.')
      end

      if !@token.nil? && @token.to_s.length > 36
        invalid_properties.push('invalid value for "token", the character length must be smaller than or equal to 36.')
      end

      if !@token.nil? && @token.to_s.length < 1
        invalid_properties.push('invalid value for "token", the character length must be great than or equal to 1.')
      end

      if @user_token.nil?
        invalid_properties.push('invalid value for "user_token", user_token cannot be nil.')
      end

      if @user_token.to_s.length > 36
        invalid_properties.push('invalid value for "user_token", the character length must be smaller than or equal to 36.')
      end

      if @user_token.to_s.length < 1
        invalid_properties.push('invalid value for "user_token", the character length must be great than or equal to 1.')
      end

      if !@name_on_card.nil? && @name_on_card.to_s.length > 50
        invalid_properties.push('invalid value for "name_on_card", the character length must be smaller than or equal to 50.')
      end

      if !@name_on_card.nil? && @name_on_card.to_s.length < 0
        invalid_properties.push('invalid value for "name_on_card", the character length must be great than or equal to 0.')
      end

      if @pan.nil?
        invalid_properties.push('invalid value for "pan", pan cannot be nil.')
      end

      if @cvv.nil?
        invalid_properties.push('invalid value for "cvv", cvv cannot be nil.')
      end

      if @exp_date.nil?
        invalid_properties.push('invalid value for "exp_date", exp_date cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @address_1.nil?
      return false if @address_1.to_s.length > 255
      return false if @address_1.to_s.length < 1
      return false if !@address_2.nil? && @address_2.to_s.length > 255
      return false if !@address_2.nil? && @address_2.to_s.length < 1
      return false if @city.nil?
      return false if @city.to_s.length > 40
      return false if @city.to_s.length < 1
      return false if @state.nil?
      return false if @state.to_s.length > 2
      return false if @state.to_s.length < 1
      return false if @zip.nil?
      return false if @zip.to_s.length > 10
      return false if @zip.to_s.length < 1
      return false if @country.nil?
      return false if !@token.nil? && @token.to_s.length > 36
      return false if !@token.nil? && @token.to_s.length < 1
      return false if @user_token.nil?
      return false if @user_token.to_s.length > 36
      return false if @user_token.to_s.length < 1
      return false if !@name_on_card.nil? && @name_on_card.to_s.length > 50
      return false if !@name_on_card.nil? && @name_on_card.to_s.length < 0
      return false if @pan.nil?
      return false if @cvv.nil?
      return false if @exp_date.nil?
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] address_1 Value to be assigned
    def address_1=(address_1)
      if address_1.nil?
        fail ArgumentError, 'address_1 cannot be nil'
      end

      if address_1.to_s.length > 255
        fail ArgumentError, 'invalid value for "address_1", the character length must be smaller than or equal to 255.'
      end

      if address_1.to_s.length < 1
        fail ArgumentError, 'invalid value for "address_1", the character length must be great than or equal to 1.'
      end

      @address_1 = address_1
    end

    # Custom attribute writer method with validation
    # @param [Object] address_2 Value to be assigned
    def address_2=(address_2)
      if !address_2.nil? && address_2.to_s.length > 255
        fail ArgumentError, 'invalid value for "address_2", the character length must be smaller than or equal to 255.'
      end

      if !address_2.nil? && address_2.to_s.length < 1
        fail ArgumentError, 'invalid value for "address_2", the character length must be great than or equal to 1.'
      end

      @address_2 = address_2
    end

    # Custom attribute writer method with validation
    # @param [Object] city Value to be assigned
    def city=(city)
      if city.nil?
        fail ArgumentError, 'city cannot be nil'
      end

      if city.to_s.length > 40
        fail ArgumentError, 'invalid value for "city", the character length must be smaller than or equal to 40.'
      end

      if city.to_s.length < 1
        fail ArgumentError, 'invalid value for "city", the character length must be great than or equal to 1.'
      end

      @city = city
    end

    # Custom attribute writer method with validation
    # @param [Object] state Value to be assigned
    def state=(state)
      if state.nil?
        fail ArgumentError, 'state cannot be nil'
      end

      if state.to_s.length > 2
        fail ArgumentError, 'invalid value for "state", the character length must be smaller than or equal to 2.'
      end

      if state.to_s.length < 1
        fail ArgumentError, 'invalid value for "state", the character length must be great than or equal to 1.'
      end

      @state = state
    end

    # Custom attribute writer method with validation
    # @param [Object] zip Value to be assigned
    def zip=(zip)
      if zip.nil?
        fail ArgumentError, 'zip cannot be nil'
      end

      if zip.to_s.length > 10
        fail ArgumentError, 'invalid value for "zip", the character length must be smaller than or equal to 10.'
      end

      if zip.to_s.length < 1
        fail ArgumentError, 'invalid value for "zip", the character length must be great than or equal to 1.'
      end

      @zip = zip
    end

    # Custom attribute writer method with validation
    # @param [Object] token Value to be assigned
    def token=(token)
      if !token.nil? && token.to_s.length > 36
        fail ArgumentError, 'invalid value for "token", the character length must be smaller than or equal to 36.'
      end

      if !token.nil? && token.to_s.length < 1
        fail ArgumentError, 'invalid value for "token", the character length must be great than or equal to 1.'
      end

      @token = token
    end

    # Custom attribute writer method with validation
    # @param [Object] user_token Value to be assigned
    def user_token=(user_token)
      if user_token.nil?
        fail ArgumentError, 'user_token cannot be nil'
      end

      if user_token.to_s.length > 36
        fail ArgumentError, 'invalid value for "user_token", the character length must be smaller than or equal to 36.'
      end

      if user_token.to_s.length < 1
        fail ArgumentError, 'invalid value for "user_token", the character length must be great than or equal to 1.'
      end

      @user_token = user_token
    end

    # Custom attribute writer method with validation
    # @param [Object] name_on_card Value to be assigned
    def name_on_card=(name_on_card)
      if !name_on_card.nil? && name_on_card.to_s.length > 50
        fail ArgumentError, 'invalid value for "name_on_card", the character length must be smaller than or equal to 50.'
      end

      if !name_on_card.nil? && name_on_card.to_s.length < 0
        fail ArgumentError, 'invalid value for "name_on_card", the character length must be great than or equal to 0.'
      end

      @name_on_card = name_on_card
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          address_1 == o.address_1 &&
          address_2 == o.address_2 &&
          city == o.city &&
          state == o.state &&
          zip == o.zip &&
          country == o.country &&
          token == o.token &&
          user_token == o.user_token &&
          name_on_card == o.name_on_card &&
          pan == o.pan &&
          cvv == o.cvv &&
          exp_date == o.exp_date
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [address_1, address_2, city, state, zip, country, token, user_token, name_on_card, pan, cvv, exp_date].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Marqeta.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
