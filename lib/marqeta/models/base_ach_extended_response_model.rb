=begin
#Marqeta Core API

#Simplified management of your payment programs

The version of the OpenAPI document: 3.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.0.0

=end

require 'date'
require 'time'

module Marqeta
  class BaseAchExtendedResponseModel
    # yyyy-MM-ddTHH:mm:ssZ
    attr_accessor :created_time

    # yyyy-MM-ddTHH:mm:ssZ
    attr_accessor :last_modified_time

    attr_accessor :token

    attr_accessor :account_suffix

    attr_accessor :verification_status

    attr_accessor :account_type

    attr_accessor :name_on_account

    attr_accessor :bank_name

    attr_accessor :active

    attr_accessor :date_sent_for_verification

    attr_accessor :is_default_account

    attr_accessor :date_verified

    attr_accessor :verification_override

    attr_accessor :verification_notes

    attr_accessor :routing_number

    attr_accessor :account_number

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'created_time' => :'created_time',
        :'last_modified_time' => :'last_modified_time',
        :'token' => :'token',
        :'account_suffix' => :'account_suffix',
        :'verification_status' => :'verification_status',
        :'account_type' => :'account_type',
        :'name_on_account' => :'name_on_account',
        :'bank_name' => :'bank_name',
        :'active' => :'active',
        :'date_sent_for_verification' => :'date_sent_for_verification',
        :'is_default_account' => :'is_default_account',
        :'date_verified' => :'date_verified',
        :'verification_override' => :'verification_override',
        :'verification_notes' => :'verification_notes',
        :'routing_number' => :'routing_number',
        :'account_number' => :'account_number'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'created_time' => :'Time',
        :'last_modified_time' => :'Time',
        :'token' => :'String',
        :'account_suffix' => :'String',
        :'verification_status' => :'String',
        :'account_type' => :'String',
        :'name_on_account' => :'String',
        :'bank_name' => :'String',
        :'active' => :'Boolean',
        :'date_sent_for_verification' => :'Time',
        :'is_default_account' => :'Boolean',
        :'date_verified' => :'Time',
        :'verification_override' => :'Boolean',
        :'verification_notes' => :'String',
        :'routing_number' => :'String',
        :'account_number' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Marqeta::BaseAchExtendedResponseModel` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Marqeta::BaseAchExtendedResponseModel`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'created_time')
        self.created_time = attributes[:'created_time']
      end

      if attributes.key?(:'last_modified_time')
        self.last_modified_time = attributes[:'last_modified_time']
      end

      if attributes.key?(:'token')
        self.token = attributes[:'token']
      end

      if attributes.key?(:'account_suffix')
        self.account_suffix = attributes[:'account_suffix']
      end

      if attributes.key?(:'verification_status')
        self.verification_status = attributes[:'verification_status']
      end

      if attributes.key?(:'account_type')
        self.account_type = attributes[:'account_type']
      end

      if attributes.key?(:'name_on_account')
        self.name_on_account = attributes[:'name_on_account']
      end

      if attributes.key?(:'bank_name')
        self.bank_name = attributes[:'bank_name']
      end

      if attributes.key?(:'active')
        self.active = attributes[:'active']
      else
        self.active = false
      end

      if attributes.key?(:'date_sent_for_verification')
        self.date_sent_for_verification = attributes[:'date_sent_for_verification']
      end

      if attributes.key?(:'is_default_account')
        self.is_default_account = attributes[:'is_default_account']
      else
        self.is_default_account = false
      end

      if attributes.key?(:'date_verified')
        self.date_verified = attributes[:'date_verified']
      end

      if attributes.key?(:'verification_override')
        self.verification_override = attributes[:'verification_override']
      else
        self.verification_override = false
      end

      if attributes.key?(:'verification_notes')
        self.verification_notes = attributes[:'verification_notes']
      end

      if attributes.key?(:'routing_number')
        self.routing_number = attributes[:'routing_number']
      end

      if attributes.key?(:'account_number')
        self.account_number = attributes[:'account_number']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @created_time.nil?
        invalid_properties.push('invalid value for "created_time", created_time cannot be nil.')
      end

      if @last_modified_time.nil?
        invalid_properties.push('invalid value for "last_modified_time", last_modified_time cannot be nil.')
      end

      if @token.nil?
        invalid_properties.push('invalid value for "token", token cannot be nil.')
      end

      if @account_suffix.nil?
        invalid_properties.push('invalid value for "account_suffix", account_suffix cannot be nil.')
      end

      if @account_type.nil?
        invalid_properties.push('invalid value for "account_type", account_type cannot be nil.')
      end

      if @name_on_account.nil?
        invalid_properties.push('invalid value for "name_on_account", name_on_account cannot be nil.')
      end

      if @active.nil?
        invalid_properties.push('invalid value for "active", active cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @created_time.nil?
      return false if @last_modified_time.nil?
      return false if @token.nil?
      return false if @account_suffix.nil?
      return false if @account_type.nil?
      return false if @name_on_account.nil?
      return false if @active.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          created_time == o.created_time &&
          last_modified_time == o.last_modified_time &&
          token == o.token &&
          account_suffix == o.account_suffix &&
          verification_status == o.verification_status &&
          account_type == o.account_type &&
          name_on_account == o.name_on_account &&
          bank_name == o.bank_name &&
          active == o.active &&
          date_sent_for_verification == o.date_sent_for_verification &&
          is_default_account == o.is_default_account &&
          date_verified == o.date_verified &&
          verification_override == o.verification_override &&
          verification_notes == o.verification_notes &&
          routing_number == o.routing_number &&
          account_number == o.account_number
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [created_time, last_modified_time, token, account_suffix, verification_status, account_type, name_on_account, bank_name, active, date_sent_for_verification, is_default_account, date_verified, verification_override, verification_notes, routing_number, account_number].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Marqeta.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
