=begin
#Marqeta Core API

#Simplified management of your payment programs

The version of the OpenAPI document: 3.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.0.0

=end

require 'date'
require 'time'

module Marqeta
  class PrimaryContactInfoModel
    attr_accessor :full_name

    attr_accessor :title

    attr_accessor :department

    attr_accessor :phone

    attr_accessor :extension

    attr_accessor :fax

    attr_accessor :mobile

    attr_accessor :email

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'full_name' => :'full_name',
        :'title' => :'title',
        :'department' => :'department',
        :'phone' => :'phone',
        :'extension' => :'extension',
        :'fax' => :'fax',
        :'mobile' => :'mobile',
        :'email' => :'email'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'full_name' => :'String',
        :'title' => :'String',
        :'department' => :'String',
        :'phone' => :'String',
        :'extension' => :'String',
        :'fax' => :'String',
        :'mobile' => :'String',
        :'email' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Marqeta::PrimaryContactInfoModel` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Marqeta::PrimaryContactInfoModel`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'full_name')
        self.full_name = attributes[:'full_name']
      end

      if attributes.key?(:'title')
        self.title = attributes[:'title']
      end

      if attributes.key?(:'department')
        self.department = attributes[:'department']
      end

      if attributes.key?(:'phone')
        self.phone = attributes[:'phone']
      end

      if attributes.key?(:'extension')
        self.extension = attributes[:'extension']
      end

      if attributes.key?(:'fax')
        self.fax = attributes[:'fax']
      end

      if attributes.key?(:'mobile')
        self.mobile = attributes[:'mobile']
      end

      if attributes.key?(:'email')
        self.email = attributes[:'email']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if !@full_name.nil? && @full_name.to_s.length > 255
        invalid_properties.push('invalid value for "full_name", the character length must be smaller than or equal to 255.')
      end

      if !@full_name.nil? && @full_name.to_s.length < 0
        invalid_properties.push('invalid value for "full_name", the character length must be great than or equal to 0.')
      end

      if !@title.nil? && @title.to_s.length > 255
        invalid_properties.push('invalid value for "title", the character length must be smaller than or equal to 255.')
      end

      if !@title.nil? && @title.to_s.length < 0
        invalid_properties.push('invalid value for "title", the character length must be great than or equal to 0.')
      end

      if !@department.nil? && @department.to_s.length > 255
        invalid_properties.push('invalid value for "department", the character length must be smaller than or equal to 255.')
      end

      if !@department.nil? && @department.to_s.length < 0
        invalid_properties.push('invalid value for "department", the character length must be great than or equal to 0.')
      end

      if !@phone.nil? && @phone.to_s.length > 255
        invalid_properties.push('invalid value for "phone", the character length must be smaller than or equal to 255.')
      end

      if !@phone.nil? && @phone.to_s.length < 0
        invalid_properties.push('invalid value for "phone", the character length must be great than or equal to 0.')
      end

      if !@extension.nil? && @extension.to_s.length > 255
        invalid_properties.push('invalid value for "extension", the character length must be smaller than or equal to 255.')
      end

      if !@extension.nil? && @extension.to_s.length < 0
        invalid_properties.push('invalid value for "extension", the character length must be great than or equal to 0.')
      end

      if !@fax.nil? && @fax.to_s.length > 255
        invalid_properties.push('invalid value for "fax", the character length must be smaller than or equal to 255.')
      end

      if !@fax.nil? && @fax.to_s.length < 0
        invalid_properties.push('invalid value for "fax", the character length must be great than or equal to 0.')
      end

      if !@mobile.nil? && @mobile.to_s.length > 255
        invalid_properties.push('invalid value for "mobile", the character length must be smaller than or equal to 255.')
      end

      if !@mobile.nil? && @mobile.to_s.length < 0
        invalid_properties.push('invalid value for "mobile", the character length must be great than or equal to 0.')
      end

      if !@email.nil? && @email.to_s.length > 255
        invalid_properties.push('invalid value for "email", the character length must be smaller than or equal to 255.')
      end

      if !@email.nil? && @email.to_s.length < 0
        invalid_properties.push('invalid value for "email", the character length must be great than or equal to 0.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if !@full_name.nil? && @full_name.to_s.length > 255
      return false if !@full_name.nil? && @full_name.to_s.length < 0
      return false if !@title.nil? && @title.to_s.length > 255
      return false if !@title.nil? && @title.to_s.length < 0
      return false if !@department.nil? && @department.to_s.length > 255
      return false if !@department.nil? && @department.to_s.length < 0
      return false if !@phone.nil? && @phone.to_s.length > 255
      return false if !@phone.nil? && @phone.to_s.length < 0
      return false if !@extension.nil? && @extension.to_s.length > 255
      return false if !@extension.nil? && @extension.to_s.length < 0
      return false if !@fax.nil? && @fax.to_s.length > 255
      return false if !@fax.nil? && @fax.to_s.length < 0
      return false if !@mobile.nil? && @mobile.to_s.length > 255
      return false if !@mobile.nil? && @mobile.to_s.length < 0
      return false if !@email.nil? && @email.to_s.length > 255
      return false if !@email.nil? && @email.to_s.length < 0
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] full_name Value to be assigned
    def full_name=(full_name)
      if !full_name.nil? && full_name.to_s.length > 255
        fail ArgumentError, 'invalid value for "full_name", the character length must be smaller than or equal to 255.'
      end

      if !full_name.nil? && full_name.to_s.length < 0
        fail ArgumentError, 'invalid value for "full_name", the character length must be great than or equal to 0.'
      end

      @full_name = full_name
    end

    # Custom attribute writer method with validation
    # @param [Object] title Value to be assigned
    def title=(title)
      if !title.nil? && title.to_s.length > 255
        fail ArgumentError, 'invalid value for "title", the character length must be smaller than or equal to 255.'
      end

      if !title.nil? && title.to_s.length < 0
        fail ArgumentError, 'invalid value for "title", the character length must be great than or equal to 0.'
      end

      @title = title
    end

    # Custom attribute writer method with validation
    # @param [Object] department Value to be assigned
    def department=(department)
      if !department.nil? && department.to_s.length > 255
        fail ArgumentError, 'invalid value for "department", the character length must be smaller than or equal to 255.'
      end

      if !department.nil? && department.to_s.length < 0
        fail ArgumentError, 'invalid value for "department", the character length must be great than or equal to 0.'
      end

      @department = department
    end

    # Custom attribute writer method with validation
    # @param [Object] phone Value to be assigned
    def phone=(phone)
      if !phone.nil? && phone.to_s.length > 255
        fail ArgumentError, 'invalid value for "phone", the character length must be smaller than or equal to 255.'
      end

      if !phone.nil? && phone.to_s.length < 0
        fail ArgumentError, 'invalid value for "phone", the character length must be great than or equal to 0.'
      end

      @phone = phone
    end

    # Custom attribute writer method with validation
    # @param [Object] extension Value to be assigned
    def extension=(extension)
      if !extension.nil? && extension.to_s.length > 255
        fail ArgumentError, 'invalid value for "extension", the character length must be smaller than or equal to 255.'
      end

      if !extension.nil? && extension.to_s.length < 0
        fail ArgumentError, 'invalid value for "extension", the character length must be great than or equal to 0.'
      end

      @extension = extension
    end

    # Custom attribute writer method with validation
    # @param [Object] fax Value to be assigned
    def fax=(fax)
      if !fax.nil? && fax.to_s.length > 255
        fail ArgumentError, 'invalid value for "fax", the character length must be smaller than or equal to 255.'
      end

      if !fax.nil? && fax.to_s.length < 0
        fail ArgumentError, 'invalid value for "fax", the character length must be great than or equal to 0.'
      end

      @fax = fax
    end

    # Custom attribute writer method with validation
    # @param [Object] mobile Value to be assigned
    def mobile=(mobile)
      if !mobile.nil? && mobile.to_s.length > 255
        fail ArgumentError, 'invalid value for "mobile", the character length must be smaller than or equal to 255.'
      end

      if !mobile.nil? && mobile.to_s.length < 0
        fail ArgumentError, 'invalid value for "mobile", the character length must be great than or equal to 0.'
      end

      @mobile = mobile
    end

    # Custom attribute writer method with validation
    # @param [Object] email Value to be assigned
    def email=(email)
      if !email.nil? && email.to_s.length > 255
        fail ArgumentError, 'invalid value for "email", the character length must be smaller than or equal to 255.'
      end

      if !email.nil? && email.to_s.length < 0
        fail ArgumentError, 'invalid value for "email", the character length must be great than or equal to 0.'
      end

      @email = email
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          full_name == o.full_name &&
          title == o.title &&
          department == o.department &&
          phone == o.phone &&
          extension == o.extension &&
          fax == o.fax &&
          mobile == o.mobile &&
          email == o.email
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [full_name, title, department, phone, extension, fax, mobile, email].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Marqeta.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
