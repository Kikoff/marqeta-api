=begin
#Marqeta Core API

#Simplified management of your payment programs

The version of the OpenAPI document: 3.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.0.0

=end

require 'date'
require 'time'

module Marqeta
  class BusinessCardHolderResponse
    attr_accessor :token

    # default = true
    attr_accessor :active

    attr_accessor :notes

    attr_accessor :ip_address

    # Strong password required
    attr_accessor :password

    attr_accessor :phone

    attr_accessor :metadata

    attr_accessor :account_holder_group_token

    attr_accessor :authentication

    # yyyy-MM-ddTHH:mm:ssZ
    attr_accessor :created_time

    # yyyy-MM-ddTHH:mm:ssZ
    attr_accessor :last_modified_time

    attr_accessor :status

    attr_accessor :business_name_legal

    attr_accessor :business_name_dba

    attr_accessor :office_location

    attr_accessor :in_current_location_since

    attr_accessor :website

    attr_accessor :date_established

    attr_accessor :general_business_description

    attr_accessor :history

    attr_accessor :business_type

    attr_accessor :international_office_locations

    attr_accessor :taxpayer_id

    attr_accessor :duns_number

    attr_accessor :primary_contact

    attr_accessor :incorporation

    attr_accessor :proprietor_or_officer

    attr_accessor :identifications

    attr_accessor :attester_name

    attr_accessor :attestation_consent

    attr_accessor :attester_title

    attr_accessor :attestation_date

    attr_accessor :proprietor_is_beneficial_owner

    attr_accessor :beneficial_owner1

    attr_accessor :beneficial_owner2

    attr_accessor :beneficial_owner3

    attr_accessor :beneficial_owner4

    attr_accessor :deposit_account

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'token' => :'token',
        :'active' => :'active',
        :'notes' => :'notes',
        :'ip_address' => :'ip_address',
        :'password' => :'password',
        :'phone' => :'phone',
        :'metadata' => :'metadata',
        :'account_holder_group_token' => :'account_holder_group_token',
        :'authentication' => :'authentication',
        :'created_time' => :'created_time',
        :'last_modified_time' => :'last_modified_time',
        :'status' => :'status',
        :'business_name_legal' => :'business_name_legal',
        :'business_name_dba' => :'business_name_dba',
        :'office_location' => :'office_location',
        :'in_current_location_since' => :'in_current_location_since',
        :'website' => :'website',
        :'date_established' => :'date_established',
        :'general_business_description' => :'general_business_description',
        :'history' => :'history',
        :'business_type' => :'business_type',
        :'international_office_locations' => :'international_office_locations',
        :'taxpayer_id' => :'taxpayer_id',
        :'duns_number' => :'duns_number',
        :'primary_contact' => :'primary_contact',
        :'incorporation' => :'incorporation',
        :'proprietor_or_officer' => :'proprietor_or_officer',
        :'identifications' => :'identifications',
        :'attester_name' => :'attester_name',
        :'attestation_consent' => :'attestation_consent',
        :'attester_title' => :'attester_title',
        :'attestation_date' => :'attestation_date',
        :'proprietor_is_beneficial_owner' => :'proprietor_is_beneficial_owner',
        :'beneficial_owner1' => :'beneficial_owner1',
        :'beneficial_owner2' => :'beneficial_owner2',
        :'beneficial_owner3' => :'beneficial_owner3',
        :'beneficial_owner4' => :'beneficial_owner4',
        :'deposit_account' => :'deposit_account'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'token' => :'String',
        :'active' => :'Boolean',
        :'notes' => :'String',
        :'ip_address' => :'String',
        :'password' => :'String',
        :'phone' => :'String',
        :'metadata' => :'Hash<String, String>',
        :'account_holder_group_token' => :'String',
        :'authentication' => :'Authentication',
        :'created_time' => :'Time',
        :'last_modified_time' => :'Time',
        :'status' => :'String',
        :'business_name_legal' => :'String',
        :'business_name_dba' => :'String',
        :'office_location' => :'AddressResponseModel',
        :'in_current_location_since' => :'Time',
        :'website' => :'String',
        :'date_established' => :'Time',
        :'general_business_description' => :'String',
        :'history' => :'String',
        :'business_type' => :'String',
        :'international_office_locations' => :'String',
        :'taxpayer_id' => :'String',
        :'duns_number' => :'String',
        :'primary_contact' => :'PrimaryContactInfoModel',
        :'incorporation' => :'BusinessIncorporationResponse',
        :'proprietor_or_officer' => :'BusinessProprietorResponse',
        :'identifications' => :'Array<IdentificationResponseModel>',
        :'attester_name' => :'String',
        :'attestation_consent' => :'Boolean',
        :'attester_title' => :'String',
        :'attestation_date' => :'Time',
        :'proprietor_is_beneficial_owner' => :'Boolean',
        :'beneficial_owner1' => :'BeneficialOwnerResponse',
        :'beneficial_owner2' => :'BeneficialOwnerResponse',
        :'beneficial_owner3' => :'BeneficialOwnerResponse',
        :'beneficial_owner4' => :'BeneficialOwnerResponse',
        :'deposit_account' => :'DepositAccount'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Marqeta::BusinessCardHolderResponse` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Marqeta::BusinessCardHolderResponse`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'token')
        self.token = attributes[:'token']
      end

      if attributes.key?(:'active')
        self.active = attributes[:'active']
      else
        self.active = false
      end

      if attributes.key?(:'notes')
        self.notes = attributes[:'notes']
      end

      if attributes.key?(:'ip_address')
        self.ip_address = attributes[:'ip_address']
      end

      if attributes.key?(:'password')
        self.password = attributes[:'password']
      end

      if attributes.key?(:'phone')
        self.phone = attributes[:'phone']
      end

      if attributes.key?(:'metadata')
        if (value = attributes[:'metadata']).is_a?(Hash)
          self.metadata = value
        end
      end

      if attributes.key?(:'account_holder_group_token')
        self.account_holder_group_token = attributes[:'account_holder_group_token']
      end

      if attributes.key?(:'authentication')
        self.authentication = attributes[:'authentication']
      end

      if attributes.key?(:'created_time')
        self.created_time = attributes[:'created_time']
      end

      if attributes.key?(:'last_modified_time')
        self.last_modified_time = attributes[:'last_modified_time']
      end

      if attributes.key?(:'status')
        self.status = attributes[:'status']
      end

      if attributes.key?(:'business_name_legal')
        self.business_name_legal = attributes[:'business_name_legal']
      end

      if attributes.key?(:'business_name_dba')
        self.business_name_dba = attributes[:'business_name_dba']
      end

      if attributes.key?(:'office_location')
        self.office_location = attributes[:'office_location']
      end

      if attributes.key?(:'in_current_location_since')
        self.in_current_location_since = attributes[:'in_current_location_since']
      end

      if attributes.key?(:'website')
        self.website = attributes[:'website']
      end

      if attributes.key?(:'date_established')
        self.date_established = attributes[:'date_established']
      end

      if attributes.key?(:'general_business_description')
        self.general_business_description = attributes[:'general_business_description']
      end

      if attributes.key?(:'history')
        self.history = attributes[:'history']
      end

      if attributes.key?(:'business_type')
        self.business_type = attributes[:'business_type']
      end

      if attributes.key?(:'international_office_locations')
        self.international_office_locations = attributes[:'international_office_locations']
      end

      if attributes.key?(:'taxpayer_id')
        self.taxpayer_id = attributes[:'taxpayer_id']
      end

      if attributes.key?(:'duns_number')
        self.duns_number = attributes[:'duns_number']
      end

      if attributes.key?(:'primary_contact')
        self.primary_contact = attributes[:'primary_contact']
      end

      if attributes.key?(:'incorporation')
        self.incorporation = attributes[:'incorporation']
      end

      if attributes.key?(:'proprietor_or_officer')
        self.proprietor_or_officer = attributes[:'proprietor_or_officer']
      end

      if attributes.key?(:'identifications')
        if (value = attributes[:'identifications']).is_a?(Array)
          self.identifications = value
        end
      end

      if attributes.key?(:'attester_name')
        self.attester_name = attributes[:'attester_name']
      end

      if attributes.key?(:'attestation_consent')
        self.attestation_consent = attributes[:'attestation_consent']
      else
        self.attestation_consent = false
      end

      if attributes.key?(:'attester_title')
        self.attester_title = attributes[:'attester_title']
      end

      if attributes.key?(:'attestation_date')
        self.attestation_date = attributes[:'attestation_date']
      end

      if attributes.key?(:'proprietor_is_beneficial_owner')
        self.proprietor_is_beneficial_owner = attributes[:'proprietor_is_beneficial_owner']
      else
        self.proprietor_is_beneficial_owner = false
      end

      if attributes.key?(:'beneficial_owner1')
        self.beneficial_owner1 = attributes[:'beneficial_owner1']
      end

      if attributes.key?(:'beneficial_owner2')
        self.beneficial_owner2 = attributes[:'beneficial_owner2']
      end

      if attributes.key?(:'beneficial_owner3')
        self.beneficial_owner3 = attributes[:'beneficial_owner3']
      end

      if attributes.key?(:'beneficial_owner4')
        self.beneficial_owner4 = attributes[:'beneficial_owner4']
      end

      if attributes.key?(:'deposit_account')
        self.deposit_account = attributes[:'deposit_account']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if !@token.nil? && @token.to_s.length > 36
        invalid_properties.push('invalid value for "token", the character length must be smaller than or equal to 36.')
      end

      if !@token.nil? && @token.to_s.length < 1
        invalid_properties.push('invalid value for "token", the character length must be great than or equal to 1.')
      end

      if !@notes.nil? && @notes.to_s.length > 255
        invalid_properties.push('invalid value for "notes", the character length must be smaller than or equal to 255.')
      end

      if !@notes.nil? && @notes.to_s.length < 0
        invalid_properties.push('invalid value for "notes", the character length must be great than or equal to 0.')
      end

      if !@ip_address.nil? && @ip_address.to_s.length > 39
        invalid_properties.push('invalid value for "ip_address", the character length must be smaller than or equal to 39.')
      end

      if !@ip_address.nil? && @ip_address.to_s.length < 0
        invalid_properties.push('invalid value for "ip_address", the character length must be great than or equal to 0.')
      end

      if !@password.nil? && @password.to_s.length > 255
        invalid_properties.push('invalid value for "password", the character length must be smaller than or equal to 255.')
      end

      if !@password.nil? && @password.to_s.length < 1
        invalid_properties.push('invalid value for "password", the character length must be great than or equal to 1.')
      end

      if !@phone.nil? && @phone.to_s.length > 255
        invalid_properties.push('invalid value for "phone", the character length must be smaller than or equal to 255.')
      end

      if !@phone.nil? && @phone.to_s.length < 0
        invalid_properties.push('invalid value for "phone", the character length must be great than or equal to 0.')
      end

      if !@account_holder_group_token.nil? && @account_holder_group_token.to_s.length > 36
        invalid_properties.push('invalid value for "account_holder_group_token", the character length must be smaller than or equal to 36.')
      end

      if !@account_holder_group_token.nil? && @account_holder_group_token.to_s.length < 0
        invalid_properties.push('invalid value for "account_holder_group_token", the character length must be great than or equal to 0.')
      end

      if @created_time.nil?
        invalid_properties.push('invalid value for "created_time", created_time cannot be nil.')
      end

      if @last_modified_time.nil?
        invalid_properties.push('invalid value for "last_modified_time", last_modified_time cannot be nil.')
      end

      if !@business_name_legal.nil? && @business_name_legal.to_s.length > 255
        invalid_properties.push('invalid value for "business_name_legal", the character length must be smaller than or equal to 255.')
      end

      if !@business_name_legal.nil? && @business_name_legal.to_s.length < 0
        invalid_properties.push('invalid value for "business_name_legal", the character length must be great than or equal to 0.')
      end

      if !@business_name_dba.nil? && @business_name_dba.to_s.length > 255
        invalid_properties.push('invalid value for "business_name_dba", the character length must be smaller than or equal to 255.')
      end

      if !@business_name_dba.nil? && @business_name_dba.to_s.length < 0
        invalid_properties.push('invalid value for "business_name_dba", the character length must be great than or equal to 0.')
      end

      if !@website.nil? && @website.to_s.length > 255
        invalid_properties.push('invalid value for "website", the character length must be smaller than or equal to 255.')
      end

      if !@website.nil? && @website.to_s.length < 0
        invalid_properties.push('invalid value for "website", the character length must be great than or equal to 0.')
      end

      if !@general_business_description.nil? && @general_business_description.to_s.length > 255
        invalid_properties.push('invalid value for "general_business_description", the character length must be smaller than or equal to 255.')
      end

      if !@general_business_description.nil? && @general_business_description.to_s.length < 0
        invalid_properties.push('invalid value for "general_business_description", the character length must be great than or equal to 0.')
      end

      if !@history.nil? && @history.to_s.length > 255
        invalid_properties.push('invalid value for "history", the character length must be smaller than or equal to 255.')
      end

      if !@history.nil? && @history.to_s.length < 0
        invalid_properties.push('invalid value for "history", the character length must be great than or equal to 0.')
      end

      if !@business_type.nil? && @business_type.to_s.length > 255
        invalid_properties.push('invalid value for "business_type", the character length must be smaller than or equal to 255.')
      end

      if !@business_type.nil? && @business_type.to_s.length < 0
        invalid_properties.push('invalid value for "business_type", the character length must be great than or equal to 0.')
      end

      if !@international_office_locations.nil? && @international_office_locations.to_s.length > 255
        invalid_properties.push('invalid value for "international_office_locations", the character length must be smaller than or equal to 255.')
      end

      if !@international_office_locations.nil? && @international_office_locations.to_s.length < 0
        invalid_properties.push('invalid value for "international_office_locations", the character length must be great than or equal to 0.')
      end

      if !@taxpayer_id.nil? && @taxpayer_id.to_s.length > 255
        invalid_properties.push('invalid value for "taxpayer_id", the character length must be smaller than or equal to 255.')
      end

      if !@taxpayer_id.nil? && @taxpayer_id.to_s.length < 0
        invalid_properties.push('invalid value for "taxpayer_id", the character length must be great than or equal to 0.')
      end

      if !@duns_number.nil? && @duns_number.to_s.length > 255
        invalid_properties.push('invalid value for "duns_number", the character length must be smaller than or equal to 255.')
      end

      if !@duns_number.nil? && @duns_number.to_s.length < 0
        invalid_properties.push('invalid value for "duns_number", the character length must be great than or equal to 0.')
      end

      if !@attester_name.nil? && @attester_name.to_s.length > 64
        invalid_properties.push('invalid value for "attester_name", the character length must be smaller than or equal to 64.')
      end

      if !@attester_name.nil? && @attester_name.to_s.length < 0
        invalid_properties.push('invalid value for "attester_name", the character length must be great than or equal to 0.')
      end

      if !@attester_title.nil? && @attester_title.to_s.length > 64
        invalid_properties.push('invalid value for "attester_title", the character length must be smaller than or equal to 64.')
      end

      if !@attester_title.nil? && @attester_title.to_s.length < 0
        invalid_properties.push('invalid value for "attester_title", the character length must be great than or equal to 0.')
      end

      if @deposit_account.nil?
        invalid_properties.push('invalid value for "deposit_account", deposit_account cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if !@token.nil? && @token.to_s.length > 36
      return false if !@token.nil? && @token.to_s.length < 1
      return false if !@notes.nil? && @notes.to_s.length > 255
      return false if !@notes.nil? && @notes.to_s.length < 0
      return false if !@ip_address.nil? && @ip_address.to_s.length > 39
      return false if !@ip_address.nil? && @ip_address.to_s.length < 0
      return false if !@password.nil? && @password.to_s.length > 255
      return false if !@password.nil? && @password.to_s.length < 1
      return false if !@phone.nil? && @phone.to_s.length > 255
      return false if !@phone.nil? && @phone.to_s.length < 0
      return false if !@account_holder_group_token.nil? && @account_holder_group_token.to_s.length > 36
      return false if !@account_holder_group_token.nil? && @account_holder_group_token.to_s.length < 0
      return false if @created_time.nil?
      return false if @last_modified_time.nil?
      status_validator = EnumAttributeValidator.new('String', ["UNVERIFIED", "LIMITED", "ACTIVE", "SUSPENDED", "CLOSED"])
      return false unless status_validator.valid?(@status)
      return false if !@business_name_legal.nil? && @business_name_legal.to_s.length > 255
      return false if !@business_name_legal.nil? && @business_name_legal.to_s.length < 0
      return false if !@business_name_dba.nil? && @business_name_dba.to_s.length > 255
      return false if !@business_name_dba.nil? && @business_name_dba.to_s.length < 0
      return false if !@website.nil? && @website.to_s.length > 255
      return false if !@website.nil? && @website.to_s.length < 0
      return false if !@general_business_description.nil? && @general_business_description.to_s.length > 255
      return false if !@general_business_description.nil? && @general_business_description.to_s.length < 0
      return false if !@history.nil? && @history.to_s.length > 255
      return false if !@history.nil? && @history.to_s.length < 0
      return false if !@business_type.nil? && @business_type.to_s.length > 255
      return false if !@business_type.nil? && @business_type.to_s.length < 0
      return false if !@international_office_locations.nil? && @international_office_locations.to_s.length > 255
      return false if !@international_office_locations.nil? && @international_office_locations.to_s.length < 0
      return false if !@taxpayer_id.nil? && @taxpayer_id.to_s.length > 255
      return false if !@taxpayer_id.nil? && @taxpayer_id.to_s.length < 0
      return false if !@duns_number.nil? && @duns_number.to_s.length > 255
      return false if !@duns_number.nil? && @duns_number.to_s.length < 0
      return false if !@attester_name.nil? && @attester_name.to_s.length > 64
      return false if !@attester_name.nil? && @attester_name.to_s.length < 0
      return false if !@attester_title.nil? && @attester_title.to_s.length > 64
      return false if !@attester_title.nil? && @attester_title.to_s.length < 0
      return false if @deposit_account.nil?
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] token Value to be assigned
    def token=(token)
      if !token.nil? && token.to_s.length > 36
        fail ArgumentError, 'invalid value for "token", the character length must be smaller than or equal to 36.'
      end

      if !token.nil? && token.to_s.length < 1
        fail ArgumentError, 'invalid value for "token", the character length must be great than or equal to 1.'
      end

      @token = token
    end

    # Custom attribute writer method with validation
    # @param [Object] notes Value to be assigned
    def notes=(notes)
      if !notes.nil? && notes.to_s.length > 255
        fail ArgumentError, 'invalid value for "notes", the character length must be smaller than or equal to 255.'
      end

      if !notes.nil? && notes.to_s.length < 0
        fail ArgumentError, 'invalid value for "notes", the character length must be great than or equal to 0.'
      end

      @notes = notes
    end

    # Custom attribute writer method with validation
    # @param [Object] ip_address Value to be assigned
    def ip_address=(ip_address)
      if !ip_address.nil? && ip_address.to_s.length > 39
        fail ArgumentError, 'invalid value for "ip_address", the character length must be smaller than or equal to 39.'
      end

      if !ip_address.nil? && ip_address.to_s.length < 0
        fail ArgumentError, 'invalid value for "ip_address", the character length must be great than or equal to 0.'
      end

      @ip_address = ip_address
    end

    # Custom attribute writer method with validation
    # @param [Object] password Value to be assigned
    def password=(password)
      if !password.nil? && password.to_s.length > 255
        fail ArgumentError, 'invalid value for "password", the character length must be smaller than or equal to 255.'
      end

      if !password.nil? && password.to_s.length < 1
        fail ArgumentError, 'invalid value for "password", the character length must be great than or equal to 1.'
      end

      @password = password
    end

    # Custom attribute writer method with validation
    # @param [Object] phone Value to be assigned
    def phone=(phone)
      if !phone.nil? && phone.to_s.length > 255
        fail ArgumentError, 'invalid value for "phone", the character length must be smaller than or equal to 255.'
      end

      if !phone.nil? && phone.to_s.length < 0
        fail ArgumentError, 'invalid value for "phone", the character length must be great than or equal to 0.'
      end

      @phone = phone
    end

    # Custom attribute writer method with validation
    # @param [Object] account_holder_group_token Value to be assigned
    def account_holder_group_token=(account_holder_group_token)
      if !account_holder_group_token.nil? && account_holder_group_token.to_s.length > 36
        fail ArgumentError, 'invalid value for "account_holder_group_token", the character length must be smaller than or equal to 36.'
      end

      if !account_holder_group_token.nil? && account_holder_group_token.to_s.length < 0
        fail ArgumentError, 'invalid value for "account_holder_group_token", the character length must be great than or equal to 0.'
      end

      @account_holder_group_token = account_holder_group_token
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status Object to be assigned
    def status=(status)
      validator = EnumAttributeValidator.new('String', ["UNVERIFIED", "LIMITED", "ACTIVE", "SUSPENDED", "CLOSED"])
      unless validator.valid?(status)
        fail ArgumentError, "invalid value for \"status\", must be one of #{validator.allowable_values}."
      end
      @status = status
    end

    # Custom attribute writer method with validation
    # @param [Object] business_name_legal Value to be assigned
    def business_name_legal=(business_name_legal)
      if !business_name_legal.nil? && business_name_legal.to_s.length > 255
        fail ArgumentError, 'invalid value for "business_name_legal", the character length must be smaller than or equal to 255.'
      end

      if !business_name_legal.nil? && business_name_legal.to_s.length < 0
        fail ArgumentError, 'invalid value for "business_name_legal", the character length must be great than or equal to 0.'
      end

      @business_name_legal = business_name_legal
    end

    # Custom attribute writer method with validation
    # @param [Object] business_name_dba Value to be assigned
    def business_name_dba=(business_name_dba)
      if !business_name_dba.nil? && business_name_dba.to_s.length > 255
        fail ArgumentError, 'invalid value for "business_name_dba", the character length must be smaller than or equal to 255.'
      end

      if !business_name_dba.nil? && business_name_dba.to_s.length < 0
        fail ArgumentError, 'invalid value for "business_name_dba", the character length must be great than or equal to 0.'
      end

      @business_name_dba = business_name_dba
    end

    # Custom attribute writer method with validation
    # @param [Object] website Value to be assigned
    def website=(website)
      if !website.nil? && website.to_s.length > 255
        fail ArgumentError, 'invalid value for "website", the character length must be smaller than or equal to 255.'
      end

      if !website.nil? && website.to_s.length < 0
        fail ArgumentError, 'invalid value for "website", the character length must be great than or equal to 0.'
      end

      @website = website
    end

    # Custom attribute writer method with validation
    # @param [Object] general_business_description Value to be assigned
    def general_business_description=(general_business_description)
      if !general_business_description.nil? && general_business_description.to_s.length > 255
        fail ArgumentError, 'invalid value for "general_business_description", the character length must be smaller than or equal to 255.'
      end

      if !general_business_description.nil? && general_business_description.to_s.length < 0
        fail ArgumentError, 'invalid value for "general_business_description", the character length must be great than or equal to 0.'
      end

      @general_business_description = general_business_description
    end

    # Custom attribute writer method with validation
    # @param [Object] history Value to be assigned
    def history=(history)
      if !history.nil? && history.to_s.length > 255
        fail ArgumentError, 'invalid value for "history", the character length must be smaller than or equal to 255.'
      end

      if !history.nil? && history.to_s.length < 0
        fail ArgumentError, 'invalid value for "history", the character length must be great than or equal to 0.'
      end

      @history = history
    end

    # Custom attribute writer method with validation
    # @param [Object] business_type Value to be assigned
    def business_type=(business_type)
      if !business_type.nil? && business_type.to_s.length > 255
        fail ArgumentError, 'invalid value for "business_type", the character length must be smaller than or equal to 255.'
      end

      if !business_type.nil? && business_type.to_s.length < 0
        fail ArgumentError, 'invalid value for "business_type", the character length must be great than or equal to 0.'
      end

      @business_type = business_type
    end

    # Custom attribute writer method with validation
    # @param [Object] international_office_locations Value to be assigned
    def international_office_locations=(international_office_locations)
      if !international_office_locations.nil? && international_office_locations.to_s.length > 255
        fail ArgumentError, 'invalid value for "international_office_locations", the character length must be smaller than or equal to 255.'
      end

      if !international_office_locations.nil? && international_office_locations.to_s.length < 0
        fail ArgumentError, 'invalid value for "international_office_locations", the character length must be great than or equal to 0.'
      end

      @international_office_locations = international_office_locations
    end

    # Custom attribute writer method with validation
    # @param [Object] taxpayer_id Value to be assigned
    def taxpayer_id=(taxpayer_id)
      if !taxpayer_id.nil? && taxpayer_id.to_s.length > 255
        fail ArgumentError, 'invalid value for "taxpayer_id", the character length must be smaller than or equal to 255.'
      end

      if !taxpayer_id.nil? && taxpayer_id.to_s.length < 0
        fail ArgumentError, 'invalid value for "taxpayer_id", the character length must be great than or equal to 0.'
      end

      @taxpayer_id = taxpayer_id
    end

    # Custom attribute writer method with validation
    # @param [Object] duns_number Value to be assigned
    def duns_number=(duns_number)
      if !duns_number.nil? && duns_number.to_s.length > 255
        fail ArgumentError, 'invalid value for "duns_number", the character length must be smaller than or equal to 255.'
      end

      if !duns_number.nil? && duns_number.to_s.length < 0
        fail ArgumentError, 'invalid value for "duns_number", the character length must be great than or equal to 0.'
      end

      @duns_number = duns_number
    end

    # Custom attribute writer method with validation
    # @param [Object] attester_name Value to be assigned
    def attester_name=(attester_name)
      if !attester_name.nil? && attester_name.to_s.length > 64
        fail ArgumentError, 'invalid value for "attester_name", the character length must be smaller than or equal to 64.'
      end

      if !attester_name.nil? && attester_name.to_s.length < 0
        fail ArgumentError, 'invalid value for "attester_name", the character length must be great than or equal to 0.'
      end

      @attester_name = attester_name
    end

    # Custom attribute writer method with validation
    # @param [Object] attester_title Value to be assigned
    def attester_title=(attester_title)
      if !attester_title.nil? && attester_title.to_s.length > 64
        fail ArgumentError, 'invalid value for "attester_title", the character length must be smaller than or equal to 64.'
      end

      if !attester_title.nil? && attester_title.to_s.length < 0
        fail ArgumentError, 'invalid value for "attester_title", the character length must be great than or equal to 0.'
      end

      @attester_title = attester_title
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          token == o.token &&
          active == o.active &&
          notes == o.notes &&
          ip_address == o.ip_address &&
          password == o.password &&
          phone == o.phone &&
          metadata == o.metadata &&
          account_holder_group_token == o.account_holder_group_token &&
          authentication == o.authentication &&
          created_time == o.created_time &&
          last_modified_time == o.last_modified_time &&
          status == o.status &&
          business_name_legal == o.business_name_legal &&
          business_name_dba == o.business_name_dba &&
          office_location == o.office_location &&
          in_current_location_since == o.in_current_location_since &&
          website == o.website &&
          date_established == o.date_established &&
          general_business_description == o.general_business_description &&
          history == o.history &&
          business_type == o.business_type &&
          international_office_locations == o.international_office_locations &&
          taxpayer_id == o.taxpayer_id &&
          duns_number == o.duns_number &&
          primary_contact == o.primary_contact &&
          incorporation == o.incorporation &&
          proprietor_or_officer == o.proprietor_or_officer &&
          identifications == o.identifications &&
          attester_name == o.attester_name &&
          attestation_consent == o.attestation_consent &&
          attester_title == o.attester_title &&
          attestation_date == o.attestation_date &&
          proprietor_is_beneficial_owner == o.proprietor_is_beneficial_owner &&
          beneficial_owner1 == o.beneficial_owner1 &&
          beneficial_owner2 == o.beneficial_owner2 &&
          beneficial_owner3 == o.beneficial_owner3 &&
          beneficial_owner4 == o.beneficial_owner4 &&
          deposit_account == o.deposit_account
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [token, active, notes, ip_address, password, phone, metadata, account_holder_group_token, authentication, created_time, last_modified_time, status, business_name_legal, business_name_dba, office_location, in_current_location_since, website, date_established, general_business_description, history, business_type, international_office_locations, taxpayer_id, duns_number, primary_contact, incorporation, proprietor_or_officer, identifications, attester_name, attestation_consent, attester_title, attestation_date, proprietor_is_beneficial_owner, beneficial_owner1, beneficial_owner2, beneficial_owner3, beneficial_owner4, deposit_account].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Marqeta.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
