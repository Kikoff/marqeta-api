=begin
#Marqeta Core API

#Simplified management of your payment programs

The version of the OpenAPI document: 3.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.0.0

=end

require 'date'
require 'time'

module Marqeta
  class Pos
    attr_accessor :pan_entry_mode

    attr_accessor :pin_entry_mode

    attr_accessor :terminal_id

    attr_accessor :terminal_attendance

    attr_accessor :terminal_location

    attr_accessor :card_holder_presence

    attr_accessor :cardholder_authentication_method

    attr_accessor :card_presence

    attr_accessor :pin_present

    attr_accessor :terminal_type

    attr_accessor :card_data_input_capability

    attr_accessor :country_code

    attr_accessor :zip

    attr_accessor :partial_approval_capable

    attr_accessor :purchase_amount_only

    attr_accessor :is_recurring

    attr_accessor :is_installment

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'pan_entry_mode' => :'pan_entry_mode',
        :'pin_entry_mode' => :'pin_entry_mode',
        :'terminal_id' => :'terminal_id',
        :'terminal_attendance' => :'terminal_attendance',
        :'terminal_location' => :'terminal_location',
        :'card_holder_presence' => :'card_holder_presence',
        :'cardholder_authentication_method' => :'cardholder_authentication_method',
        :'card_presence' => :'card_presence',
        :'pin_present' => :'pin_present',
        :'terminal_type' => :'terminal_type',
        :'card_data_input_capability' => :'card_data_input_capability',
        :'country_code' => :'country_code',
        :'zip' => :'zip',
        :'partial_approval_capable' => :'partial_approval_capable',
        :'purchase_amount_only' => :'purchase_amount_only',
        :'is_recurring' => :'is_recurring',
        :'is_installment' => :'is_installment'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'pan_entry_mode' => :'String',
        :'pin_entry_mode' => :'String',
        :'terminal_id' => :'String',
        :'terminal_attendance' => :'String',
        :'terminal_location' => :'String',
        :'card_holder_presence' => :'Boolean',
        :'cardholder_authentication_method' => :'String',
        :'card_presence' => :'Boolean',
        :'pin_present' => :'Boolean',
        :'terminal_type' => :'String',
        :'card_data_input_capability' => :'String',
        :'country_code' => :'String',
        :'zip' => :'String',
        :'partial_approval_capable' => :'Boolean',
        :'purchase_amount_only' => :'Boolean',
        :'is_recurring' => :'Boolean',
        :'is_installment' => :'Boolean'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Marqeta::Pos` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Marqeta::Pos`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'pan_entry_mode')
        self.pan_entry_mode = attributes[:'pan_entry_mode']
      end

      if attributes.key?(:'pin_entry_mode')
        self.pin_entry_mode = attributes[:'pin_entry_mode']
      end

      if attributes.key?(:'terminal_id')
        self.terminal_id = attributes[:'terminal_id']
      end

      if attributes.key?(:'terminal_attendance')
        self.terminal_attendance = attributes[:'terminal_attendance']
      end

      if attributes.key?(:'terminal_location')
        self.terminal_location = attributes[:'terminal_location']
      end

      if attributes.key?(:'card_holder_presence')
        self.card_holder_presence = attributes[:'card_holder_presence']
      else
        self.card_holder_presence = false
      end

      if attributes.key?(:'cardholder_authentication_method')
        self.cardholder_authentication_method = attributes[:'cardholder_authentication_method']
      end

      if attributes.key?(:'card_presence')
        self.card_presence = attributes[:'card_presence']
      else
        self.card_presence = false
      end

      if attributes.key?(:'pin_present')
        self.pin_present = attributes[:'pin_present']
      else
        self.pin_present = false
      end

      if attributes.key?(:'terminal_type')
        self.terminal_type = attributes[:'terminal_type']
      end

      if attributes.key?(:'card_data_input_capability')
        self.card_data_input_capability = attributes[:'card_data_input_capability']
      end

      if attributes.key?(:'country_code')
        self.country_code = attributes[:'country_code']
      end

      if attributes.key?(:'zip')
        self.zip = attributes[:'zip']
      end

      if attributes.key?(:'partial_approval_capable')
        self.partial_approval_capable = attributes[:'partial_approval_capable']
      else
        self.partial_approval_capable = false
      end

      if attributes.key?(:'purchase_amount_only')
        self.purchase_amount_only = attributes[:'purchase_amount_only']
      else
        self.purchase_amount_only = false
      end

      if attributes.key?(:'is_recurring')
        self.is_recurring = attributes[:'is_recurring']
      else
        self.is_recurring = false
      end

      if attributes.key?(:'is_installment')
        self.is_installment = attributes[:'is_installment']
      else
        self.is_installment = false
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      pan_entry_mode_validator = EnumAttributeValidator.new('String', ["UNKNOWN", "MANUAL", "MAG_STRIPE", "MAG_STRIPE_CONTACTLESS", "BAR_CODE", "OCR", "MICR", "CHIP", "CHIP_CONTACTLESS", "CARD_ON_FILE", "CHIP_FALLBACK", "OTHER"])
      return false unless pan_entry_mode_validator.valid?(@pan_entry_mode)
      pin_entry_mode_validator = EnumAttributeValidator.new('String', ["UNKNOWN", "TRUE", "FALSE", "DEFECTIVE"])
      return false unless pin_entry_mode_validator.valid?(@pin_entry_mode)
      terminal_attendance_validator = EnumAttributeValidator.new('String', ["UNSPECIFIED", "ATTENDED", "UNATTENDED", "NO_TERMINAL"])
      return false unless terminal_attendance_validator.valid?(@terminal_attendance)
      terminal_location_validator = EnumAttributeValidator.new('String', ["ON_PREMISE", "OFF_PREMISE_MERCHANT", "OFF_PREMISE_CARDHOLDER", "NO_TERMINAL"])
      return false unless terminal_location_validator.valid?(@terminal_location)
      cardholder_authentication_method_validator = EnumAttributeValidator.new('String', ["UNSPECIFIED", "NON_AUTHENTICATED", "SIGNATURE", "PIN", "ID_VERIFIED"])
      return false unless cardholder_authentication_method_validator.valid?(@cardholder_authentication_method)
      terminal_type_validator = EnumAttributeValidator.new('String', ["AUTO_DISPENSER_WITH_PIN", "SELF_SERVICE", "LIMITED_AMOUNT", "IN_FLIGHT", "ECOMMERCE", "TRANSPONDER"])
      return false unless terminal_type_validator.valid?(@terminal_type)
      card_data_input_capability_validator = EnumAttributeValidator.new('String', ["UNKNOWN", "NO_TERMINAL", "MAG_STRIPE", "MAG_STRIPE_CONTACTLESS", "MAG_STRIPE_KEY_ENTRY", "CHIP", "CHIP_CONTACTLESS", "CHIP_MAG_STRIPE", "CHIP_MAG_STRIPE_KEY_ENTRY", "KEY_ENTRY", "OCR", "MICR", "BAR_CODE"])
      return false unless card_data_input_capability_validator.valid?(@card_data_input_capability)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] pan_entry_mode Object to be assigned
    def pan_entry_mode=(pan_entry_mode)
      validator = EnumAttributeValidator.new('String', ["UNKNOWN", "MANUAL", "MAG_STRIPE", "MAG_STRIPE_CONTACTLESS", "BAR_CODE", "OCR", "MICR", "CHIP", "CHIP_CONTACTLESS", "CARD_ON_FILE", "CHIP_FALLBACK", "OTHER"])
      unless validator.valid?(pan_entry_mode)
        fail ArgumentError, "invalid value for \"pan_entry_mode\", must be one of #{validator.allowable_values}."
      end
      @pan_entry_mode = pan_entry_mode
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] pin_entry_mode Object to be assigned
    def pin_entry_mode=(pin_entry_mode)
      validator = EnumAttributeValidator.new('String', ["UNKNOWN", "TRUE", "FALSE", "DEFECTIVE"])
      unless validator.valid?(pin_entry_mode)
        fail ArgumentError, "invalid value for \"pin_entry_mode\", must be one of #{validator.allowable_values}."
      end
      @pin_entry_mode = pin_entry_mode
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] terminal_attendance Object to be assigned
    def terminal_attendance=(terminal_attendance)
      validator = EnumAttributeValidator.new('String', ["UNSPECIFIED", "ATTENDED", "UNATTENDED", "NO_TERMINAL"])
      unless validator.valid?(terminal_attendance)
        fail ArgumentError, "invalid value for \"terminal_attendance\", must be one of #{validator.allowable_values}."
      end
      @terminal_attendance = terminal_attendance
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] terminal_location Object to be assigned
    def terminal_location=(terminal_location)
      validator = EnumAttributeValidator.new('String', ["ON_PREMISE", "OFF_PREMISE_MERCHANT", "OFF_PREMISE_CARDHOLDER", "NO_TERMINAL"])
      unless validator.valid?(terminal_location)
        fail ArgumentError, "invalid value for \"terminal_location\", must be one of #{validator.allowable_values}."
      end
      @terminal_location = terminal_location
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] cardholder_authentication_method Object to be assigned
    def cardholder_authentication_method=(cardholder_authentication_method)
      validator = EnumAttributeValidator.new('String', ["UNSPECIFIED", "NON_AUTHENTICATED", "SIGNATURE", "PIN", "ID_VERIFIED"])
      unless validator.valid?(cardholder_authentication_method)
        fail ArgumentError, "invalid value for \"cardholder_authentication_method\", must be one of #{validator.allowable_values}."
      end
      @cardholder_authentication_method = cardholder_authentication_method
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] terminal_type Object to be assigned
    def terminal_type=(terminal_type)
      validator = EnumAttributeValidator.new('String', ["AUTO_DISPENSER_WITH_PIN", "SELF_SERVICE", "LIMITED_AMOUNT", "IN_FLIGHT", "ECOMMERCE", "TRANSPONDER"])
      unless validator.valid?(terminal_type)
        fail ArgumentError, "invalid value for \"terminal_type\", must be one of #{validator.allowable_values}."
      end
      @terminal_type = terminal_type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] card_data_input_capability Object to be assigned
    def card_data_input_capability=(card_data_input_capability)
      validator = EnumAttributeValidator.new('String', ["UNKNOWN", "NO_TERMINAL", "MAG_STRIPE", "MAG_STRIPE_CONTACTLESS", "MAG_STRIPE_KEY_ENTRY", "CHIP", "CHIP_CONTACTLESS", "CHIP_MAG_STRIPE", "CHIP_MAG_STRIPE_KEY_ENTRY", "KEY_ENTRY", "OCR", "MICR", "BAR_CODE"])
      unless validator.valid?(card_data_input_capability)
        fail ArgumentError, "invalid value for \"card_data_input_capability\", must be one of #{validator.allowable_values}."
      end
      @card_data_input_capability = card_data_input_capability
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          pan_entry_mode == o.pan_entry_mode &&
          pin_entry_mode == o.pin_entry_mode &&
          terminal_id == o.terminal_id &&
          terminal_attendance == o.terminal_attendance &&
          terminal_location == o.terminal_location &&
          card_holder_presence == o.card_holder_presence &&
          cardholder_authentication_method == o.cardholder_authentication_method &&
          card_presence == o.card_presence &&
          pin_present == o.pin_present &&
          terminal_type == o.terminal_type &&
          card_data_input_capability == o.card_data_input_capability &&
          country_code == o.country_code &&
          zip == o.zip &&
          partial_approval_capable == o.partial_approval_capable &&
          purchase_amount_only == o.purchase_amount_only &&
          is_recurring == o.is_recurring &&
          is_installment == o.is_installment
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [pan_entry_mode, pin_entry_mode, terminal_id, terminal_attendance, terminal_location, card_holder_presence, cardholder_authentication_method, card_presence, pin_present, terminal_type, card_data_input_capability, country_code, zip, partial_approval_capable, purchase_amount_only, is_recurring, is_installment].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Marqeta.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
