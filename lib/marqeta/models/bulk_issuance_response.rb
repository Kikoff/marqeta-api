=begin
#Marqeta Core API

#Simplified management of your payment programs

The version of the OpenAPI document: 3.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.0.0

=end

require 'date'
require 'time'

module Marqeta
  class BulkIssuanceResponse
    attr_accessor :token

    attr_accessor :fulfillment

    attr_accessor :expedite

    attr_accessor :card_product_token

    attr_accessor :card_allocation

    attr_accessor :user_association

    attr_accessor :name_line_1_numeric_postfix

    attr_accessor :name_line_1_random_postfix

    attr_accessor :expiration_offset

    attr_accessor :cards_processed

    attr_accessor :created_time

    attr_accessor :name_line1_start_index

    attr_accessor :name_line1_end_index

    attr_accessor :card_fulfillment_time

    attr_accessor :provider_ship_date

    attr_accessor :provider_shipping_method

    attr_accessor :provider_tracking_number

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'token' => :'token',
        :'fulfillment' => :'fulfillment',
        :'expedite' => :'expedite',
        :'card_product_token' => :'card_product_token',
        :'card_allocation' => :'card_allocation',
        :'user_association' => :'user_association',
        :'name_line_1_numeric_postfix' => :'name_line_1_numeric_postfix',
        :'name_line_1_random_postfix' => :'name_line_1_random_postfix',
        :'expiration_offset' => :'expiration_offset',
        :'cards_processed' => :'cards_processed',
        :'created_time' => :'created_time',
        :'name_line1_start_index' => :'name_line1_start_index',
        :'name_line1_end_index' => :'name_line1_end_index',
        :'card_fulfillment_time' => :'card_fulfillment_time',
        :'provider_ship_date' => :'provider_ship_date',
        :'provider_shipping_method' => :'provider_shipping_method',
        :'provider_tracking_number' => :'provider_tracking_number'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'token' => :'String',
        :'fulfillment' => :'FulfillmentResponse',
        :'expedite' => :'Boolean',
        :'card_product_token' => :'String',
        :'card_allocation' => :'Integer',
        :'user_association' => :'UserAssociation',
        :'name_line_1_numeric_postfix' => :'Boolean',
        :'name_line_1_random_postfix' => :'Boolean',
        :'expiration_offset' => :'ExpirationOffset',
        :'cards_processed' => :'Integer',
        :'created_time' => :'Time',
        :'name_line1_start_index' => :'Integer',
        :'name_line1_end_index' => :'Integer',
        :'card_fulfillment_time' => :'Time',
        :'provider_ship_date' => :'Time',
        :'provider_shipping_method' => :'String',
        :'provider_tracking_number' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Marqeta::BulkIssuanceResponse` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Marqeta::BulkIssuanceResponse`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'token')
        self.token = attributes[:'token']
      end

      if attributes.key?(:'fulfillment')
        self.fulfillment = attributes[:'fulfillment']
      end

      if attributes.key?(:'expedite')
        self.expedite = attributes[:'expedite']
      else
        self.expedite = false
      end

      if attributes.key?(:'card_product_token')
        self.card_product_token = attributes[:'card_product_token']
      end

      if attributes.key?(:'card_allocation')
        self.card_allocation = attributes[:'card_allocation']
      end

      if attributes.key?(:'user_association')
        self.user_association = attributes[:'user_association']
      end

      if attributes.key?(:'name_line_1_numeric_postfix')
        self.name_line_1_numeric_postfix = attributes[:'name_line_1_numeric_postfix']
      else
        self.name_line_1_numeric_postfix = false
      end

      if attributes.key?(:'name_line_1_random_postfix')
        self.name_line_1_random_postfix = attributes[:'name_line_1_random_postfix']
      else
        self.name_line_1_random_postfix = false
      end

      if attributes.key?(:'expiration_offset')
        self.expiration_offset = attributes[:'expiration_offset']
      end

      if attributes.key?(:'cards_processed')
        self.cards_processed = attributes[:'cards_processed']
      end

      if attributes.key?(:'created_time')
        self.created_time = attributes[:'created_time']
      end

      if attributes.key?(:'name_line1_start_index')
        self.name_line1_start_index = attributes[:'name_line1_start_index']
      end

      if attributes.key?(:'name_line1_end_index')
        self.name_line1_end_index = attributes[:'name_line1_end_index']
      end

      if attributes.key?(:'card_fulfillment_time')
        self.card_fulfillment_time = attributes[:'card_fulfillment_time']
      end

      if attributes.key?(:'provider_ship_date')
        self.provider_ship_date = attributes[:'provider_ship_date']
      end

      if attributes.key?(:'provider_shipping_method')
        self.provider_shipping_method = attributes[:'provider_shipping_method']
      end

      if attributes.key?(:'provider_tracking_number')
        self.provider_tracking_number = attributes[:'provider_tracking_number']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @token.nil?
        invalid_properties.push('invalid value for "token", token cannot be nil.')
      end

      if @token.to_s.length > 36
        invalid_properties.push('invalid value for "token", the character length must be smaller than or equal to 36.')
      end

      if @token.to_s.length < 1
        invalid_properties.push('invalid value for "token", the character length must be great than or equal to 1.')
      end

      if @fulfillment.nil?
        invalid_properties.push('invalid value for "fulfillment", fulfillment cannot be nil.')
      end

      if @card_product_token.nil?
        invalid_properties.push('invalid value for "card_product_token", card_product_token cannot be nil.')
      end

      if @card_product_token.to_s.length > 36
        invalid_properties.push('invalid value for "card_product_token", the character length must be smaller than or equal to 36.')
      end

      if @card_product_token.to_s.length < 1
        invalid_properties.push('invalid value for "card_product_token", the character length must be great than or equal to 1.')
      end

      if @card_allocation.nil?
        invalid_properties.push('invalid value for "card_allocation", card_allocation cannot be nil.')
      end

      if @card_allocation > 50000
        invalid_properties.push('invalid value for "card_allocation", must be smaller than or equal to 50000.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @token.nil?
      return false if @token.to_s.length > 36
      return false if @token.to_s.length < 1
      return false if @fulfillment.nil?
      return false if @card_product_token.nil?
      return false if @card_product_token.to_s.length > 36
      return false if @card_product_token.to_s.length < 1
      return false if @card_allocation.nil?
      return false if @card_allocation > 50000
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] token Value to be assigned
    def token=(token)
      if token.nil?
        fail ArgumentError, 'token cannot be nil'
      end

      if token.to_s.length > 36
        fail ArgumentError, 'invalid value for "token", the character length must be smaller than or equal to 36.'
      end

      if token.to_s.length < 1
        fail ArgumentError, 'invalid value for "token", the character length must be great than or equal to 1.'
      end

      @token = token
    end

    # Custom attribute writer method with validation
    # @param [Object] card_product_token Value to be assigned
    def card_product_token=(card_product_token)
      if card_product_token.nil?
        fail ArgumentError, 'card_product_token cannot be nil'
      end

      if card_product_token.to_s.length > 36
        fail ArgumentError, 'invalid value for "card_product_token", the character length must be smaller than or equal to 36.'
      end

      if card_product_token.to_s.length < 1
        fail ArgumentError, 'invalid value for "card_product_token", the character length must be great than or equal to 1.'
      end

      @card_product_token = card_product_token
    end

    # Custom attribute writer method with validation
    # @param [Object] card_allocation Value to be assigned
    def card_allocation=(card_allocation)
      if card_allocation.nil?
        fail ArgumentError, 'card_allocation cannot be nil'
      end

      if card_allocation > 50000
        fail ArgumentError, 'invalid value for "card_allocation", must be smaller than or equal to 50000.'
      end

      @card_allocation = card_allocation
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          token == o.token &&
          fulfillment == o.fulfillment &&
          expedite == o.expedite &&
          card_product_token == o.card_product_token &&
          card_allocation == o.card_allocation &&
          user_association == o.user_association &&
          name_line_1_numeric_postfix == o.name_line_1_numeric_postfix &&
          name_line_1_random_postfix == o.name_line_1_random_postfix &&
          expiration_offset == o.expiration_offset &&
          cards_processed == o.cards_processed &&
          created_time == o.created_time &&
          name_line1_start_index == o.name_line1_start_index &&
          name_line1_end_index == o.name_line1_end_index &&
          card_fulfillment_time == o.card_fulfillment_time &&
          provider_ship_date == o.provider_ship_date &&
          provider_shipping_method == o.provider_shipping_method &&
          provider_tracking_number == o.provider_tracking_number
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [token, fulfillment, expedite, card_product_token, card_allocation, user_association, name_line_1_numeric_postfix, name_line_1_random_postfix, expiration_offset, cards_processed, created_time, name_line1_start_index, name_line1_end_index, card_fulfillment_time, provider_ship_date, provider_shipping_method, provider_tracking_number].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Marqeta.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
