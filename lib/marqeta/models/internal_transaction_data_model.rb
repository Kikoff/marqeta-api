=begin
#Marqeta Core API

#Simplified management of your payment programs

The version of the OpenAPI document: 3.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.0.0

=end

require 'date'
require 'time'

module Marqeta
  class InternalTransactionDataModel
    attr_accessor :pcode

    attr_accessor :amount

    attr_accessor :request_amount

    attr_accessor :additional_amount

    attr_accessor :acquirer_fee

    attr_accessor :refid

    attr_accessor :ref_itc

    attr_accessor :account2_id

    attr_accessor :country

    attr_accessor :currency

    attr_accessor :settlement_currency

    attr_accessor :payment_channel

    attr_accessor :itc

    attr_accessor :processing_code

    attr_accessor :is_track_data_present

    attr_accessor :is_cvv2_present

    attr_accessor :is_icc_present

    attr_accessor :is_pin_present

    attr_accessor :pan_entry_mode

    attr_accessor :is_cardholder_present

    attr_accessor :is_card_present

    attr_accessor :mcc

    attr_accessor :mid

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'pcode' => :'pcode',
        :'amount' => :'amount',
        :'request_amount' => :'request_amount',
        :'additional_amount' => :'additional_amount',
        :'acquirer_fee' => :'acquirer_fee',
        :'refid' => :'refid',
        :'ref_itc' => :'ref_itc',
        :'account2_id' => :'account2_id',
        :'country' => :'country',
        :'currency' => :'currency',
        :'settlement_currency' => :'settlement_currency',
        :'payment_channel' => :'payment_channel',
        :'itc' => :'itc',
        :'processing_code' => :'processing_code',
        :'is_track_data_present' => :'is_track_data_present',
        :'is_cvv2_present' => :'is_cvv2_present',
        :'is_icc_present' => :'is_icc_present',
        :'is_pin_present' => :'is_pin_present',
        :'pan_entry_mode' => :'pan_entry_mode',
        :'is_cardholder_present' => :'is_cardholder_present',
        :'is_card_present' => :'is_card_present',
        :'mcc' => :'mcc',
        :'mid' => :'mid'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'pcode' => :'String',
        :'amount' => :'Float',
        :'request_amount' => :'Float',
        :'additional_amount' => :'Float',
        :'acquirer_fee' => :'Float',
        :'refid' => :'Integer',
        :'ref_itc' => :'String',
        :'account2_id' => :'Integer',
        :'country' => :'String',
        :'currency' => :'String',
        :'settlement_currency' => :'String',
        :'payment_channel' => :'String',
        :'itc' => :'String',
        :'processing_code' => :'String',
        :'is_track_data_present' => :'Boolean',
        :'is_cvv2_present' => :'Boolean',
        :'is_icc_present' => :'Boolean',
        :'is_pin_present' => :'Boolean',
        :'pan_entry_mode' => :'String',
        :'is_cardholder_present' => :'Boolean',
        :'is_card_present' => :'Boolean',
        :'mcc' => :'String',
        :'mid' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Marqeta::InternalTransactionDataModel` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Marqeta::InternalTransactionDataModel`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'pcode')
        self.pcode = attributes[:'pcode']
      end

      if attributes.key?(:'amount')
        self.amount = attributes[:'amount']
      end

      if attributes.key?(:'request_amount')
        self.request_amount = attributes[:'request_amount']
      end

      if attributes.key?(:'additional_amount')
        self.additional_amount = attributes[:'additional_amount']
      end

      if attributes.key?(:'acquirer_fee')
        self.acquirer_fee = attributes[:'acquirer_fee']
      end

      if attributes.key?(:'refid')
        self.refid = attributes[:'refid']
      end

      if attributes.key?(:'ref_itc')
        self.ref_itc = attributes[:'ref_itc']
      end

      if attributes.key?(:'account2_id')
        self.account2_id = attributes[:'account2_id']
      end

      if attributes.key?(:'country')
        self.country = attributes[:'country']
      end

      if attributes.key?(:'currency')
        self.currency = attributes[:'currency']
      end

      if attributes.key?(:'settlement_currency')
        self.settlement_currency = attributes[:'settlement_currency']
      end

      if attributes.key?(:'payment_channel')
        self.payment_channel = attributes[:'payment_channel']
      end

      if attributes.key?(:'itc')
        self.itc = attributes[:'itc']
      end

      if attributes.key?(:'processing_code')
        self.processing_code = attributes[:'processing_code']
      end

      if attributes.key?(:'is_track_data_present')
        self.is_track_data_present = attributes[:'is_track_data_present']
      else
        self.is_track_data_present = false
      end

      if attributes.key?(:'is_cvv2_present')
        self.is_cvv2_present = attributes[:'is_cvv2_present']
      else
        self.is_cvv2_present = false
      end

      if attributes.key?(:'is_icc_present')
        self.is_icc_present = attributes[:'is_icc_present']
      else
        self.is_icc_present = false
      end

      if attributes.key?(:'is_pin_present')
        self.is_pin_present = attributes[:'is_pin_present']
      else
        self.is_pin_present = false
      end

      if attributes.key?(:'pan_entry_mode')
        self.pan_entry_mode = attributes[:'pan_entry_mode']
      end

      if attributes.key?(:'is_cardholder_present')
        self.is_cardholder_present = attributes[:'is_cardholder_present']
      else
        self.is_cardholder_present = false
      end

      if attributes.key?(:'is_card_present')
        self.is_card_present = attributes[:'is_card_present']
      else
        self.is_card_present = false
      end

      if attributes.key?(:'mcc')
        self.mcc = attributes[:'mcc']
      end

      if attributes.key?(:'mid')
        self.mid = attributes[:'mid']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          pcode == o.pcode &&
          amount == o.amount &&
          request_amount == o.request_amount &&
          additional_amount == o.additional_amount &&
          acquirer_fee == o.acquirer_fee &&
          refid == o.refid &&
          ref_itc == o.ref_itc &&
          account2_id == o.account2_id &&
          country == o.country &&
          currency == o.currency &&
          settlement_currency == o.settlement_currency &&
          payment_channel == o.payment_channel &&
          itc == o.itc &&
          processing_code == o.processing_code &&
          is_track_data_present == o.is_track_data_present &&
          is_cvv2_present == o.is_cvv2_present &&
          is_icc_present == o.is_icc_present &&
          is_pin_present == o.is_pin_present &&
          pan_entry_mode == o.pan_entry_mode &&
          is_cardholder_present == o.is_cardholder_present &&
          is_card_present == o.is_card_present &&
          mcc == o.mcc &&
          mid == o.mid
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [pcode, amount, request_amount, additional_amount, acquirer_fee, refid, ref_itc, account2_id, country, currency, settlement_currency, payment_channel, itc, processing_code, is_track_data_present, is_cvv2_present, is_icc_present, is_pin_present, pan_entry_mode, is_cardholder_present, is_card_present, mcc, mid].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Marqeta.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
