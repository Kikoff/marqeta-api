=begin
#Marqeta Core API

#Simplified management of your payment programs

The version of the OpenAPI document: 3.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.0.0

=end

require 'date'
require 'time'

module Marqeta
  class AdvAuthRequestModel
    # Default is 0100
    attr_accessor :mti

    attr_accessor :network

    # Defaults to VISANET if network is VISA
    attr_accessor :sub_network

    attr_accessor :network_reference_id

    # yyyy-MM-dd, yyyy-MM-ddThh:mm:ssZ
    attr_accessor :local_transaction_date

    # yyyy-MM-dd, yyyy-MM-ddThh:mm:ssZ
    attr_accessor :transaction_date

    # yyyy-MM-dd, yyyy-MM-ddThh:mm:ssZ
    attr_accessor :settlement_date

    attr_accessor :stan

    attr_accessor :rrn

    attr_accessor :processing_code

    attr_accessor :function_code

    attr_accessor :reason_code

    attr_accessor :acquirer_reference_id

    attr_accessor :forwarding_institution_id

    attr_accessor :local_transaction_amount

    attr_accessor :local_currency_code

    attr_accessor :settlement_amount

    attr_accessor :cardholder_billing_amount

    attr_accessor :cardholder_billing_conversion_rate

    attr_accessor :cardholder_billing_currency

    attr_accessor :settlement_currency_code

    attr_accessor :approval_code

    attr_accessor :network_response

    attr_accessor :stan_padding_length

    attr_accessor :acquirer

    attr_accessor :card_token

    attr_accessor :amount

    attr_accessor :cash_back_amount

    attr_accessor :mid

    attr_accessor :pin

    # Default is MAG_STRIPE
    attr_accessor :pos_pan_entry_mode

    attr_accessor :acquirer_fee_amount

    attr_accessor :stip_reason_code

    # Default is false
    attr_accessor :is_recurring

    # Default is false
    attr_accessor :is_installment

    attr_accessor :network_fees

    attr_accessor :card_acceptor

    attr_accessor :transaction_options

    attr_accessor :original_data_elements

    attr_accessor :replacement_amount

    attr_accessor :webhook

    attr_accessor :digital_wallet_token

    attr_accessor :digital_wallet_token_device_info

    attr_accessor :digital_wallet_token_wallet_provider_info

    attr_accessor :raw_iso_fields

    attr_accessor :cavv_result_code

    attr_accessor :threeds_authentication_value

    attr_accessor :from_account

    attr_accessor :issuer_received_time

    attr_accessor :network_metadata

    attr_accessor :card_options

    attr_accessor :poi

    attr_accessor :is_stip_approval

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'mti' => :'mti',
        :'network' => :'network',
        :'sub_network' => :'sub_network',
        :'network_reference_id' => :'network_reference_id',
        :'local_transaction_date' => :'local_transaction_date',
        :'transaction_date' => :'transaction_date',
        :'settlement_date' => :'settlement_date',
        :'stan' => :'stan',
        :'rrn' => :'rrn',
        :'processing_code' => :'processing_code',
        :'function_code' => :'function_code',
        :'reason_code' => :'reason_code',
        :'acquirer_reference_id' => :'acquirer_reference_id',
        :'forwarding_institution_id' => :'forwarding_institution_id',
        :'local_transaction_amount' => :'local_transaction_amount',
        :'local_currency_code' => :'local_currency_code',
        :'settlement_amount' => :'settlement_amount',
        :'cardholder_billing_amount' => :'cardholder_billing_amount',
        :'cardholder_billing_conversion_rate' => :'cardholder_billing_conversion_rate',
        :'cardholder_billing_currency' => :'cardholder_billing_currency',
        :'settlement_currency_code' => :'settlement_currency_code',
        :'approval_code' => :'approval_code',
        :'network_response' => :'network_response',
        :'stan_padding_length' => :'stan_padding_length',
        :'acquirer' => :'acquirer',
        :'card_token' => :'card_token',
        :'amount' => :'amount',
        :'cash_back_amount' => :'cash_back_amount',
        :'mid' => :'mid',
        :'pin' => :'pin',
        :'pos_pan_entry_mode' => :'pos_pan_entry_mode',
        :'acquirer_fee_amount' => :'acquirer_fee_amount',
        :'stip_reason_code' => :'stip_reason_code',
        :'is_recurring' => :'is_recurring',
        :'is_installment' => :'is_installment',
        :'network_fees' => :'network_fees',
        :'card_acceptor' => :'card_acceptor',
        :'transaction_options' => :'transaction_options',
        :'original_data_elements' => :'original_data_elements',
        :'replacement_amount' => :'replacement_amount',
        :'webhook' => :'webhook',
        :'digital_wallet_token' => :'digital_wallet_token',
        :'digital_wallet_token_device_info' => :'digital_wallet_token_device_info',
        :'digital_wallet_token_wallet_provider_info' => :'digital_wallet_token_wallet_provider_info',
        :'raw_iso_fields' => :'raw_iso_fields',
        :'cavv_result_code' => :'cavv_result_code',
        :'threeds_authentication_value' => :'threeds_authentication_value',
        :'from_account' => :'from_account',
        :'issuer_received_time' => :'issuer_received_time',
        :'network_metadata' => :'network_metadata',
        :'card_options' => :'card_options',
        :'poi' => :'poi',
        :'is_stip_approval' => :'is_stip_approval'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'mti' => :'String',
        :'network' => :'String',
        :'sub_network' => :'String',
        :'network_reference_id' => :'String',
        :'local_transaction_date' => :'Time',
        :'transaction_date' => :'Time',
        :'settlement_date' => :'Time',
        :'stan' => :'String',
        :'rrn' => :'String',
        :'processing_code' => :'String',
        :'function_code' => :'String',
        :'reason_code' => :'String',
        :'acquirer_reference_id' => :'String',
        :'forwarding_institution_id' => :'String',
        :'local_transaction_amount' => :'Float',
        :'local_currency_code' => :'String',
        :'settlement_amount' => :'Float',
        :'cardholder_billing_amount' => :'Float',
        :'cardholder_billing_conversion_rate' => :'Float',
        :'cardholder_billing_currency' => :'String',
        :'settlement_currency_code' => :'String',
        :'approval_code' => :'String',
        :'network_response' => :'String',
        :'stan_padding_length' => :'Integer',
        :'acquirer' => :'Acquirer',
        :'card_token' => :'String',
        :'amount' => :'Float',
        :'cash_back_amount' => :'Float',
        :'mid' => :'String',
        :'pin' => :'String',
        :'pos_pan_entry_mode' => :'String',
        :'acquirer_fee_amount' => :'Float',
        :'stip_reason_code' => :'String',
        :'is_recurring' => :'Boolean',
        :'is_installment' => :'Boolean',
        :'network_fees' => :'Array<NetworkFeeModel>',
        :'card_acceptor' => :'AdvancedAuthCardAcceptorModel',
        :'transaction_options' => :'TransactionOptions',
        :'original_data_elements' => :'OriginalDataElements',
        :'replacement_amount' => :'ReplacementAmount',
        :'webhook' => :'Webhook',
        :'digital_wallet_token' => :'DigitalWalletToken',
        :'digital_wallet_token_device_info' => :'DigitalWalletTokenDevice',
        :'digital_wallet_token_wallet_provider_info' => :'DigitalWalletTokenWalletProvider',
        :'raw_iso_fields' => :'Hash<String, String>',
        :'cavv_result_code' => :'String',
        :'threeds_authentication_value' => :'String',
        :'from_account' => :'String',
        :'issuer_received_time' => :'String',
        :'network_metadata' => :'NetworkMetadata',
        :'card_options' => :'CardOptions',
        :'poi' => :'AdvancedAuthPoi',
        :'is_stip_approval' => :'Boolean'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Marqeta::AdvAuthRequestModel` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Marqeta::AdvAuthRequestModel`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'mti')
        self.mti = attributes[:'mti']
      end

      if attributes.key?(:'network')
        self.network = attributes[:'network']
      end

      if attributes.key?(:'sub_network')
        self.sub_network = attributes[:'sub_network']
      end

      if attributes.key?(:'network_reference_id')
        self.network_reference_id = attributes[:'network_reference_id']
      end

      if attributes.key?(:'local_transaction_date')
        self.local_transaction_date = attributes[:'local_transaction_date']
      end

      if attributes.key?(:'transaction_date')
        self.transaction_date = attributes[:'transaction_date']
      end

      if attributes.key?(:'settlement_date')
        self.settlement_date = attributes[:'settlement_date']
      end

      if attributes.key?(:'stan')
        self.stan = attributes[:'stan']
      end

      if attributes.key?(:'rrn')
        self.rrn = attributes[:'rrn']
      end

      if attributes.key?(:'processing_code')
        self.processing_code = attributes[:'processing_code']
      end

      if attributes.key?(:'function_code')
        self.function_code = attributes[:'function_code']
      end

      if attributes.key?(:'reason_code')
        self.reason_code = attributes[:'reason_code']
      end

      if attributes.key?(:'acquirer_reference_id')
        self.acquirer_reference_id = attributes[:'acquirer_reference_id']
      end

      if attributes.key?(:'forwarding_institution_id')
        self.forwarding_institution_id = attributes[:'forwarding_institution_id']
      end

      if attributes.key?(:'local_transaction_amount')
        self.local_transaction_amount = attributes[:'local_transaction_amount']
      end

      if attributes.key?(:'local_currency_code')
        self.local_currency_code = attributes[:'local_currency_code']
      end

      if attributes.key?(:'settlement_amount')
        self.settlement_amount = attributes[:'settlement_amount']
      end

      if attributes.key?(:'cardholder_billing_amount')
        self.cardholder_billing_amount = attributes[:'cardholder_billing_amount']
      end

      if attributes.key?(:'cardholder_billing_conversion_rate')
        self.cardholder_billing_conversion_rate = attributes[:'cardholder_billing_conversion_rate']
      end

      if attributes.key?(:'cardholder_billing_currency')
        self.cardholder_billing_currency = attributes[:'cardholder_billing_currency']
      end

      if attributes.key?(:'settlement_currency_code')
        self.settlement_currency_code = attributes[:'settlement_currency_code']
      end

      if attributes.key?(:'approval_code')
        self.approval_code = attributes[:'approval_code']
      end

      if attributes.key?(:'network_response')
        self.network_response = attributes[:'network_response']
      end

      if attributes.key?(:'stan_padding_length')
        self.stan_padding_length = attributes[:'stan_padding_length']
      end

      if attributes.key?(:'acquirer')
        self.acquirer = attributes[:'acquirer']
      end

      if attributes.key?(:'card_token')
        self.card_token = attributes[:'card_token']
      end

      if attributes.key?(:'amount')
        self.amount = attributes[:'amount']
      end

      if attributes.key?(:'cash_back_amount')
        self.cash_back_amount = attributes[:'cash_back_amount']
      end

      if attributes.key?(:'mid')
        self.mid = attributes[:'mid']
      end

      if attributes.key?(:'pin')
        self.pin = attributes[:'pin']
      end

      if attributes.key?(:'pos_pan_entry_mode')
        self.pos_pan_entry_mode = attributes[:'pos_pan_entry_mode']
      end

      if attributes.key?(:'acquirer_fee_amount')
        self.acquirer_fee_amount = attributes[:'acquirer_fee_amount']
      end

      if attributes.key?(:'stip_reason_code')
        self.stip_reason_code = attributes[:'stip_reason_code']
      end

      if attributes.key?(:'is_recurring')
        self.is_recurring = attributes[:'is_recurring']
      else
        self.is_recurring = false
      end

      if attributes.key?(:'is_installment')
        self.is_installment = attributes[:'is_installment']
      else
        self.is_installment = false
      end

      if attributes.key?(:'network_fees')
        if (value = attributes[:'network_fees']).is_a?(Array)
          self.network_fees = value
        end
      end

      if attributes.key?(:'card_acceptor')
        self.card_acceptor = attributes[:'card_acceptor']
      end

      if attributes.key?(:'transaction_options')
        self.transaction_options = attributes[:'transaction_options']
      end

      if attributes.key?(:'original_data_elements')
        self.original_data_elements = attributes[:'original_data_elements']
      end

      if attributes.key?(:'replacement_amount')
        self.replacement_amount = attributes[:'replacement_amount']
      end

      if attributes.key?(:'webhook')
        self.webhook = attributes[:'webhook']
      end

      if attributes.key?(:'digital_wallet_token')
        self.digital_wallet_token = attributes[:'digital_wallet_token']
      end

      if attributes.key?(:'digital_wallet_token_device_info')
        self.digital_wallet_token_device_info = attributes[:'digital_wallet_token_device_info']
      end

      if attributes.key?(:'digital_wallet_token_wallet_provider_info')
        self.digital_wallet_token_wallet_provider_info = attributes[:'digital_wallet_token_wallet_provider_info']
      end

      if attributes.key?(:'raw_iso_fields')
        if (value = attributes[:'raw_iso_fields']).is_a?(Hash)
          self.raw_iso_fields = value
        end
      end

      if attributes.key?(:'cavv_result_code')
        self.cavv_result_code = attributes[:'cavv_result_code']
      end

      if attributes.key?(:'threeds_authentication_value')
        self.threeds_authentication_value = attributes[:'threeds_authentication_value']
      end

      if attributes.key?(:'from_account')
        self.from_account = attributes[:'from_account']
      end

      if attributes.key?(:'issuer_received_time')
        self.issuer_received_time = attributes[:'issuer_received_time']
      end

      if attributes.key?(:'network_metadata')
        self.network_metadata = attributes[:'network_metadata']
      end

      if attributes.key?(:'card_options')
        self.card_options = attributes[:'card_options']
      end

      if attributes.key?(:'poi')
        self.poi = attributes[:'poi']
      end

      if attributes.key?(:'is_stip_approval')
        self.is_stip_approval = attributes[:'is_stip_approval']
      else
        self.is_stip_approval = false
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @network.nil?
        invalid_properties.push('invalid value for "network", network cannot be nil.')
      end

      if !@forwarding_institution_id.nil? && @forwarding_institution_id.to_s.length > 11
        invalid_properties.push('invalid value for "forwarding_institution_id", the character length must be smaller than or equal to 11.')
      end

      if !@forwarding_institution_id.nil? && @forwarding_institution_id.to_s.length < 11
        invalid_properties.push('invalid value for "forwarding_institution_id", the character length must be great than or equal to 11.')
      end

      if !@network_response.nil? && @network_response.to_s.length > 2
        invalid_properties.push('invalid value for "network_response", the character length must be smaller than or equal to 2.')
      end

      if !@network_response.nil? && @network_response.to_s.length < 0
        invalid_properties.push('invalid value for "network_response", the character length must be great than or equal to 0.')
      end

      if @card_token.nil?
        invalid_properties.push('invalid value for "card_token", card_token cannot be nil.')
      end

      if !@cavv_result_code.nil? && @cavv_result_code.to_s.length > 1
        invalid_properties.push('invalid value for "cavv_result_code", the character length must be smaller than or equal to 1.')
      end

      if !@cavv_result_code.nil? && @cavv_result_code.to_s.length < 0
        invalid_properties.push('invalid value for "cavv_result_code", the character length must be great than or equal to 0.')
      end

      if @card_options.nil?
        invalid_properties.push('invalid value for "card_options", card_options cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      mti_validator = EnumAttributeValidator.new('String', ["0100", "0120", "0190", "0200", "0220", "0400", "0420", "0620"])
      return false unless mti_validator.valid?(@mti)
      return false if @network.nil?
      network_validator = EnumAttributeValidator.new('String', ["MASTERCARD", "DISCOVER", "PULSE", "VISA"])
      return false unless network_validator.valid?(@network)
      sub_network_validator = EnumAttributeValidator.new('String', ["VISANET", "VISANETDEBIT", "VISAINTERLINK", "VISAPLUS", "MAESTRO"])
      return false unless sub_network_validator.valid?(@sub_network)
      return false if !@forwarding_institution_id.nil? && @forwarding_institution_id.to_s.length > 11
      return false if !@forwarding_institution_id.nil? && @forwarding_institution_id.to_s.length < 11
      return false if !@network_response.nil? && @network_response.to_s.length > 2
      return false if !@network_response.nil? && @network_response.to_s.length < 0
      return false if @card_token.nil?
      pos_pan_entry_mode_validator = EnumAttributeValidator.new('String', ["MANUAL", "MAG_STRIPE", "MAG_STRIPE_CONTACTLESS", "CHIP", "CHIP_CONTACTLESS", "BAR_CODE", "OCR", "MICR", "OTHER"])
      return false unless pos_pan_entry_mode_validator.valid?(@pos_pan_entry_mode)
      cavv_result_code_validator = EnumAttributeValidator.new('String', ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "A", "B", "C", "D"])
      return false unless cavv_result_code_validator.valid?(@cavv_result_code)
      return false if !@cavv_result_code.nil? && @cavv_result_code.to_s.length > 1
      return false if !@cavv_result_code.nil? && @cavv_result_code.to_s.length < 0
      return false if @card_options.nil?
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] mti Object to be assigned
    def mti=(mti)
      validator = EnumAttributeValidator.new('String', ["0100", "0120", "0190", "0200", "0220", "0400", "0420", "0620"])
      unless validator.valid?(mti)
        fail ArgumentError, "invalid value for \"mti\", must be one of #{validator.allowable_values}."
      end
      @mti = mti
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] network Object to be assigned
    def network=(network)
      validator = EnumAttributeValidator.new('String', ["MASTERCARD", "DISCOVER", "PULSE", "VISA"])
      unless validator.valid?(network)
        fail ArgumentError, "invalid value for \"network\", must be one of #{validator.allowable_values}."
      end
      @network = network
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] sub_network Object to be assigned
    def sub_network=(sub_network)
      validator = EnumAttributeValidator.new('String', ["VISANET", "VISANETDEBIT", "VISAINTERLINK", "VISAPLUS", "MAESTRO"])
      unless validator.valid?(sub_network)
        fail ArgumentError, "invalid value for \"sub_network\", must be one of #{validator.allowable_values}."
      end
      @sub_network = sub_network
    end

    # Custom attribute writer method with validation
    # @param [Object] forwarding_institution_id Value to be assigned
    def forwarding_institution_id=(forwarding_institution_id)
      if !forwarding_institution_id.nil? && forwarding_institution_id.to_s.length > 11
        fail ArgumentError, 'invalid value for "forwarding_institution_id", the character length must be smaller than or equal to 11.'
      end

      if !forwarding_institution_id.nil? && forwarding_institution_id.to_s.length < 11
        fail ArgumentError, 'invalid value for "forwarding_institution_id", the character length must be great than or equal to 11.'
      end

      @forwarding_institution_id = forwarding_institution_id
    end

    # Custom attribute writer method with validation
    # @param [Object] network_response Value to be assigned
    def network_response=(network_response)
      if !network_response.nil? && network_response.to_s.length > 2
        fail ArgumentError, 'invalid value for "network_response", the character length must be smaller than or equal to 2.'
      end

      if !network_response.nil? && network_response.to_s.length < 0
        fail ArgumentError, 'invalid value for "network_response", the character length must be great than or equal to 0.'
      end

      @network_response = network_response
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] pos_pan_entry_mode Object to be assigned
    def pos_pan_entry_mode=(pos_pan_entry_mode)
      validator = EnumAttributeValidator.new('String', ["MANUAL", "MAG_STRIPE", "MAG_STRIPE_CONTACTLESS", "CHIP", "CHIP_CONTACTLESS", "BAR_CODE", "OCR", "MICR", "OTHER"])
      unless validator.valid?(pos_pan_entry_mode)
        fail ArgumentError, "invalid value for \"pos_pan_entry_mode\", must be one of #{validator.allowable_values}."
      end
      @pos_pan_entry_mode = pos_pan_entry_mode
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] cavv_result_code Object to be assigned
    def cavv_result_code=(cavv_result_code)
      validator = EnumAttributeValidator.new('String', ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "A", "B", "C", "D"])
      unless validator.valid?(cavv_result_code)
        fail ArgumentError, "invalid value for \"cavv_result_code\", must be one of #{validator.allowable_values}."
      end
      @cavv_result_code = cavv_result_code
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          mti == o.mti &&
          network == o.network &&
          sub_network == o.sub_network &&
          network_reference_id == o.network_reference_id &&
          local_transaction_date == o.local_transaction_date &&
          transaction_date == o.transaction_date &&
          settlement_date == o.settlement_date &&
          stan == o.stan &&
          rrn == o.rrn &&
          processing_code == o.processing_code &&
          function_code == o.function_code &&
          reason_code == o.reason_code &&
          acquirer_reference_id == o.acquirer_reference_id &&
          forwarding_institution_id == o.forwarding_institution_id &&
          local_transaction_amount == o.local_transaction_amount &&
          local_currency_code == o.local_currency_code &&
          settlement_amount == o.settlement_amount &&
          cardholder_billing_amount == o.cardholder_billing_amount &&
          cardholder_billing_conversion_rate == o.cardholder_billing_conversion_rate &&
          cardholder_billing_currency == o.cardholder_billing_currency &&
          settlement_currency_code == o.settlement_currency_code &&
          approval_code == o.approval_code &&
          network_response == o.network_response &&
          stan_padding_length == o.stan_padding_length &&
          acquirer == o.acquirer &&
          card_token == o.card_token &&
          amount == o.amount &&
          cash_back_amount == o.cash_back_amount &&
          mid == o.mid &&
          pin == o.pin &&
          pos_pan_entry_mode == o.pos_pan_entry_mode &&
          acquirer_fee_amount == o.acquirer_fee_amount &&
          stip_reason_code == o.stip_reason_code &&
          is_recurring == o.is_recurring &&
          is_installment == o.is_installment &&
          network_fees == o.network_fees &&
          card_acceptor == o.card_acceptor &&
          transaction_options == o.transaction_options &&
          original_data_elements == o.original_data_elements &&
          replacement_amount == o.replacement_amount &&
          webhook == o.webhook &&
          digital_wallet_token == o.digital_wallet_token &&
          digital_wallet_token_device_info == o.digital_wallet_token_device_info &&
          digital_wallet_token_wallet_provider_info == o.digital_wallet_token_wallet_provider_info &&
          raw_iso_fields == o.raw_iso_fields &&
          cavv_result_code == o.cavv_result_code &&
          threeds_authentication_value == o.threeds_authentication_value &&
          from_account == o.from_account &&
          issuer_received_time == o.issuer_received_time &&
          network_metadata == o.network_metadata &&
          card_options == o.card_options &&
          poi == o.poi &&
          is_stip_approval == o.is_stip_approval
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [mti, network, sub_network, network_reference_id, local_transaction_date, transaction_date, settlement_date, stan, rrn, processing_code, function_code, reason_code, acquirer_reference_id, forwarding_institution_id, local_transaction_amount, local_currency_code, settlement_amount, cardholder_billing_amount, cardholder_billing_conversion_rate, cardholder_billing_currency, settlement_currency_code, approval_code, network_response, stan_padding_length, acquirer, card_token, amount, cash_back_amount, mid, pin, pos_pan_entry_mode, acquirer_fee_amount, stip_reason_code, is_recurring, is_installment, network_fees, card_acceptor, transaction_options, original_data_elements, replacement_amount, webhook, digital_wallet_token, digital_wallet_token_device_info, digital_wallet_token_wallet_provider_info, raw_iso_fields, cavv_result_code, threeds_authentication_value, from_account, issuer_received_time, network_metadata, card_options, poi, is_stip_approval].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Marqeta.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
