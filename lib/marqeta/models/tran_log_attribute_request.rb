=begin
#Marqeta Core API

#Simplified management of your payment programs

The version of the OpenAPI document: 3.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.0.0

=end

require 'date'
require 'time'

module Marqeta
  class TranLogAttributeRequest
    attr_accessor :transaction_token

    attr_accessor :attribute_name

    attr_accessor :attribute_value

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'transaction_token' => :'transaction_token',
        :'attribute_name' => :'attribute_name',
        :'attribute_value' => :'attribute_value'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'transaction_token' => :'String',
        :'attribute_name' => :'String',
        :'attribute_value' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Marqeta::TranLogAttributeRequest` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Marqeta::TranLogAttributeRequest`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'transaction_token')
        self.transaction_token = attributes[:'transaction_token']
      end

      if attributes.key?(:'attribute_name')
        self.attribute_name = attributes[:'attribute_name']
      end

      if attributes.key?(:'attribute_value')
        self.attribute_value = attributes[:'attribute_value']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @transaction_token.nil?
        invalid_properties.push('invalid value for "transaction_token", transaction_token cannot be nil.')
      end

      if @attribute_name.nil?
        invalid_properties.push('invalid value for "attribute_name", attribute_name cannot be nil.')
      end

      if @attribute_value.nil?
        invalid_properties.push('invalid value for "attribute_value", attribute_value cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @transaction_token.nil?
      return false if @attribute_name.nil?
      attribute_name_validator = EnumAttributeValidator.new('String', ["FUEL_TYPE", "NUM_GALLONS", "PRICE_PER_GALLON", "EARN_CARDHOLDER_REWARD", "TRAN_LIFE_CYCLE", "MULTI_CLEARING_SEQ", "MULTI_CLEARING_FINAL_COMPLETION_ID", "POS_ENTRY_CODE", "PROCESSING_CODE", "INTERCHANGE_RATE_DESCRIPTOR", "TERMINAL_TYPE", "SETTLEMENT_INDICATOR", "CARD_PRESENT", "CARD_HOLDER_PRESENT", "TRAN_ORIGIN", "FIND_ORIGINAL_FINDER", "MANUAL_NOTE", "POST_DATE_MODIFICATION", "CLEARING_RECORD_HASH", "CLEARING_RECORD_FILE_NAME", "CLEARING_RECORD_SEQUENCE_NUMBER", "TOKEN_ELAPSED_TIME_TO_LIVE_FOR_AN_LUK", "TOKEN_COUNT_OF_TRANSACTION_FOR_AN_LUK", "TOKEN_CUMULATIVE_TOTAL_TRANSACTION_AMOUNT_FOR_AN_LUK", "INCREMENTAL_CUMULATIVE_AMOUNT", "FINAL_INCREMENTAL_AUTH", "NETWORK_FEES_MODEL", "ECOMMERCE_SECURITY_LEVEL_INDICATOR", "PAYMENT_CHANNEL", "PAYMENT_INSTRUMENT", "PIN_PRESENT", "TERMINAL_PARTIAL_APPROVAL_CAPABLE", "STIP_REASON_CODE", "IS_RECURRING", "IS_INSTALLMENT", "TRANSACTION_INTEGRITY_CLASS", "DYNAMIC_CVV_ATC", "STANDIN_APPROVED_BY", "STANDIN_BY", "ORIGINAL_CURRENCY_CODE", "DYNAMIC_CURRENCY_CONVERSION", "CARDHOLDER_BILLING_CONVERSION_RATE", "CARDHOLDER_BILLING_CONVERSION_DATE", "IS_IT_STIP_APPROVAL", "ECOMMERCE_AUTHENTICATION_DATA", "CAVV_RESULT_CODE", "NETWORK_TRANSACTION_AMOUNT_DE_4", "NETWORK_SETTLEMENT_AMOUNT_DE_5", "NETWORK_CARDHOLDER_BILLING_AMOUNT_DE_6", "NETWORK_FEE_AMOUNT_DE_28", "NETWORK_CASHBACK_AMOUNT_OTHER_DE_54", "NETWORK_REPLACEMENT_AMOUNT_OTHER_DE_61", "NETWORK_REPLACEMENT_AMOUNT_DE_95", "ADVICE_DETAIL_CODE", "ASYNC_REQUEST_TOKEN", "TXN_MCC", "EXTRA_FIELDS", "SURCHARGE_FREE_ATM_NETWORK", "NETWORK_PRODUCT_ID", "NETWORK_PROGRAM_ID", "NETWORK_SPEND_QUALIFIER", "THREE_DS_CAVV_VERSION", "THREE_DS_MESSAGE_VERSION", "THREE_DS_AUTHENTICATION_METHOD", "THREE_DS_AUTHENTICATION_STATUS", "MOTO_INDICATOR", "PREAUTH_TIME_LIMIT", "AUTHORIZATION_SOURCE_CODE"])
      return false unless attribute_name_validator.valid?(@attribute_name)
      return false if @attribute_value.nil?
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] attribute_name Object to be assigned
    def attribute_name=(attribute_name)
      validator = EnumAttributeValidator.new('String', ["FUEL_TYPE", "NUM_GALLONS", "PRICE_PER_GALLON", "EARN_CARDHOLDER_REWARD", "TRAN_LIFE_CYCLE", "MULTI_CLEARING_SEQ", "MULTI_CLEARING_FINAL_COMPLETION_ID", "POS_ENTRY_CODE", "PROCESSING_CODE", "INTERCHANGE_RATE_DESCRIPTOR", "TERMINAL_TYPE", "SETTLEMENT_INDICATOR", "CARD_PRESENT", "CARD_HOLDER_PRESENT", "TRAN_ORIGIN", "FIND_ORIGINAL_FINDER", "MANUAL_NOTE", "POST_DATE_MODIFICATION", "CLEARING_RECORD_HASH", "CLEARING_RECORD_FILE_NAME", "CLEARING_RECORD_SEQUENCE_NUMBER", "TOKEN_ELAPSED_TIME_TO_LIVE_FOR_AN_LUK", "TOKEN_COUNT_OF_TRANSACTION_FOR_AN_LUK", "TOKEN_CUMULATIVE_TOTAL_TRANSACTION_AMOUNT_FOR_AN_LUK", "INCREMENTAL_CUMULATIVE_AMOUNT", "FINAL_INCREMENTAL_AUTH", "NETWORK_FEES_MODEL", "ECOMMERCE_SECURITY_LEVEL_INDICATOR", "PAYMENT_CHANNEL", "PAYMENT_INSTRUMENT", "PIN_PRESENT", "TERMINAL_PARTIAL_APPROVAL_CAPABLE", "STIP_REASON_CODE", "IS_RECURRING", "IS_INSTALLMENT", "TRANSACTION_INTEGRITY_CLASS", "DYNAMIC_CVV_ATC", "STANDIN_APPROVED_BY", "STANDIN_BY", "ORIGINAL_CURRENCY_CODE", "DYNAMIC_CURRENCY_CONVERSION", "CARDHOLDER_BILLING_CONVERSION_RATE", "CARDHOLDER_BILLING_CONVERSION_DATE", "IS_IT_STIP_APPROVAL", "ECOMMERCE_AUTHENTICATION_DATA", "CAVV_RESULT_CODE", "NETWORK_TRANSACTION_AMOUNT_DE_4", "NETWORK_SETTLEMENT_AMOUNT_DE_5", "NETWORK_CARDHOLDER_BILLING_AMOUNT_DE_6", "NETWORK_FEE_AMOUNT_DE_28", "NETWORK_CASHBACK_AMOUNT_OTHER_DE_54", "NETWORK_REPLACEMENT_AMOUNT_OTHER_DE_61", "NETWORK_REPLACEMENT_AMOUNT_DE_95", "ADVICE_DETAIL_CODE", "ASYNC_REQUEST_TOKEN", "TXN_MCC", "EXTRA_FIELDS", "SURCHARGE_FREE_ATM_NETWORK", "NETWORK_PRODUCT_ID", "NETWORK_PROGRAM_ID", "NETWORK_SPEND_QUALIFIER", "THREE_DS_CAVV_VERSION", "THREE_DS_MESSAGE_VERSION", "THREE_DS_AUTHENTICATION_METHOD", "THREE_DS_AUTHENTICATION_STATUS", "MOTO_INDICATOR", "PREAUTH_TIME_LIMIT", "AUTHORIZATION_SOURCE_CODE"])
      unless validator.valid?(attribute_name)
        fail ArgumentError, "invalid value for \"attribute_name\", must be one of #{validator.allowable_values}."
      end
      @attribute_name = attribute_name
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          transaction_token == o.transaction_token &&
          attribute_name == o.attribute_name &&
          attribute_value == o.attribute_value
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [transaction_token, attribute_name, attribute_value].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Marqeta.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
