=begin
#Marqeta Core API

#Simplified management of your payment programs

The version of the OpenAPI document: 3.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.0.0

=end

require 'date'
require 'time'

module Marqeta
  class GpaResponse
    attr_accessor :token

    attr_accessor :amount

    attr_accessor :tags

    attr_accessor :memo

    attr_accessor :fees

    # yyyy-MM-ddTHH:mm:ssZ
    attr_accessor :created_time

    # yyyy-MM-ddTHH:mm:ssZ
    attr_accessor :last_modified_time

    attr_accessor :transaction_token

    attr_accessor :state

    attr_accessor :response

    attr_accessor :funding

    attr_accessor :funding_source_token

    attr_accessor :funding_source_address_token

    attr_accessor :jit_funding

    attr_accessor :user_token

    attr_accessor :business_token

    attr_accessor :currency_code

    attr_accessor :gateway_token

    attr_accessor :gateway_message

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'token' => :'token',
        :'amount' => :'amount',
        :'tags' => :'tags',
        :'memo' => :'memo',
        :'fees' => :'fees',
        :'created_time' => :'created_time',
        :'last_modified_time' => :'last_modified_time',
        :'transaction_token' => :'transaction_token',
        :'state' => :'state',
        :'response' => :'response',
        :'funding' => :'funding',
        :'funding_source_token' => :'funding_source_token',
        :'funding_source_address_token' => :'funding_source_address_token',
        :'jit_funding' => :'jit_funding',
        :'user_token' => :'user_token',
        :'business_token' => :'business_token',
        :'currency_code' => :'currency_code',
        :'gateway_token' => :'gateway_token',
        :'gateway_message' => :'gateway_message'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'token' => :'String',
        :'amount' => :'Float',
        :'tags' => :'String',
        :'memo' => :'String',
        :'fees' => :'Array<FeeDetail>',
        :'created_time' => :'Time',
        :'last_modified_time' => :'Time',
        :'transaction_token' => :'String',
        :'state' => :'String',
        :'response' => :'Response',
        :'funding' => :'Funding',
        :'funding_source_token' => :'String',
        :'funding_source_address_token' => :'String',
        :'jit_funding' => :'JitFundingApi',
        :'user_token' => :'String',
        :'business_token' => :'String',
        :'currency_code' => :'String',
        :'gateway_token' => :'Integer',
        :'gateway_message' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Marqeta::GpaResponse` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Marqeta::GpaResponse`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'token')
        self.token = attributes[:'token']
      end

      if attributes.key?(:'amount')
        self.amount = attributes[:'amount']
      end

      if attributes.key?(:'tags')
        self.tags = attributes[:'tags']
      end

      if attributes.key?(:'memo')
        self.memo = attributes[:'memo']
      end

      if attributes.key?(:'fees')
        if (value = attributes[:'fees']).is_a?(Array)
          self.fees = value
        end
      end

      if attributes.key?(:'created_time')
        self.created_time = attributes[:'created_time']
      end

      if attributes.key?(:'last_modified_time')
        self.last_modified_time = attributes[:'last_modified_time']
      end

      if attributes.key?(:'transaction_token')
        self.transaction_token = attributes[:'transaction_token']
      end

      if attributes.key?(:'state')
        self.state = attributes[:'state']
      end

      if attributes.key?(:'response')
        self.response = attributes[:'response']
      end

      if attributes.key?(:'funding')
        self.funding = attributes[:'funding']
      end

      if attributes.key?(:'funding_source_token')
        self.funding_source_token = attributes[:'funding_source_token']
      end

      if attributes.key?(:'funding_source_address_token')
        self.funding_source_address_token = attributes[:'funding_source_address_token']
      end

      if attributes.key?(:'jit_funding')
        self.jit_funding = attributes[:'jit_funding']
      end

      if attributes.key?(:'user_token')
        self.user_token = attributes[:'user_token']
      end

      if attributes.key?(:'business_token')
        self.business_token = attributes[:'business_token']
      end

      if attributes.key?(:'currency_code')
        self.currency_code = attributes[:'currency_code']
      end

      if attributes.key?(:'gateway_token')
        self.gateway_token = attributes[:'gateway_token']
      end

      if attributes.key?(:'gateway_message')
        self.gateway_message = attributes[:'gateway_message']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @token.nil?
        invalid_properties.push('invalid value for "token", token cannot be nil.')
      end

      if @amount.nil?
        invalid_properties.push('invalid value for "amount", amount cannot be nil.')
      end

      if @created_time.nil?
        invalid_properties.push('invalid value for "created_time", created_time cannot be nil.')
      end

      if @last_modified_time.nil?
        invalid_properties.push('invalid value for "last_modified_time", last_modified_time cannot be nil.')
      end

      if @transaction_token.nil?
        invalid_properties.push('invalid value for "transaction_token", transaction_token cannot be nil.')
      end

      if @state.nil?
        invalid_properties.push('invalid value for "state", state cannot be nil.')
      end

      if @response.nil?
        invalid_properties.push('invalid value for "response", response cannot be nil.')
      end

      if @funding.nil?
        invalid_properties.push('invalid value for "funding", funding cannot be nil.')
      end

      if @funding_source_token.nil?
        invalid_properties.push('invalid value for "funding_source_token", funding_source_token cannot be nil.')
      end

      if @currency_code.nil?
        invalid_properties.push('invalid value for "currency_code", currency_code cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @token.nil?
      return false if @amount.nil?
      return false if @created_time.nil?
      return false if @last_modified_time.nil?
      return false if @transaction_token.nil?
      return false if @state.nil?
      return false if @response.nil?
      return false if @funding.nil?
      return false if @funding_source_token.nil?
      return false if @currency_code.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          token == o.token &&
          amount == o.amount &&
          tags == o.tags &&
          memo == o.memo &&
          fees == o.fees &&
          created_time == o.created_time &&
          last_modified_time == o.last_modified_time &&
          transaction_token == o.transaction_token &&
          state == o.state &&
          response == o.response &&
          funding == o.funding &&
          funding_source_token == o.funding_source_token &&
          funding_source_address_token == o.funding_source_address_token &&
          jit_funding == o.jit_funding &&
          user_token == o.user_token &&
          business_token == o.business_token &&
          currency_code == o.currency_code &&
          gateway_token == o.gateway_token &&
          gateway_message == o.gateway_message
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [token, amount, tags, memo, fees, created_time, last_modified_time, transaction_token, state, response, funding, funding_source_token, funding_source_address_token, jit_funding, user_token, business_token, currency_code, gateway_token, gateway_message].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Marqeta.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
