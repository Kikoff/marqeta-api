=begin
#Marqeta Core API

#Simplified management of your payment programs

The version of the OpenAPI document: 3.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.0.0

=end

require 'date'
require 'time'

module Marqeta
  class MsaReturns
    attr_accessor :token

    attr_accessor :user_token

    attr_accessor :business_token

    attr_accessor :order_balances

    attr_accessor :amount

    # yyyy-MM-ddThh:mm:ssZ
    attr_accessor :last_transaction_date

    # yyyy-MM-ddThh:mm:ssZ
    attr_accessor :start_date

    # yyyy-MM-ddThh:mm:ssZ
    attr_accessor :end_date

    attr_accessor :currency_code

    attr_accessor :active

    attr_accessor :reward_amount

    attr_accessor :reward_trigger_amount

    attr_accessor :unloaded_amount

    attr_accessor :campaign_token

    attr_accessor :funding

    # yyyy-MM-ddTHH:mm:ssZ
    attr_accessor :created_time

    # yyyy-MM-ddTHH:mm:ssZ
    attr_accessor :last_modified_time

    attr_accessor :aggregated_balances

    attr_accessor :original_order_token

    attr_accessor :transaction_token

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'token' => :'token',
        :'user_token' => :'user_token',
        :'business_token' => :'business_token',
        :'order_balances' => :'order_balances',
        :'amount' => :'amount',
        :'last_transaction_date' => :'last_transaction_date',
        :'start_date' => :'start_date',
        :'end_date' => :'end_date',
        :'currency_code' => :'currency_code',
        :'active' => :'active',
        :'reward_amount' => :'reward_amount',
        :'reward_trigger_amount' => :'reward_trigger_amount',
        :'unloaded_amount' => :'unloaded_amount',
        :'campaign_token' => :'campaign_token',
        :'funding' => :'funding',
        :'created_time' => :'created_time',
        :'last_modified_time' => :'last_modified_time',
        :'aggregated_balances' => :'aggregated_balances',
        :'original_order_token' => :'original_order_token',
        :'transaction_token' => :'transaction_token'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'token' => :'String',
        :'user_token' => :'String',
        :'business_token' => :'String',
        :'order_balances' => :'MsaBalances',
        :'amount' => :'Float',
        :'last_transaction_date' => :'Time',
        :'start_date' => :'Time',
        :'end_date' => :'Time',
        :'currency_code' => :'String',
        :'active' => :'Boolean',
        :'reward_amount' => :'Float',
        :'reward_trigger_amount' => :'Float',
        :'unloaded_amount' => :'Float',
        :'campaign_token' => :'String',
        :'funding' => :'Funding',
        :'created_time' => :'Time',
        :'last_modified_time' => :'Time',
        :'aggregated_balances' => :'MsaAggregatedBalances',
        :'original_order_token' => :'String',
        :'transaction_token' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Marqeta::MsaReturns` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Marqeta::MsaReturns`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'token')
        self.token = attributes[:'token']
      end

      if attributes.key?(:'user_token')
        self.user_token = attributes[:'user_token']
      end

      if attributes.key?(:'business_token')
        self.business_token = attributes[:'business_token']
      end

      if attributes.key?(:'order_balances')
        self.order_balances = attributes[:'order_balances']
      end

      if attributes.key?(:'amount')
        self.amount = attributes[:'amount']
      end

      if attributes.key?(:'last_transaction_date')
        self.last_transaction_date = attributes[:'last_transaction_date']
      end

      if attributes.key?(:'start_date')
        self.start_date = attributes[:'start_date']
      end

      if attributes.key?(:'end_date')
        self.end_date = attributes[:'end_date']
      end

      if attributes.key?(:'currency_code')
        self.currency_code = attributes[:'currency_code']
      end

      if attributes.key?(:'active')
        self.active = attributes[:'active']
      else
        self.active = false
      end

      if attributes.key?(:'reward_amount')
        self.reward_amount = attributes[:'reward_amount']
      end

      if attributes.key?(:'reward_trigger_amount')
        self.reward_trigger_amount = attributes[:'reward_trigger_amount']
      end

      if attributes.key?(:'unloaded_amount')
        self.unloaded_amount = attributes[:'unloaded_amount']
      end

      if attributes.key?(:'campaign_token')
        self.campaign_token = attributes[:'campaign_token']
      end

      if attributes.key?(:'funding')
        self.funding = attributes[:'funding']
      end

      if attributes.key?(:'created_time')
        self.created_time = attributes[:'created_time']
      end

      if attributes.key?(:'last_modified_time')
        self.last_modified_time = attributes[:'last_modified_time']
      end

      if attributes.key?(:'aggregated_balances')
        self.aggregated_balances = attributes[:'aggregated_balances']
      end

      if attributes.key?(:'original_order_token')
        self.original_order_token = attributes[:'original_order_token']
      end

      if attributes.key?(:'transaction_token')
        self.transaction_token = attributes[:'transaction_token']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @order_balances.nil?
        invalid_properties.push('invalid value for "order_balances", order_balances cannot be nil.')
      end

      if @amount.nil?
        invalid_properties.push('invalid value for "amount", amount cannot be nil.')
      end

      if @last_transaction_date.nil?
        invalid_properties.push('invalid value for "last_transaction_date", last_transaction_date cannot be nil.')
      end

      if @currency_code.nil?
        invalid_properties.push('invalid value for "currency_code", currency_code cannot be nil.')
      end

      if @active.nil?
        invalid_properties.push('invalid value for "active", active cannot be nil.')
      end

      if @reward_amount.nil?
        invalid_properties.push('invalid value for "reward_amount", reward_amount cannot be nil.')
      end

      if @reward_trigger_amount.nil?
        invalid_properties.push('invalid value for "reward_trigger_amount", reward_trigger_amount cannot be nil.')
      end

      if @campaign_token.nil?
        invalid_properties.push('invalid value for "campaign_token", campaign_token cannot be nil.')
      end

      if @funding.nil?
        invalid_properties.push('invalid value for "funding", funding cannot be nil.')
      end

      if @created_time.nil?
        invalid_properties.push('invalid value for "created_time", created_time cannot be nil.')
      end

      if @last_modified_time.nil?
        invalid_properties.push('invalid value for "last_modified_time", last_modified_time cannot be nil.')
      end

      if @aggregated_balances.nil?
        invalid_properties.push('invalid value for "aggregated_balances", aggregated_balances cannot be nil.')
      end

      if @original_order_token.nil?
        invalid_properties.push('invalid value for "original_order_token", original_order_token cannot be nil.')
      end

      if @transaction_token.nil?
        invalid_properties.push('invalid value for "transaction_token", transaction_token cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @order_balances.nil?
      return false if @amount.nil?
      return false if @last_transaction_date.nil?
      return false if @currency_code.nil?
      return false if @active.nil?
      return false if @reward_amount.nil?
      return false if @reward_trigger_amount.nil?
      return false if @campaign_token.nil?
      return false if @funding.nil?
      return false if @created_time.nil?
      return false if @last_modified_time.nil?
      return false if @aggregated_balances.nil?
      return false if @original_order_token.nil?
      return false if @transaction_token.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          token == o.token &&
          user_token == o.user_token &&
          business_token == o.business_token &&
          order_balances == o.order_balances &&
          amount == o.amount &&
          last_transaction_date == o.last_transaction_date &&
          start_date == o.start_date &&
          end_date == o.end_date &&
          currency_code == o.currency_code &&
          active == o.active &&
          reward_amount == o.reward_amount &&
          reward_trigger_amount == o.reward_trigger_amount &&
          unloaded_amount == o.unloaded_amount &&
          campaign_token == o.campaign_token &&
          funding == o.funding &&
          created_time == o.created_time &&
          last_modified_time == o.last_modified_time &&
          aggregated_balances == o.aggregated_balances &&
          original_order_token == o.original_order_token &&
          transaction_token == o.transaction_token
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [token, user_token, business_token, order_balances, amount, last_transaction_date, start_date, end_date, currency_code, active, reward_amount, reward_trigger_amount, unloaded_amount, campaign_token, funding, created_time, last_modified_time, aggregated_balances, original_order_token, transaction_token].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Marqeta.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
