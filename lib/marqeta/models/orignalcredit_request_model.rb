=begin
#Marqeta Core API

#Simplified management of your payment programs

The version of the OpenAPI document: 3.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.0.0

=end

require 'date'
require 'time'

module Marqeta
  class OrignalcreditRequestModel
    attr_accessor :amount

    attr_accessor :card_token

    attr_accessor :mid

    attr_accessor :screening_score

    attr_accessor :card_acceptor

    attr_accessor :type

    attr_accessor :sender_data

    attr_accessor :webhook

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'amount' => :'amount',
        :'card_token' => :'card_token',
        :'mid' => :'mid',
        :'screening_score' => :'screening_score',
        :'card_acceptor' => :'card_acceptor',
        :'type' => :'type',
        :'sender_data' => :'sender_data',
        :'webhook' => :'webhook'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'amount' => :'Float',
        :'card_token' => :'String',
        :'mid' => :'String',
        :'screening_score' => :'String',
        :'card_acceptor' => :'CardAcceptorModel',
        :'type' => :'String',
        :'sender_data' => :'OriginalCreditSenderData',
        :'webhook' => :'Webhook'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Marqeta::OrignalcreditRequestModel` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Marqeta::OrignalcreditRequestModel`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'amount')
        self.amount = attributes[:'amount']
      end

      if attributes.key?(:'card_token')
        self.card_token = attributes[:'card_token']
      end

      if attributes.key?(:'mid')
        self.mid = attributes[:'mid']
      end

      if attributes.key?(:'screening_score')
        self.screening_score = attributes[:'screening_score']
      end

      if attributes.key?(:'card_acceptor')
        self.card_acceptor = attributes[:'card_acceptor']
      end

      if attributes.key?(:'type')
        self.type = attributes[:'type']
      end

      if attributes.key?(:'sender_data')
        self.sender_data = attributes[:'sender_data']
      end

      if attributes.key?(:'webhook')
        self.webhook = attributes[:'webhook']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @amount.nil?
        invalid_properties.push('invalid value for "amount", amount cannot be nil.')
      end

      if @card_token.nil?
        invalid_properties.push('invalid value for "card_token", card_token cannot be nil.')
      end

      if @card_token.to_s.length > 36
        invalid_properties.push('invalid value for "card_token", the character length must be smaller than or equal to 36.')
      end

      if @card_token.to_s.length < 1
        invalid_properties.push('invalid value for "card_token", the character length must be great than or equal to 1.')
      end

      if @mid.nil?
        invalid_properties.push('invalid value for "mid", mid cannot be nil.')
      end

      if @mid.to_s.length > 50
        invalid_properties.push('invalid value for "mid", the character length must be smaller than or equal to 50.')
      end

      if @mid.to_s.length < 1
        invalid_properties.push('invalid value for "mid", the character length must be great than or equal to 1.')
      end

      if @type.nil?
        invalid_properties.push('invalid value for "type", type cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @amount.nil?
      return false if @card_token.nil?
      return false if @card_token.to_s.length > 36
      return false if @card_token.to_s.length < 1
      return false if @mid.nil?
      return false if @mid.to_s.length > 50
      return false if @mid.to_s.length < 1
      return false if @type.nil?
      type_validator = EnumAttributeValidator.new('String', ["account_to_account", "person_to_person", "prepaid", "wallet_transfer", "money_transfer_by_bank", "business_to_business", "disbursement", "government_disbursement", "gambling_payout", "loyalty", "merchant_disbursement", "online_gambling_payout", "pension_disbursement", "prepaid_loads", "card_bill_payment", "bill_payment", "cash_claim", "cash_in", "cash_out", "mobile_air_time_payment", "money_transfer_by_merchant", "face_to_face_merchant_payment", "government_payment", "payments_goods_services"])
      return false unless type_validator.valid?(@type)
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] card_token Value to be assigned
    def card_token=(card_token)
      if card_token.nil?
        fail ArgumentError, 'card_token cannot be nil'
      end

      if card_token.to_s.length > 36
        fail ArgumentError, 'invalid value for "card_token", the character length must be smaller than or equal to 36.'
      end

      if card_token.to_s.length < 1
        fail ArgumentError, 'invalid value for "card_token", the character length must be great than or equal to 1.'
      end

      @card_token = card_token
    end

    # Custom attribute writer method with validation
    # @param [Object] mid Value to be assigned
    def mid=(mid)
      if mid.nil?
        fail ArgumentError, 'mid cannot be nil'
      end

      if mid.to_s.length > 50
        fail ArgumentError, 'invalid value for "mid", the character length must be smaller than or equal to 50.'
      end

      if mid.to_s.length < 1
        fail ArgumentError, 'invalid value for "mid", the character length must be great than or equal to 1.'
      end

      @mid = mid
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] type Object to be assigned
    def type=(type)
      validator = EnumAttributeValidator.new('String', ["account_to_account", "person_to_person", "prepaid", "wallet_transfer", "money_transfer_by_bank", "business_to_business", "disbursement", "government_disbursement", "gambling_payout", "loyalty", "merchant_disbursement", "online_gambling_payout", "pension_disbursement", "prepaid_loads", "card_bill_payment", "bill_payment", "cash_claim", "cash_in", "cash_out", "mobile_air_time_payment", "money_transfer_by_merchant", "face_to_face_merchant_payment", "government_payment", "payments_goods_services"])
      unless validator.valid?(type)
        fail ArgumentError, "invalid value for \"type\", must be one of #{validator.allowable_values}."
      end
      @type = type
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          amount == o.amount &&
          card_token == o.card_token &&
          mid == o.mid &&
          screening_score == o.screening_score &&
          card_acceptor == o.card_acceptor &&
          type == o.type &&
          sender_data == o.sender_data &&
          webhook == o.webhook
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [amount, card_token, mid, screening_score, card_acceptor, type, sender_data, webhook].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Marqeta.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
