=begin
#Marqeta Core API

#Simplified management of your payment programs

The version of the OpenAPI document: 3.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.0.0

=end

require 'date'
require 'time'

module Marqeta
  class OriginalCredit
    attr_accessor :transaction_type

    attr_accessor :funding_source

    attr_accessor :sender_account_type

    attr_accessor :sender_name

    attr_accessor :sender_address

    attr_accessor :sender_city

    attr_accessor :sender_state

    attr_accessor :sender_country

    attr_accessor :screening_score

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'transaction_type' => :'transaction_type',
        :'funding_source' => :'funding_source',
        :'sender_account_type' => :'sender_account_type',
        :'sender_name' => :'sender_name',
        :'sender_address' => :'sender_address',
        :'sender_city' => :'sender_city',
        :'sender_state' => :'sender_state',
        :'sender_country' => :'sender_country',
        :'screening_score' => :'screening_score'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'transaction_type' => :'String',
        :'funding_source' => :'String',
        :'sender_account_type' => :'String',
        :'sender_name' => :'String',
        :'sender_address' => :'String',
        :'sender_city' => :'String',
        :'sender_state' => :'String',
        :'sender_country' => :'String',
        :'screening_score' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Marqeta::OriginalCredit` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Marqeta::OriginalCredit`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'transaction_type')
        self.transaction_type = attributes[:'transaction_type']
      end

      if attributes.key?(:'funding_source')
        self.funding_source = attributes[:'funding_source']
      end

      if attributes.key?(:'sender_account_type')
        self.sender_account_type = attributes[:'sender_account_type']
      end

      if attributes.key?(:'sender_name')
        self.sender_name = attributes[:'sender_name']
      end

      if attributes.key?(:'sender_address')
        self.sender_address = attributes[:'sender_address']
      end

      if attributes.key?(:'sender_city')
        self.sender_city = attributes[:'sender_city']
      end

      if attributes.key?(:'sender_state')
        self.sender_state = attributes[:'sender_state']
      end

      if attributes.key?(:'sender_country')
        self.sender_country = attributes[:'sender_country']
      end

      if attributes.key?(:'screening_score')
        self.screening_score = attributes[:'screening_score']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      transaction_type_validator = EnumAttributeValidator.new('String', ["ACCOUNT_TO_ACCOUNT", "PERSON_TO_PERSON", "WALLET_TRANSFER", "MONEY_TRANSFER_BY_BANK", "BUSINESS_TO_BUSINESS", "DISBURSEMENT", "GOVERNMENT_DISBURSEMENT", "GAMBLING_PAYOUT", "LOYALTY", "MERCHANT_DISBURSEMENT", "ONLINE_GAMBLING_PAYOUT", "PENSION_DISBURSEMENT", "PREPAID_LOADS", "CARD_BILL_PAYMENT", "BILL_PAYMENT", "CASH_CLAIM", "CASH_IN", "CASH_OUT", "MOBILE_AIR_TIME_PAYMENT", "MONEY_TRANSFER_BY_MERCHANT", "FACE_TO_FACE_MERCHANT_PAYMENT", "GOVERNMENT_PAYMENT", "PAYMENTS_GOODS_SERVICES", "FUNDS_TRANSFER"])
      return false unless transaction_type_validator.valid?(@transaction_type)
      funding_source_validator = EnumAttributeValidator.new('String', ["CREDIT", "DEBIT", "PREPAID", "DEPOSIT_ACCOUNT", "CASH", "MOBILE_MONEY_ACCOUNT", "NON_VISA_CREDIT"])
      return false unless funding_source_validator.valid?(@funding_source)
      sender_account_type_validator = EnumAttributeValidator.new('String', ["OTHER", "RTN_BANK_ACCOUNT", "IBAN", "CARD_ACCOUNT", "EMAIL", "PHONE_NUMBER", "BANK_ACCOUNT_NUMBER_AND_BANK_IDENTIFICATION_CODE", "WALLET_ID", "SOCIAL_NETWORK_ID"])
      return false unless sender_account_type_validator.valid?(@sender_account_type)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] transaction_type Object to be assigned
    def transaction_type=(transaction_type)
      validator = EnumAttributeValidator.new('String', ["ACCOUNT_TO_ACCOUNT", "PERSON_TO_PERSON", "WALLET_TRANSFER", "MONEY_TRANSFER_BY_BANK", "BUSINESS_TO_BUSINESS", "DISBURSEMENT", "GOVERNMENT_DISBURSEMENT", "GAMBLING_PAYOUT", "LOYALTY", "MERCHANT_DISBURSEMENT", "ONLINE_GAMBLING_PAYOUT", "PENSION_DISBURSEMENT", "PREPAID_LOADS", "CARD_BILL_PAYMENT", "BILL_PAYMENT", "CASH_CLAIM", "CASH_IN", "CASH_OUT", "MOBILE_AIR_TIME_PAYMENT", "MONEY_TRANSFER_BY_MERCHANT", "FACE_TO_FACE_MERCHANT_PAYMENT", "GOVERNMENT_PAYMENT", "PAYMENTS_GOODS_SERVICES", "FUNDS_TRANSFER"])
      unless validator.valid?(transaction_type)
        fail ArgumentError, "invalid value for \"transaction_type\", must be one of #{validator.allowable_values}."
      end
      @transaction_type = transaction_type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] funding_source Object to be assigned
    def funding_source=(funding_source)
      validator = EnumAttributeValidator.new('String', ["CREDIT", "DEBIT", "PREPAID", "DEPOSIT_ACCOUNT", "CASH", "MOBILE_MONEY_ACCOUNT", "NON_VISA_CREDIT"])
      unless validator.valid?(funding_source)
        fail ArgumentError, "invalid value for \"funding_source\", must be one of #{validator.allowable_values}."
      end
      @funding_source = funding_source
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] sender_account_type Object to be assigned
    def sender_account_type=(sender_account_type)
      validator = EnumAttributeValidator.new('String', ["OTHER", "RTN_BANK_ACCOUNT", "IBAN", "CARD_ACCOUNT", "EMAIL", "PHONE_NUMBER", "BANK_ACCOUNT_NUMBER_AND_BANK_IDENTIFICATION_CODE", "WALLET_ID", "SOCIAL_NETWORK_ID"])
      unless validator.valid?(sender_account_type)
        fail ArgumentError, "invalid value for \"sender_account_type\", must be one of #{validator.allowable_values}."
      end
      @sender_account_type = sender_account_type
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          transaction_type == o.transaction_type &&
          funding_source == o.funding_source &&
          sender_account_type == o.sender_account_type &&
          sender_name == o.sender_name &&
          sender_address == o.sender_address &&
          sender_city == o.sender_city &&
          sender_state == o.sender_state &&
          sender_country == o.sender_country &&
          screening_score == o.screening_score
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [transaction_type, funding_source, sender_account_type, sender_name, sender_address, sender_city, sender_state, sender_country, screening_score].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Marqeta.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
