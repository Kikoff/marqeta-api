=begin
#Marqeta Core API

#Simplified management of your payment programs

The version of the OpenAPI document: 3.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.0.0

=end

require 'date'
require 'time'

module Marqeta
  class CardholderAddressResponse
    # Required if 'business_token' is not specified
    attr_accessor :user_token

    # Required if 'user_token' is not specified
    attr_accessor :business_token

    attr_accessor :token

    attr_accessor :first_name

    attr_accessor :last_name

    attr_accessor :address_1

    attr_accessor :address_2

    attr_accessor :city

    attr_accessor :state

    attr_accessor :zip

    attr_accessor :postal_code

    attr_accessor :country

    attr_accessor :phone

    attr_accessor :is_default_address

    attr_accessor :active

    # yyyy-MM-ddTHH:mm:ssZ
    attr_accessor :created_time

    # yyyy-MM-ddTHH:mm:ssZ
    attr_accessor :last_modified_time

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'user_token' => :'user_token',
        :'business_token' => :'business_token',
        :'token' => :'token',
        :'first_name' => :'first_name',
        :'last_name' => :'last_name',
        :'address_1' => :'address_1',
        :'address_2' => :'address_2',
        :'city' => :'city',
        :'state' => :'state',
        :'zip' => :'zip',
        :'postal_code' => :'postal_code',
        :'country' => :'country',
        :'phone' => :'phone',
        :'is_default_address' => :'is_default_address',
        :'active' => :'active',
        :'created_time' => :'created_time',
        :'last_modified_time' => :'last_modified_time'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'user_token' => :'String',
        :'business_token' => :'String',
        :'token' => :'String',
        :'first_name' => :'String',
        :'last_name' => :'String',
        :'address_1' => :'String',
        :'address_2' => :'String',
        :'city' => :'String',
        :'state' => :'String',
        :'zip' => :'String',
        :'postal_code' => :'String',
        :'country' => :'String',
        :'phone' => :'String',
        :'is_default_address' => :'Boolean',
        :'active' => :'Boolean',
        :'created_time' => :'Time',
        :'last_modified_time' => :'Time'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Marqeta::CardholderAddressResponse` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Marqeta::CardholderAddressResponse`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'user_token')
        self.user_token = attributes[:'user_token']
      end

      if attributes.key?(:'business_token')
        self.business_token = attributes[:'business_token']
      end

      if attributes.key?(:'token')
        self.token = attributes[:'token']
      end

      if attributes.key?(:'first_name')
        self.first_name = attributes[:'first_name']
      end

      if attributes.key?(:'last_name')
        self.last_name = attributes[:'last_name']
      end

      if attributes.key?(:'address_1')
        self.address_1 = attributes[:'address_1']
      end

      if attributes.key?(:'address_2')
        self.address_2 = attributes[:'address_2']
      end

      if attributes.key?(:'city')
        self.city = attributes[:'city']
      end

      if attributes.key?(:'state')
        self.state = attributes[:'state']
      end

      if attributes.key?(:'zip')
        self.zip = attributes[:'zip']
      end

      if attributes.key?(:'postal_code')
        self.postal_code = attributes[:'postal_code']
      end

      if attributes.key?(:'country')
        self.country = attributes[:'country']
      end

      if attributes.key?(:'phone')
        self.phone = attributes[:'phone']
      end

      if attributes.key?(:'is_default_address')
        self.is_default_address = attributes[:'is_default_address']
      else
        self.is_default_address = false
      end

      if attributes.key?(:'active')
        self.active = attributes[:'active']
      else
        self.active = false
      end

      if attributes.key?(:'created_time')
        self.created_time = attributes[:'created_time']
      end

      if attributes.key?(:'last_modified_time')
        self.last_modified_time = attributes[:'last_modified_time']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if !@user_token.nil? && @user_token.to_s.length > 36
        invalid_properties.push('invalid value for "user_token", the character length must be smaller than or equal to 36.')
      end

      if !@user_token.nil? && @user_token.to_s.length < 1
        invalid_properties.push('invalid value for "user_token", the character length must be great than or equal to 1.')
      end

      if !@business_token.nil? && @business_token.to_s.length > 36
        invalid_properties.push('invalid value for "business_token", the character length must be smaller than or equal to 36.')
      end

      if !@business_token.nil? && @business_token.to_s.length < 1
        invalid_properties.push('invalid value for "business_token", the character length must be great than or equal to 1.')
      end

      if @token.nil?
        invalid_properties.push('invalid value for "token", token cannot be nil.')
      end

      if @token.to_s.length > 36
        invalid_properties.push('invalid value for "token", the character length must be smaller than or equal to 36.')
      end

      if @token.to_s.length < 1
        invalid_properties.push('invalid value for "token", the character length must be great than or equal to 1.')
      end

      if @first_name.nil?
        invalid_properties.push('invalid value for "first_name", first_name cannot be nil.')
      end

      if @first_name.to_s.length > 40
        invalid_properties.push('invalid value for "first_name", the character length must be smaller than or equal to 40.')
      end

      if @first_name.to_s.length < 0
        invalid_properties.push('invalid value for "first_name", the character length must be great than or equal to 0.')
      end

      if @last_name.nil?
        invalid_properties.push('invalid value for "last_name", last_name cannot be nil.')
      end

      if @last_name.to_s.length > 40
        invalid_properties.push('invalid value for "last_name", the character length must be smaller than or equal to 40.')
      end

      if @last_name.to_s.length < 0
        invalid_properties.push('invalid value for "last_name", the character length must be great than or equal to 0.')
      end

      if @address_1.nil?
        invalid_properties.push('invalid value for "address_1", address_1 cannot be nil.')
      end

      if @address_1.to_s.length > 255
        invalid_properties.push('invalid value for "address_1", the character length must be smaller than or equal to 255.')
      end

      if @address_1.to_s.length < 0
        invalid_properties.push('invalid value for "address_1", the character length must be great than or equal to 0.')
      end

      if !@address_2.nil? && @address_2.to_s.length > 255
        invalid_properties.push('invalid value for "address_2", the character length must be smaller than or equal to 255.')
      end

      if !@address_2.nil? && @address_2.to_s.length < 0
        invalid_properties.push('invalid value for "address_2", the character length must be great than or equal to 0.')
      end

      if @city.nil?
        invalid_properties.push('invalid value for "city", city cannot be nil.')
      end

      if @city.to_s.length > 40
        invalid_properties.push('invalid value for "city", the character length must be smaller than or equal to 40.')
      end

      if @city.to_s.length < 0
        invalid_properties.push('invalid value for "city", the character length must be great than or equal to 0.')
      end

      if @state.nil?
        invalid_properties.push('invalid value for "state", state cannot be nil.')
      end

      if @state.to_s.length > 2
        invalid_properties.push('invalid value for "state", the character length must be smaller than or equal to 2.')
      end

      if @state.to_s.length < 0
        invalid_properties.push('invalid value for "state", the character length must be great than or equal to 0.')
      end

      if @zip.nil?
        invalid_properties.push('invalid value for "zip", zip cannot be nil.')
      end

      if @zip.to_s.length > 10
        invalid_properties.push('invalid value for "zip", the character length must be smaller than or equal to 10.')
      end

      if @zip.to_s.length < 0
        invalid_properties.push('invalid value for "zip", the character length must be great than or equal to 0.')
      end

      if @postal_code.nil?
        invalid_properties.push('invalid value for "postal_code", postal_code cannot be nil.')
      end

      if @postal_code.to_s.length > 10
        invalid_properties.push('invalid value for "postal_code", the character length must be smaller than or equal to 10.')
      end

      if @postal_code.to_s.length < 0
        invalid_properties.push('invalid value for "postal_code", the character length must be great than or equal to 0.')
      end

      if @country.nil?
        invalid_properties.push('invalid value for "country", country cannot be nil.')
      end

      if @country.to_s.length > 40
        invalid_properties.push('invalid value for "country", the character length must be smaller than or equal to 40.')
      end

      if @country.to_s.length < 1
        invalid_properties.push('invalid value for "country", the character length must be great than or equal to 1.')
      end

      if !@phone.nil? && @phone.to_s.length > 255
        invalid_properties.push('invalid value for "phone", the character length must be smaller than or equal to 255.')
      end

      if !@phone.nil? && @phone.to_s.length < 0
        invalid_properties.push('invalid value for "phone", the character length must be great than or equal to 0.')
      end

      if @created_time.nil?
        invalid_properties.push('invalid value for "created_time", created_time cannot be nil.')
      end

      if @last_modified_time.nil?
        invalid_properties.push('invalid value for "last_modified_time", last_modified_time cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if !@user_token.nil? && @user_token.to_s.length > 36
      return false if !@user_token.nil? && @user_token.to_s.length < 1
      return false if !@business_token.nil? && @business_token.to_s.length > 36
      return false if !@business_token.nil? && @business_token.to_s.length < 1
      return false if @token.nil?
      return false if @token.to_s.length > 36
      return false if @token.to_s.length < 1
      return false if @first_name.nil?
      return false if @first_name.to_s.length > 40
      return false if @first_name.to_s.length < 0
      return false if @last_name.nil?
      return false if @last_name.to_s.length > 40
      return false if @last_name.to_s.length < 0
      return false if @address_1.nil?
      return false if @address_1.to_s.length > 255
      return false if @address_1.to_s.length < 0
      return false if !@address_2.nil? && @address_2.to_s.length > 255
      return false if !@address_2.nil? && @address_2.to_s.length < 0
      return false if @city.nil?
      return false if @city.to_s.length > 40
      return false if @city.to_s.length < 0
      return false if @state.nil?
      return false if @state.to_s.length > 2
      return false if @state.to_s.length < 0
      return false if @zip.nil?
      return false if @zip.to_s.length > 10
      return false if @zip.to_s.length < 0
      return false if @postal_code.nil?
      return false if @postal_code.to_s.length > 10
      return false if @postal_code.to_s.length < 0
      return false if @country.nil?
      return false if @country.to_s.length > 40
      return false if @country.to_s.length < 1
      return false if !@phone.nil? && @phone.to_s.length > 255
      return false if !@phone.nil? && @phone.to_s.length < 0
      return false if @created_time.nil?
      return false if @last_modified_time.nil?
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] user_token Value to be assigned
    def user_token=(user_token)
      if !user_token.nil? && user_token.to_s.length > 36
        fail ArgumentError, 'invalid value for "user_token", the character length must be smaller than or equal to 36.'
      end

      if !user_token.nil? && user_token.to_s.length < 1
        fail ArgumentError, 'invalid value for "user_token", the character length must be great than or equal to 1.'
      end

      @user_token = user_token
    end

    # Custom attribute writer method with validation
    # @param [Object] business_token Value to be assigned
    def business_token=(business_token)
      if !business_token.nil? && business_token.to_s.length > 36
        fail ArgumentError, 'invalid value for "business_token", the character length must be smaller than or equal to 36.'
      end

      if !business_token.nil? && business_token.to_s.length < 1
        fail ArgumentError, 'invalid value for "business_token", the character length must be great than or equal to 1.'
      end

      @business_token = business_token
    end

    # Custom attribute writer method with validation
    # @param [Object] token Value to be assigned
    def token=(token)
      if token.nil?
        fail ArgumentError, 'token cannot be nil'
      end

      if token.to_s.length > 36
        fail ArgumentError, 'invalid value for "token", the character length must be smaller than or equal to 36.'
      end

      if token.to_s.length < 1
        fail ArgumentError, 'invalid value for "token", the character length must be great than or equal to 1.'
      end

      @token = token
    end

    # Custom attribute writer method with validation
    # @param [Object] first_name Value to be assigned
    def first_name=(first_name)
      if first_name.nil?
        fail ArgumentError, 'first_name cannot be nil'
      end

      if first_name.to_s.length > 40
        fail ArgumentError, 'invalid value for "first_name", the character length must be smaller than or equal to 40.'
      end

      if first_name.to_s.length < 0
        fail ArgumentError, 'invalid value for "first_name", the character length must be great than or equal to 0.'
      end

      @first_name = first_name
    end

    # Custom attribute writer method with validation
    # @param [Object] last_name Value to be assigned
    def last_name=(last_name)
      if last_name.nil?
        fail ArgumentError, 'last_name cannot be nil'
      end

      if last_name.to_s.length > 40
        fail ArgumentError, 'invalid value for "last_name", the character length must be smaller than or equal to 40.'
      end

      if last_name.to_s.length < 0
        fail ArgumentError, 'invalid value for "last_name", the character length must be great than or equal to 0.'
      end

      @last_name = last_name
    end

    # Custom attribute writer method with validation
    # @param [Object] address_1 Value to be assigned
    def address_1=(address_1)
      if address_1.nil?
        fail ArgumentError, 'address_1 cannot be nil'
      end

      if address_1.to_s.length > 255
        fail ArgumentError, 'invalid value for "address_1", the character length must be smaller than or equal to 255.'
      end

      if address_1.to_s.length < 0
        fail ArgumentError, 'invalid value for "address_1", the character length must be great than or equal to 0.'
      end

      @address_1 = address_1
    end

    # Custom attribute writer method with validation
    # @param [Object] address_2 Value to be assigned
    def address_2=(address_2)
      if !address_2.nil? && address_2.to_s.length > 255
        fail ArgumentError, 'invalid value for "address_2", the character length must be smaller than or equal to 255.'
      end

      if !address_2.nil? && address_2.to_s.length < 0
        fail ArgumentError, 'invalid value for "address_2", the character length must be great than or equal to 0.'
      end

      @address_2 = address_2
    end

    # Custom attribute writer method with validation
    # @param [Object] city Value to be assigned
    def city=(city)
      if city.nil?
        fail ArgumentError, 'city cannot be nil'
      end

      if city.to_s.length > 40
        fail ArgumentError, 'invalid value for "city", the character length must be smaller than or equal to 40.'
      end

      if city.to_s.length < 0
        fail ArgumentError, 'invalid value for "city", the character length must be great than or equal to 0.'
      end

      @city = city
    end

    # Custom attribute writer method with validation
    # @param [Object] state Value to be assigned
    def state=(state)
      if state.nil?
        fail ArgumentError, 'state cannot be nil'
      end

      if state.to_s.length > 2
        fail ArgumentError, 'invalid value for "state", the character length must be smaller than or equal to 2.'
      end

      if state.to_s.length < 0
        fail ArgumentError, 'invalid value for "state", the character length must be great than or equal to 0.'
      end

      @state = state
    end

    # Custom attribute writer method with validation
    # @param [Object] zip Value to be assigned
    def zip=(zip)
      if zip.nil?
        fail ArgumentError, 'zip cannot be nil'
      end

      if zip.to_s.length > 10
        fail ArgumentError, 'invalid value for "zip", the character length must be smaller than or equal to 10.'
      end

      if zip.to_s.length < 0
        fail ArgumentError, 'invalid value for "zip", the character length must be great than or equal to 0.'
      end

      @zip = zip
    end

    # Custom attribute writer method with validation
    # @param [Object] postal_code Value to be assigned
    def postal_code=(postal_code)
      if postal_code.nil?
        fail ArgumentError, 'postal_code cannot be nil'
      end

      if postal_code.to_s.length > 10
        fail ArgumentError, 'invalid value for "postal_code", the character length must be smaller than or equal to 10.'
      end

      if postal_code.to_s.length < 0
        fail ArgumentError, 'invalid value for "postal_code", the character length must be great than or equal to 0.'
      end

      @postal_code = postal_code
    end

    # Custom attribute writer method with validation
    # @param [Object] country Value to be assigned
    def country=(country)
      if country.nil?
        fail ArgumentError, 'country cannot be nil'
      end

      if country.to_s.length > 40
        fail ArgumentError, 'invalid value for "country", the character length must be smaller than or equal to 40.'
      end

      if country.to_s.length < 1
        fail ArgumentError, 'invalid value for "country", the character length must be great than or equal to 1.'
      end

      @country = country
    end

    # Custom attribute writer method with validation
    # @param [Object] phone Value to be assigned
    def phone=(phone)
      if !phone.nil? && phone.to_s.length > 255
        fail ArgumentError, 'invalid value for "phone", the character length must be smaller than or equal to 255.'
      end

      if !phone.nil? && phone.to_s.length < 0
        fail ArgumentError, 'invalid value for "phone", the character length must be great than or equal to 0.'
      end

      @phone = phone
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          user_token == o.user_token &&
          business_token == o.business_token &&
          token == o.token &&
          first_name == o.first_name &&
          last_name == o.last_name &&
          address_1 == o.address_1 &&
          address_2 == o.address_2 &&
          city == o.city &&
          state == o.state &&
          zip == o.zip &&
          postal_code == o.postal_code &&
          country == o.country &&
          phone == o.phone &&
          is_default_address == o.is_default_address &&
          active == o.active &&
          created_time == o.created_time &&
          last_modified_time == o.last_modified_time
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [user_token, business_token, token, first_name, last_name, address_1, address_2, city, state, zip, postal_code, country, phone, is_default_address, active, created_time, last_modified_time].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Marqeta.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
