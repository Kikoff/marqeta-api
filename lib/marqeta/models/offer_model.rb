=begin
#Marqeta Core API

#Simplified management of your payment programs

The version of the OpenAPI document: 3.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.0.0

=end

require 'date'
require 'time'

module Marqeta
  class OfferModel
    attr_accessor :token

    attr_accessor :active

    attr_accessor :name

    attr_accessor :start_date

    attr_accessor :end_date

    attr_accessor :purchase_amount

    attr_accessor :reward_amount

    attr_accessor :reward_trigger_amount

    attr_accessor :campaign_token

    attr_accessor :currency_code

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'token' => :'token',
        :'active' => :'active',
        :'name' => :'name',
        :'start_date' => :'start_date',
        :'end_date' => :'end_date',
        :'purchase_amount' => :'purchase_amount',
        :'reward_amount' => :'reward_amount',
        :'reward_trigger_amount' => :'reward_trigger_amount',
        :'campaign_token' => :'campaign_token',
        :'currency_code' => :'currency_code'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'token' => :'String',
        :'active' => :'Boolean',
        :'name' => :'String',
        :'start_date' => :'Time',
        :'end_date' => :'Time',
        :'purchase_amount' => :'Float',
        :'reward_amount' => :'Float',
        :'reward_trigger_amount' => :'Float',
        :'campaign_token' => :'String',
        :'currency_code' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Marqeta::OfferModel` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Marqeta::OfferModel`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'token')
        self.token = attributes[:'token']
      end

      if attributes.key?(:'active')
        self.active = attributes[:'active']
      else
        self.active = true
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.key?(:'start_date')
        self.start_date = attributes[:'start_date']
      end

      if attributes.key?(:'end_date')
        self.end_date = attributes[:'end_date']
      end

      if attributes.key?(:'purchase_amount')
        self.purchase_amount = attributes[:'purchase_amount']
      end

      if attributes.key?(:'reward_amount')
        self.reward_amount = attributes[:'reward_amount']
      end

      if attributes.key?(:'reward_trigger_amount')
        self.reward_trigger_amount = attributes[:'reward_trigger_amount']
      end

      if attributes.key?(:'campaign_token')
        self.campaign_token = attributes[:'campaign_token']
      end

      if attributes.key?(:'currency_code')
        self.currency_code = attributes[:'currency_code']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if !@token.nil? && @token.to_s.length > 36
        invalid_properties.push('invalid value for "token", the character length must be smaller than or equal to 36.')
      end

      if !@token.nil? && @token.to_s.length < 1
        invalid_properties.push('invalid value for "token", the character length must be great than or equal to 1.')
      end

      if @name.nil?
        invalid_properties.push('invalid value for "name", name cannot be nil.')
      end

      if @name.to_s.length > 255
        invalid_properties.push('invalid value for "name", the character length must be smaller than or equal to 255.')
      end

      if @name.to_s.length < 0
        invalid_properties.push('invalid value for "name", the character length must be great than or equal to 0.')
      end

      if @purchase_amount.nil?
        invalid_properties.push('invalid value for "purchase_amount", purchase_amount cannot be nil.')
      end

      if @reward_amount.nil?
        invalid_properties.push('invalid value for "reward_amount", reward_amount cannot be nil.')
      end

      if @campaign_token.nil?
        invalid_properties.push('invalid value for "campaign_token", campaign_token cannot be nil.')
      end

      if @campaign_token.to_s.length > 36
        invalid_properties.push('invalid value for "campaign_token", the character length must be smaller than or equal to 36.')
      end

      if @campaign_token.to_s.length < 1
        invalid_properties.push('invalid value for "campaign_token", the character length must be great than or equal to 1.')
      end

      if @currency_code.nil?
        invalid_properties.push('invalid value for "currency_code", currency_code cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if !@token.nil? && @token.to_s.length > 36
      return false if !@token.nil? && @token.to_s.length < 1
      return false if @name.nil?
      return false if @name.to_s.length > 255
      return false if @name.to_s.length < 0
      return false if @purchase_amount.nil?
      return false if @reward_amount.nil?
      return false if @campaign_token.nil?
      return false if @campaign_token.to_s.length > 36
      return false if @campaign_token.to_s.length < 1
      return false if @currency_code.nil?
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] token Value to be assigned
    def token=(token)
      if !token.nil? && token.to_s.length > 36
        fail ArgumentError, 'invalid value for "token", the character length must be smaller than or equal to 36.'
      end

      if !token.nil? && token.to_s.length < 1
        fail ArgumentError, 'invalid value for "token", the character length must be great than or equal to 1.'
      end

      @token = token
    end

    # Custom attribute writer method with validation
    # @param [Object] name Value to be assigned
    def name=(name)
      if name.nil?
        fail ArgumentError, 'name cannot be nil'
      end

      if name.to_s.length > 255
        fail ArgumentError, 'invalid value for "name", the character length must be smaller than or equal to 255.'
      end

      if name.to_s.length < 0
        fail ArgumentError, 'invalid value for "name", the character length must be great than or equal to 0.'
      end

      @name = name
    end

    # Custom attribute writer method with validation
    # @param [Object] campaign_token Value to be assigned
    def campaign_token=(campaign_token)
      if campaign_token.nil?
        fail ArgumentError, 'campaign_token cannot be nil'
      end

      if campaign_token.to_s.length > 36
        fail ArgumentError, 'invalid value for "campaign_token", the character length must be smaller than or equal to 36.'
      end

      if campaign_token.to_s.length < 1
        fail ArgumentError, 'invalid value for "campaign_token", the character length must be great than or equal to 1.'
      end

      @campaign_token = campaign_token
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          token == o.token &&
          active == o.active &&
          name == o.name &&
          start_date == o.start_date &&
          end_date == o.end_date &&
          purchase_amount == o.purchase_amount &&
          reward_amount == o.reward_amount &&
          reward_trigger_amount == o.reward_trigger_amount &&
          campaign_token == o.campaign_token &&
          currency_code == o.currency_code
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [token, active, name, start_date, end_date, purchase_amount, reward_amount, reward_trigger_amount, campaign_token, currency_code].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Marqeta.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
