=begin
#Marqeta Core API

#Simplified management of your payment programs

The version of the OpenAPI document: 3.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.0.0

=end

require 'date'
require 'time'

module Marqeta
  class CardProductFulfillmentResponse
    attr_accessor :shipping

    attr_accessor :card_personalization

    attr_accessor :payment_instrument

    attr_accessor :package_id

    attr_accessor :all_zero_card_security_code

    attr_accessor :bin_prefix

    attr_accessor :bulk_ship

    attr_accessor :pan_length

    attr_accessor :fulfillment_provider

    attr_accessor :allow_card_creation

    attr_accessor :uppercase_name_lines

    attr_accessor :enable_offline_pin

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'shipping' => :'shipping',
        :'card_personalization' => :'card_personalization',
        :'payment_instrument' => :'payment_instrument',
        :'package_id' => :'package_id',
        :'all_zero_card_security_code' => :'all_zero_card_security_code',
        :'bin_prefix' => :'bin_prefix',
        :'bulk_ship' => :'bulk_ship',
        :'pan_length' => :'pan_length',
        :'fulfillment_provider' => :'fulfillment_provider',
        :'allow_card_creation' => :'allow_card_creation',
        :'uppercase_name_lines' => :'uppercase_name_lines',
        :'enable_offline_pin' => :'enable_offline_pin'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'shipping' => :'ShippingInformationResponse',
        :'card_personalization' => :'CardPersonalization',
        :'payment_instrument' => :'String',
        :'package_id' => :'String',
        :'all_zero_card_security_code' => :'Boolean',
        :'bin_prefix' => :'String',
        :'bulk_ship' => :'Boolean',
        :'pan_length' => :'String',
        :'fulfillment_provider' => :'String',
        :'allow_card_creation' => :'Boolean',
        :'uppercase_name_lines' => :'Boolean',
        :'enable_offline_pin' => :'Boolean'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Marqeta::CardProductFulfillmentResponse` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Marqeta::CardProductFulfillmentResponse`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'shipping')
        self.shipping = attributes[:'shipping']
      end

      if attributes.key?(:'card_personalization')
        self.card_personalization = attributes[:'card_personalization']
      end

      if attributes.key?(:'payment_instrument')
        self.payment_instrument = attributes[:'payment_instrument']
      else
        self.payment_instrument = 'PHYSICAL_MSR'
      end

      if attributes.key?(:'package_id')
        self.package_id = attributes[:'package_id']
      else
        self.package_id = '0'
      end

      if attributes.key?(:'all_zero_card_security_code')
        self.all_zero_card_security_code = attributes[:'all_zero_card_security_code']
      else
        self.all_zero_card_security_code = false
      end

      if attributes.key?(:'bin_prefix')
        self.bin_prefix = attributes[:'bin_prefix']
      end

      if attributes.key?(:'bulk_ship')
        self.bulk_ship = attributes[:'bulk_ship']
      else
        self.bulk_ship = false
      end

      if attributes.key?(:'pan_length')
        self.pan_length = attributes[:'pan_length']
      end

      if attributes.key?(:'fulfillment_provider')
        self.fulfillment_provider = attributes[:'fulfillment_provider']
      else
        self.fulfillment_provider = 'PERFECTPLASTIC'
      end

      if attributes.key?(:'allow_card_creation')
        self.allow_card_creation = attributes[:'allow_card_creation']
      else
        self.allow_card_creation = true
      end

      if attributes.key?(:'uppercase_name_lines')
        self.uppercase_name_lines = attributes[:'uppercase_name_lines']
      else
        self.uppercase_name_lines = true
      end

      if attributes.key?(:'enable_offline_pin')
        self.enable_offline_pin = attributes[:'enable_offline_pin']
      else
        self.enable_offline_pin = false
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @card_personalization.nil?
        invalid_properties.push('invalid value for "card_personalization", card_personalization cannot be nil.')
      end

      if !@package_id.nil? && @package_id.to_s.length > 50
        invalid_properties.push('invalid value for "package_id", the character length must be smaller than or equal to 50.')
      end

      if !@package_id.nil? && @package_id.to_s.length < 1
        invalid_properties.push('invalid value for "package_id", the character length must be great than or equal to 1.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @card_personalization.nil?
      payment_instrument_validator = EnumAttributeValidator.new('String', ["PHYSICAL_MSR", "PHYSICAL_ICC", "PHYSICAL_CONTACTLESS", "PHYSICAL_COMBO", "VIRTUAL_PAN"])
      return false unless payment_instrument_validator.valid?(@payment_instrument)
      return false if !@package_id.nil? && @package_id.to_s.length > 50
      return false if !@package_id.nil? && @package_id.to_s.length < 1
      fulfillment_provider_validator = EnumAttributeValidator.new('String', ["PERFECTPLASTIC", "ARROWEYE", "IDEMIA", "IDEMIA_UK", "IDEMIA_FR", "IDEMIA_CZ", "IDEMIA_APAC", "IDEMIA_PL", "IDEMIA_AU", "IDEMIA_LA", "GEMALTO", "NITECREST", "OBERTHUR", "ALLPAY"])
      return false unless fulfillment_provider_validator.valid?(@fulfillment_provider)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] payment_instrument Object to be assigned
    def payment_instrument=(payment_instrument)
      validator = EnumAttributeValidator.new('String', ["PHYSICAL_MSR", "PHYSICAL_ICC", "PHYSICAL_CONTACTLESS", "PHYSICAL_COMBO", "VIRTUAL_PAN"])
      unless validator.valid?(payment_instrument)
        fail ArgumentError, "invalid value for \"payment_instrument\", must be one of #{validator.allowable_values}."
      end
      @payment_instrument = payment_instrument
    end

    # Custom attribute writer method with validation
    # @param [Object] package_id Value to be assigned
    def package_id=(package_id)
      if !package_id.nil? && package_id.to_s.length > 50
        fail ArgumentError, 'invalid value for "package_id", the character length must be smaller than or equal to 50.'
      end

      if !package_id.nil? && package_id.to_s.length < 1
        fail ArgumentError, 'invalid value for "package_id", the character length must be great than or equal to 1.'
      end

      @package_id = package_id
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] fulfillment_provider Object to be assigned
    def fulfillment_provider=(fulfillment_provider)
      validator = EnumAttributeValidator.new('String', ["PERFECTPLASTIC", "ARROWEYE", "IDEMIA", "IDEMIA_UK", "IDEMIA_FR", "IDEMIA_CZ", "IDEMIA_APAC", "IDEMIA_PL", "IDEMIA_AU", "IDEMIA_LA", "GEMALTO", "NITECREST", "OBERTHUR", "ALLPAY"])
      unless validator.valid?(fulfillment_provider)
        fail ArgumentError, "invalid value for \"fulfillment_provider\", must be one of #{validator.allowable_values}."
      end
      @fulfillment_provider = fulfillment_provider
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          shipping == o.shipping &&
          card_personalization == o.card_personalization &&
          payment_instrument == o.payment_instrument &&
          package_id == o.package_id &&
          all_zero_card_security_code == o.all_zero_card_security_code &&
          bin_prefix == o.bin_prefix &&
          bulk_ship == o.bulk_ship &&
          pan_length == o.pan_length &&
          fulfillment_provider == o.fulfillment_provider &&
          allow_card_creation == o.allow_card_creation &&
          uppercase_name_lines == o.uppercase_name_lines &&
          enable_offline_pin == o.enable_offline_pin
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [shipping, card_personalization, payment_instrument, package_id, all_zero_card_security_code, bin_prefix, bulk_ship, pan_length, fulfillment_provider, allow_card_creation, uppercase_name_lines, enable_offline_pin].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Marqeta.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
