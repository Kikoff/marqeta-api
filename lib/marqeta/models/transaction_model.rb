=begin
#Marqeta Core API

#Simplified management of your payment programs

The version of the OpenAPI document: 3.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.0.0

=end

require 'date'
require 'time'

module Marqeta
  class TransactionModel
    attr_accessor :identifier

    attr_accessor :token

    attr_accessor :user_token

    attr_accessor :business_token

    attr_accessor :acting_user_token

    attr_accessor :card_token

    attr_accessor :type

    attr_accessor :state

    attr_accessor :duration

    attr_accessor :created_time

    attr_accessor :user_transaction_time

    attr_accessor :settlement_date

    attr_accessor :request_amount

    attr_accessor :amount

    attr_accessor :cash_back_amount

    attr_accessor :currency_conversion

    attr_accessor :issuer_interchange_amount

    attr_accessor :currency_code

    attr_accessor :approval_code

    attr_accessor :response

    attr_accessor :preceding_related_transaction_token

    attr_accessor :preceding_transaction

    attr_accessor :amount_to_be_released

    attr_accessor :incremental_authorization_transaction_tokens

    attr_accessor :merchant

    attr_accessor :store

    attr_accessor :card_acceptor

    attr_accessor :gpa

    attr_accessor :card

    attr_accessor :gpa_order_unload

    attr_accessor :gpa_order

    attr_accessor :program_transfer

    attr_accessor :fee_transfer

    attr_accessor :peer_transfer

    attr_accessor :msa_orders

    attr_accessor :msa_order_unload

    attr_accessor :offer_orders

    attr_accessor :auto_reload

    attr_accessor :direct_deposit

    attr_accessor :polarity

    attr_accessor :real_time_fee_group

    attr_accessor :fee

    attr_accessor :chargeback

    attr_accessor :dispute

    attr_accessor :network

    attr_accessor :subnetwork

    attr_accessor :network_metadata

    attr_accessor :acquirer_fee_amount

    attr_accessor :fees

    attr_accessor :digital_wallet_token

    attr_accessor :user

    attr_accessor :business

    attr_accessor :acquirer

    attr_accessor :fraud

    attr_accessor :pos

    attr_accessor :address_verification

    attr_accessor :card_security_code_verification

    attr_accessor :transaction_metadata

    attr_accessor :original_credit

    attr_accessor :card_holder_model

    attr_accessor :standin_approved_by

    attr_accessor :standin_by

    attr_accessor :standin_reason

    attr_accessor :network_reference_id

    attr_accessor :acquirer_reference_id

    attr_accessor :cardholder_authentication_data

    attr_accessor :transaction_attributes

    attr_accessor :clearing_record_sequence_number

    attr_accessor :issuer_received_time

    attr_accessor :issuer_payment_node

    attr_accessor :program

    attr_accessor :batch_number

    attr_accessor :from_account

    attr_accessor :multi_clearing_sequence_number

    attr_accessor :multi_clearing_sequence_count

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'identifier' => :'identifier',
        :'token' => :'token',
        :'user_token' => :'user_token',
        :'business_token' => :'business_token',
        :'acting_user_token' => :'acting_user_token',
        :'card_token' => :'card_token',
        :'type' => :'type',
        :'state' => :'state',
        :'duration' => :'duration',
        :'created_time' => :'created_time',
        :'user_transaction_time' => :'user_transaction_time',
        :'settlement_date' => :'settlement_date',
        :'request_amount' => :'request_amount',
        :'amount' => :'amount',
        :'cash_back_amount' => :'cash_back_amount',
        :'currency_conversion' => :'currency_conversion',
        :'issuer_interchange_amount' => :'issuer_interchange_amount',
        :'currency_code' => :'currency_code',
        :'approval_code' => :'approval_code',
        :'response' => :'response',
        :'preceding_related_transaction_token' => :'preceding_related_transaction_token',
        :'preceding_transaction' => :'preceding_transaction',
        :'amount_to_be_released' => :'amount_to_be_released',
        :'incremental_authorization_transaction_tokens' => :'incremental_authorization_transaction_tokens',
        :'merchant' => :'merchant',
        :'store' => :'store',
        :'card_acceptor' => :'card_acceptor',
        :'gpa' => :'gpa',
        :'card' => :'card',
        :'gpa_order_unload' => :'gpa_order_unload',
        :'gpa_order' => :'gpa_order',
        :'program_transfer' => :'program_transfer',
        :'fee_transfer' => :'fee_transfer',
        :'peer_transfer' => :'peer_transfer',
        :'msa_orders' => :'msa_orders',
        :'msa_order_unload' => :'msa_order_unload',
        :'offer_orders' => :'offer_orders',
        :'auto_reload' => :'auto_reload',
        :'direct_deposit' => :'direct_deposit',
        :'polarity' => :'polarity',
        :'real_time_fee_group' => :'real_time_fee_group',
        :'fee' => :'fee',
        :'chargeback' => :'chargeback',
        :'dispute' => :'dispute',
        :'network' => :'network',
        :'subnetwork' => :'subnetwork',
        :'network_metadata' => :'network_metadata',
        :'acquirer_fee_amount' => :'acquirer_fee_amount',
        :'fees' => :'fees',
        :'digital_wallet_token' => :'digital_wallet_token',
        :'user' => :'user',
        :'business' => :'business',
        :'acquirer' => :'acquirer',
        :'fraud' => :'fraud',
        :'pos' => :'pos',
        :'address_verification' => :'address_verification',
        :'card_security_code_verification' => :'card_security_code_verification',
        :'transaction_metadata' => :'transaction_metadata',
        :'original_credit' => :'original_credit',
        :'card_holder_model' => :'card_holder_model',
        :'standin_approved_by' => :'standin_approved_by',
        :'standin_by' => :'standin_by',
        :'standin_reason' => :'standin_reason',
        :'network_reference_id' => :'network_reference_id',
        :'acquirer_reference_id' => :'acquirer_reference_id',
        :'cardholder_authentication_data' => :'cardholder_authentication_data',
        :'transaction_attributes' => :'transaction_attributes',
        :'clearing_record_sequence_number' => :'clearing_record_sequence_number',
        :'issuer_received_time' => :'issuer_received_time',
        :'issuer_payment_node' => :'issuer_payment_node',
        :'program' => :'program',
        :'batch_number' => :'batch_number',
        :'from_account' => :'from_account',
        :'multi_clearing_sequence_number' => :'multi_clearing_sequence_number',
        :'multi_clearing_sequence_count' => :'multi_clearing_sequence_count'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'identifier' => :'String',
        :'token' => :'String',
        :'user_token' => :'String',
        :'business_token' => :'String',
        :'acting_user_token' => :'String',
        :'card_token' => :'String',
        :'type' => :'String',
        :'state' => :'String',
        :'duration' => :'Integer',
        :'created_time' => :'Time',
        :'user_transaction_time' => :'Time',
        :'settlement_date' => :'Time',
        :'request_amount' => :'Float',
        :'amount' => :'Float',
        :'cash_back_amount' => :'Float',
        :'currency_conversion' => :'CurrencyConversion',
        :'issuer_interchange_amount' => :'Float',
        :'currency_code' => :'String',
        :'approval_code' => :'String',
        :'response' => :'Response',
        :'preceding_related_transaction_token' => :'String',
        :'preceding_transaction' => :'PrecedingTransaction',
        :'amount_to_be_released' => :'Float',
        :'incremental_authorization_transaction_tokens' => :'Array<String>',
        :'merchant' => :'MerchantResponseModel',
        :'store' => :'StoreResponseModel',
        :'card_acceptor' => :'TransactionCardAcceptor',
        :'gpa' => :'CardholderBalance',
        :'card' => :'CardResponse',
        :'gpa_order_unload' => :'GpaReturns',
        :'gpa_order' => :'GpaResponse',
        :'program_transfer' => :'ProgramTransferResponse',
        :'fee_transfer' => :'FeeTransferResponse',
        :'peer_transfer' => :'PeerTransferResponse',
        :'msa_orders' => :'Array<MsaOrderResponse>',
        :'msa_order_unload' => :'MsaReturns',
        :'offer_orders' => :'Array<OfferOrderResponse>',
        :'auto_reload' => :'AutoReloadModel',
        :'direct_deposit' => :'DepositDepositResponse',
        :'polarity' => :'String',
        :'real_time_fee_group' => :'RealTimeFeeGroup',
        :'fee' => :'Fee',
        :'chargeback' => :'ChargebackResponse',
        :'dispute' => :'DisputeModel',
        :'network' => :'String',
        :'subnetwork' => :'String',
        :'network_metadata' => :'NetworkMetadata',
        :'acquirer_fee_amount' => :'Float',
        :'fees' => :'Array<NetworkFeeModel>',
        :'digital_wallet_token' => :'DigitalWalletToken',
        :'user' => :'CardholderMetadata',
        :'business' => :'BusinessMetadata',
        :'acquirer' => :'Acquirer',
        :'fraud' => :'FraudView',
        :'pos' => :'Pos',
        :'address_verification' => :'AddressVerificationModel',
        :'card_security_code_verification' => :'CardSecurityCodeVerification',
        :'transaction_metadata' => :'TransactionMetadata',
        :'original_credit' => :'OriginalCredit',
        :'card_holder_model' => :'UserCardHolderResponse',
        :'standin_approved_by' => :'String',
        :'standin_by' => :'String',
        :'standin_reason' => :'String',
        :'network_reference_id' => :'String',
        :'acquirer_reference_id' => :'String',
        :'cardholder_authentication_data' => :'CardholderAuthenticationData',
        :'transaction_attributes' => :'Hash<String, String>',
        :'clearing_record_sequence_number' => :'String',
        :'issuer_received_time' => :'String',
        :'issuer_payment_node' => :'String',
        :'program' => :'Program',
        :'batch_number' => :'String',
        :'from_account' => :'String',
        :'multi_clearing_sequence_number' => :'String',
        :'multi_clearing_sequence_count' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Marqeta::TransactionModel` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Marqeta::TransactionModel`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'identifier')
        self.identifier = attributes[:'identifier']
      end

      if attributes.key?(:'token')
        self.token = attributes[:'token']
      end

      if attributes.key?(:'user_token')
        self.user_token = attributes[:'user_token']
      end

      if attributes.key?(:'business_token')
        self.business_token = attributes[:'business_token']
      end

      if attributes.key?(:'acting_user_token')
        self.acting_user_token = attributes[:'acting_user_token']
      end

      if attributes.key?(:'card_token')
        self.card_token = attributes[:'card_token']
      end

      if attributes.key?(:'type')
        self.type = attributes[:'type']
      end

      if attributes.key?(:'state')
        self.state = attributes[:'state']
      end

      if attributes.key?(:'duration')
        self.duration = attributes[:'duration']
      end

      if attributes.key?(:'created_time')
        self.created_time = attributes[:'created_time']
      end

      if attributes.key?(:'user_transaction_time')
        self.user_transaction_time = attributes[:'user_transaction_time']
      end

      if attributes.key?(:'settlement_date')
        self.settlement_date = attributes[:'settlement_date']
      end

      if attributes.key?(:'request_amount')
        self.request_amount = attributes[:'request_amount']
      end

      if attributes.key?(:'amount')
        self.amount = attributes[:'amount']
      end

      if attributes.key?(:'cash_back_amount')
        self.cash_back_amount = attributes[:'cash_back_amount']
      end

      if attributes.key?(:'currency_conversion')
        self.currency_conversion = attributes[:'currency_conversion']
      end

      if attributes.key?(:'issuer_interchange_amount')
        self.issuer_interchange_amount = attributes[:'issuer_interchange_amount']
      end

      if attributes.key?(:'currency_code')
        self.currency_code = attributes[:'currency_code']
      end

      if attributes.key?(:'approval_code')
        self.approval_code = attributes[:'approval_code']
      end

      if attributes.key?(:'response')
        self.response = attributes[:'response']
      end

      if attributes.key?(:'preceding_related_transaction_token')
        self.preceding_related_transaction_token = attributes[:'preceding_related_transaction_token']
      end

      if attributes.key?(:'preceding_transaction')
        self.preceding_transaction = attributes[:'preceding_transaction']
      end

      if attributes.key?(:'amount_to_be_released')
        self.amount_to_be_released = attributes[:'amount_to_be_released']
      end

      if attributes.key?(:'incremental_authorization_transaction_tokens')
        if (value = attributes[:'incremental_authorization_transaction_tokens']).is_a?(Array)
          self.incremental_authorization_transaction_tokens = value
        end
      end

      if attributes.key?(:'merchant')
        self.merchant = attributes[:'merchant']
      end

      if attributes.key?(:'store')
        self.store = attributes[:'store']
      end

      if attributes.key?(:'card_acceptor')
        self.card_acceptor = attributes[:'card_acceptor']
      end

      if attributes.key?(:'gpa')
        self.gpa = attributes[:'gpa']
      end

      if attributes.key?(:'card')
        self.card = attributes[:'card']
      end

      if attributes.key?(:'gpa_order_unload')
        self.gpa_order_unload = attributes[:'gpa_order_unload']
      end

      if attributes.key?(:'gpa_order')
        self.gpa_order = attributes[:'gpa_order']
      end

      if attributes.key?(:'program_transfer')
        self.program_transfer = attributes[:'program_transfer']
      end

      if attributes.key?(:'fee_transfer')
        self.fee_transfer = attributes[:'fee_transfer']
      end

      if attributes.key?(:'peer_transfer')
        self.peer_transfer = attributes[:'peer_transfer']
      end

      if attributes.key?(:'msa_orders')
        if (value = attributes[:'msa_orders']).is_a?(Array)
          self.msa_orders = value
        end
      end

      if attributes.key?(:'msa_order_unload')
        self.msa_order_unload = attributes[:'msa_order_unload']
      end

      if attributes.key?(:'offer_orders')
        if (value = attributes[:'offer_orders']).is_a?(Array)
          self.offer_orders = value
        end
      end

      if attributes.key?(:'auto_reload')
        self.auto_reload = attributes[:'auto_reload']
      end

      if attributes.key?(:'direct_deposit')
        self.direct_deposit = attributes[:'direct_deposit']
      end

      if attributes.key?(:'polarity')
        self.polarity = attributes[:'polarity']
      end

      if attributes.key?(:'real_time_fee_group')
        self.real_time_fee_group = attributes[:'real_time_fee_group']
      end

      if attributes.key?(:'fee')
        self.fee = attributes[:'fee']
      end

      if attributes.key?(:'chargeback')
        self.chargeback = attributes[:'chargeback']
      end

      if attributes.key?(:'dispute')
        self.dispute = attributes[:'dispute']
      end

      if attributes.key?(:'network')
        self.network = attributes[:'network']
      end

      if attributes.key?(:'subnetwork')
        self.subnetwork = attributes[:'subnetwork']
      end

      if attributes.key?(:'network_metadata')
        self.network_metadata = attributes[:'network_metadata']
      end

      if attributes.key?(:'acquirer_fee_amount')
        self.acquirer_fee_amount = attributes[:'acquirer_fee_amount']
      end

      if attributes.key?(:'fees')
        if (value = attributes[:'fees']).is_a?(Array)
          self.fees = value
        end
      end

      if attributes.key?(:'digital_wallet_token')
        self.digital_wallet_token = attributes[:'digital_wallet_token']
      end

      if attributes.key?(:'user')
        self.user = attributes[:'user']
      end

      if attributes.key?(:'business')
        self.business = attributes[:'business']
      end

      if attributes.key?(:'acquirer')
        self.acquirer = attributes[:'acquirer']
      end

      if attributes.key?(:'fraud')
        self.fraud = attributes[:'fraud']
      end

      if attributes.key?(:'pos')
        self.pos = attributes[:'pos']
      end

      if attributes.key?(:'address_verification')
        self.address_verification = attributes[:'address_verification']
      end

      if attributes.key?(:'card_security_code_verification')
        self.card_security_code_verification = attributes[:'card_security_code_verification']
      end

      if attributes.key?(:'transaction_metadata')
        self.transaction_metadata = attributes[:'transaction_metadata']
      end

      if attributes.key?(:'original_credit')
        self.original_credit = attributes[:'original_credit']
      end

      if attributes.key?(:'card_holder_model')
        self.card_holder_model = attributes[:'card_holder_model']
      end

      if attributes.key?(:'standin_approved_by')
        self.standin_approved_by = attributes[:'standin_approved_by']
      end

      if attributes.key?(:'standin_by')
        self.standin_by = attributes[:'standin_by']
      end

      if attributes.key?(:'standin_reason')
        self.standin_reason = attributes[:'standin_reason']
      end

      if attributes.key?(:'network_reference_id')
        self.network_reference_id = attributes[:'network_reference_id']
      end

      if attributes.key?(:'acquirer_reference_id')
        self.acquirer_reference_id = attributes[:'acquirer_reference_id']
      end

      if attributes.key?(:'cardholder_authentication_data')
        self.cardholder_authentication_data = attributes[:'cardholder_authentication_data']
      end

      if attributes.key?(:'transaction_attributes')
        if (value = attributes[:'transaction_attributes']).is_a?(Hash)
          self.transaction_attributes = value
        end
      end

      if attributes.key?(:'clearing_record_sequence_number')
        self.clearing_record_sequence_number = attributes[:'clearing_record_sequence_number']
      end

      if attributes.key?(:'issuer_received_time')
        self.issuer_received_time = attributes[:'issuer_received_time']
      end

      if attributes.key?(:'issuer_payment_node')
        self.issuer_payment_node = attributes[:'issuer_payment_node']
      end

      if attributes.key?(:'program')
        self.program = attributes[:'program']
      end

      if attributes.key?(:'batch_number')
        self.batch_number = attributes[:'batch_number']
      end

      if attributes.key?(:'from_account')
        self.from_account = attributes[:'from_account']
      end

      if attributes.key?(:'multi_clearing_sequence_number')
        self.multi_clearing_sequence_number = attributes[:'multi_clearing_sequence_number']
      end

      if attributes.key?(:'multi_clearing_sequence_count')
        self.multi_clearing_sequence_count = attributes[:'multi_clearing_sequence_count']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @identifier.nil?
        invalid_properties.push('invalid value for "identifier", identifier cannot be nil.')
      end

      if @token.nil?
        invalid_properties.push('invalid value for "token", token cannot be nil.')
      end

      if @token.to_s.length > 36
        invalid_properties.push('invalid value for "token", the character length must be smaller than or equal to 36.')
      end

      if @token.to_s.length < 1
        invalid_properties.push('invalid value for "token", the character length must be great than or equal to 1.')
      end

      if !@user_token.nil? && @user_token.to_s.length > 36
        invalid_properties.push('invalid value for "user_token", the character length must be smaller than or equal to 36.')
      end

      if !@user_token.nil? && @user_token.to_s.length < 0
        invalid_properties.push('invalid value for "user_token", the character length must be great than or equal to 0.')
      end

      if !@business_token.nil? && @business_token.to_s.length > 36
        invalid_properties.push('invalid value for "business_token", the character length must be smaller than or equal to 36.')
      end

      if !@business_token.nil? && @business_token.to_s.length < 0
        invalid_properties.push('invalid value for "business_token", the character length must be great than or equal to 0.')
      end

      if @acting_user_token.nil?
        invalid_properties.push('invalid value for "acting_user_token", acting_user_token cannot be nil.')
      end

      if @acting_user_token.to_s.length > 36
        invalid_properties.push('invalid value for "acting_user_token", the character length must be smaller than or equal to 36.')
      end

      if @acting_user_token.to_s.length < 0
        invalid_properties.push('invalid value for "acting_user_token", the character length must be great than or equal to 0.')
      end

      if !@card_token.nil? && @card_token.to_s.length > 36
        invalid_properties.push('invalid value for "card_token", the character length must be smaller than or equal to 36.')
      end

      if !@card_token.nil? && @card_token.to_s.length < 0
        invalid_properties.push('invalid value for "card_token", the character length must be great than or equal to 0.')
      end

      if @type.nil?
        invalid_properties.push('invalid value for "type", type cannot be nil.')
      end

      if @state.nil?
        invalid_properties.push('invalid value for "state", state cannot be nil.')
      end

      if @amount.nil?
        invalid_properties.push('invalid value for "amount", amount cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @identifier.nil?
      return false if @token.nil?
      return false if @token.to_s.length > 36
      return false if @token.to_s.length < 1
      return false if !@user_token.nil? && @user_token.to_s.length > 36
      return false if !@user_token.nil? && @user_token.to_s.length < 0
      return false if !@business_token.nil? && @business_token.to_s.length > 36
      return false if !@business_token.nil? && @business_token.to_s.length < 0
      return false if @acting_user_token.nil?
      return false if @acting_user_token.to_s.length > 36
      return false if @acting_user_token.to_s.length < 0
      return false if !@card_token.nil? && @card_token.to_s.length > 36
      return false if !@card_token.nil? && @card_token.to_s.length < 0
      return false if @type.nil?
      type_validator = EnumAttributeValidator.new('String', ["gpa.credit", "gpa.credit.pending", "gpa.credit.pending.reversal", "gpa.credit.reversal", "gpa.credit.networkload", "gpa.credit.networkload.reversal", "gpa.debit.networkload", "gpa.debit", "gpa.debit.pending", "gpa.debit.pending.reversal", "gpa.grant", "gpa.credit.issueroperator", "gpa.debit.issueroperator", "gpa.credit.chargeback", "gpa.credit.chargeback.reversal", "gpa.credit.billpayment", "gpa.credit.authorization.billpayment", "gpa.credit.authorization.billpayment.reversal", "msa.credit.pending", "msa.credit.pending.reversal", "msa.credit.reversal", "msa.credit", "msa.debit.pending", "msa.debit.pending.reversal", "msa.debit", "msa.credit.chargeback", "msa.credit.chargeback.reversal", "authorization", "authorization.advice", "authorization.reversal", "authorization.clearing", "authorization.reversal.issuerexpiration", "dispute.credit", "dispute.debit", "authorization.clearing.chargeback", "authorization.clearing.chargeback.reversal", "refund", "pindebit.atm.withdrawal", "pindebit.balanceinquiry", "pindebit.cashback", "pindebit", "programreserve.credit", "programreserve.debit", "fee.charge.pending", "fee.charge", "fee.charge.pending.refund", "funds.expire", "reward.earn", "transfer.peer", "transfer.fee", "account.credit", "account.debit", "balanceinquiry", "authorization.atm.withdrawal", "authorization.clearing.atm.withdrawal", "authorization.cashback", "authorization.clearing.cashback", "transfer.program", "authorization.quasi.cash", "authorization.clearing.quasi.cash", "authorization.incremental", "gpa.credit.authorization", "gpa.credit.authorization.reversal", "gpa.debit.reversal", "original.credit.authorization", "original.credit.authorization.reversal", "original.credit.authorization.clearing", "original.credit.auth_plus_capture", "original.credit.auth_plus_capture.reversal", "refund.authorization", "refund.authorization.advice", "refund.authorization.clearing", "refund.authorization.reversal", "token.activation-request", "token.advice", "pindebit.authorization", "pindebit.authorization.clearing", "pindebit.authorization.reversal", "pindebit.authorization.reversal.issuerexpiration", "authorization.standin", "authorization.clearing.chargeback.completed", "authorization.clearing.chargeback.provisional.credit", "authorization.clearing.chargeback.provisional.debit", "authorization.clearing.chargeback.writeoff", "directdeposit.credit", "directdeposit.credit.pending", "directdeposit.credit.reject", "directdeposit.credit.pending.reversal", "directdeposit.credit.reversal", "directdeposit.debit", "directdeposit.debit.pending", "directdeposit.debit.reject", "directdeposit.debit.reversal", "directdeposit.debit.pending.reversal", "fee.charge.reversal", "pindebit.chargeback", "pindebit.chargeback.completed", "pindebit.chargeback.provisional.credit", "pindebit.chargeback.provisional.debit", "pindebit.chargeback.reversal", "pindebit.chargeback.writeoff", "pindebit.credit.adjustment", "pindebit.quasicash", "pindebit.refund", "pindebit.refund.reversal", "pindebit.reversal", "pindebit.transfer", "pushtocard.debit", "pushtocard.reversal", "unknown"])
      return false unless type_validator.valid?(@type)
      return false if @state.nil?
      state_validator = EnumAttributeValidator.new('String', ["PENDING", "CLEARED", "COMPLETION", "DECLINED", "ERROR", "ALL"])
      return false unless state_validator.valid?(@state)
      return false if @amount.nil?
      polarity_validator = EnumAttributeValidator.new('String', ["CREDIT", "DEBIT", "PENDING_CREDIT", "PENDING_DEBIT"])
      return false unless polarity_validator.valid?(@polarity)
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] token Value to be assigned
    def token=(token)
      if token.nil?
        fail ArgumentError, 'token cannot be nil'
      end

      if token.to_s.length > 36
        fail ArgumentError, 'invalid value for "token", the character length must be smaller than or equal to 36.'
      end

      if token.to_s.length < 1
        fail ArgumentError, 'invalid value for "token", the character length must be great than or equal to 1.'
      end

      @token = token
    end

    # Custom attribute writer method with validation
    # @param [Object] user_token Value to be assigned
    def user_token=(user_token)
      if !user_token.nil? && user_token.to_s.length > 36
        fail ArgumentError, 'invalid value for "user_token", the character length must be smaller than or equal to 36.'
      end

      if !user_token.nil? && user_token.to_s.length < 0
        fail ArgumentError, 'invalid value for "user_token", the character length must be great than or equal to 0.'
      end

      @user_token = user_token
    end

    # Custom attribute writer method with validation
    # @param [Object] business_token Value to be assigned
    def business_token=(business_token)
      if !business_token.nil? && business_token.to_s.length > 36
        fail ArgumentError, 'invalid value for "business_token", the character length must be smaller than or equal to 36.'
      end

      if !business_token.nil? && business_token.to_s.length < 0
        fail ArgumentError, 'invalid value for "business_token", the character length must be great than or equal to 0.'
      end

      @business_token = business_token
    end

    # Custom attribute writer method with validation
    # @param [Object] acting_user_token Value to be assigned
    def acting_user_token=(acting_user_token)
      if acting_user_token.nil?
        fail ArgumentError, 'acting_user_token cannot be nil'
      end

      if acting_user_token.to_s.length > 36
        fail ArgumentError, 'invalid value for "acting_user_token", the character length must be smaller than or equal to 36.'
      end

      if acting_user_token.to_s.length < 0
        fail ArgumentError, 'invalid value for "acting_user_token", the character length must be great than or equal to 0.'
      end

      @acting_user_token = acting_user_token
    end

    # Custom attribute writer method with validation
    # @param [Object] card_token Value to be assigned
    def card_token=(card_token)
      if !card_token.nil? && card_token.to_s.length > 36
        fail ArgumentError, 'invalid value for "card_token", the character length must be smaller than or equal to 36.'
      end

      if !card_token.nil? && card_token.to_s.length < 0
        fail ArgumentError, 'invalid value for "card_token", the character length must be great than or equal to 0.'
      end

      @card_token = card_token
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] type Object to be assigned
    def type=(type)
      validator = EnumAttributeValidator.new('String', ["gpa.credit", "gpa.credit.pending", "gpa.credit.pending.reversal", "gpa.credit.reversal", "gpa.credit.networkload", "gpa.credit.networkload.reversal", "gpa.debit.networkload", "gpa.debit", "gpa.debit.pending", "gpa.debit.pending.reversal", "gpa.grant", "gpa.credit.issueroperator", "gpa.debit.issueroperator", "gpa.credit.chargeback", "gpa.credit.chargeback.reversal", "gpa.credit.billpayment", "gpa.credit.authorization.billpayment", "gpa.credit.authorization.billpayment.reversal", "msa.credit.pending", "msa.credit.pending.reversal", "msa.credit.reversal", "msa.credit", "msa.debit.pending", "msa.debit.pending.reversal", "msa.debit", "msa.credit.chargeback", "msa.credit.chargeback.reversal", "authorization", "authorization.advice", "authorization.reversal", "authorization.clearing", "authorization.reversal.issuerexpiration", "dispute.credit", "dispute.debit", "authorization.clearing.chargeback", "authorization.clearing.chargeback.reversal", "refund", "pindebit.atm.withdrawal", "pindebit.balanceinquiry", "pindebit.cashback", "pindebit", "programreserve.credit", "programreserve.debit", "fee.charge.pending", "fee.charge", "fee.charge.pending.refund", "funds.expire", "reward.earn", "transfer.peer", "transfer.fee", "account.credit", "account.debit", "balanceinquiry", "authorization.atm.withdrawal", "authorization.clearing.atm.withdrawal", "authorization.cashback", "authorization.clearing.cashback", "transfer.program", "authorization.quasi.cash", "authorization.clearing.quasi.cash", "authorization.incremental", "gpa.credit.authorization", "gpa.credit.authorization.reversal", "gpa.debit.reversal", "original.credit.authorization", "original.credit.authorization.reversal", "original.credit.authorization.clearing", "original.credit.auth_plus_capture", "original.credit.auth_plus_capture.reversal", "refund.authorization", "refund.authorization.advice", "refund.authorization.clearing", "refund.authorization.reversal", "token.activation-request", "token.advice", "pindebit.authorization", "pindebit.authorization.clearing", "pindebit.authorization.reversal", "pindebit.authorization.reversal.issuerexpiration", "authorization.standin", "authorization.clearing.chargeback.completed", "authorization.clearing.chargeback.provisional.credit", "authorization.clearing.chargeback.provisional.debit", "authorization.clearing.chargeback.writeoff", "directdeposit.credit", "directdeposit.credit.pending", "directdeposit.credit.reject", "directdeposit.credit.pending.reversal", "directdeposit.credit.reversal", "directdeposit.debit", "directdeposit.debit.pending", "directdeposit.debit.reject", "directdeposit.debit.reversal", "directdeposit.debit.pending.reversal", "fee.charge.reversal", "pindebit.chargeback", "pindebit.chargeback.completed", "pindebit.chargeback.provisional.credit", "pindebit.chargeback.provisional.debit", "pindebit.chargeback.reversal", "pindebit.chargeback.writeoff", "pindebit.credit.adjustment", "pindebit.quasicash", "pindebit.refund", "pindebit.refund.reversal", "pindebit.reversal", "pindebit.transfer", "pushtocard.debit", "pushtocard.reversal", "unknown"])
      unless validator.valid?(type)
        fail ArgumentError, "invalid value for \"type\", must be one of #{validator.allowable_values}."
      end
      @type = type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] state Object to be assigned
    def state=(state)
      validator = EnumAttributeValidator.new('String', ["PENDING", "CLEARED", "COMPLETION", "DECLINED", "ERROR", "ALL"])
      unless validator.valid?(state)
        fail ArgumentError, "invalid value for \"state\", must be one of #{validator.allowable_values}."
      end
      @state = state
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] polarity Object to be assigned
    def polarity=(polarity)
      validator = EnumAttributeValidator.new('String', ["CREDIT", "DEBIT", "PENDING_CREDIT", "PENDING_DEBIT"])
      unless validator.valid?(polarity)
        fail ArgumentError, "invalid value for \"polarity\", must be one of #{validator.allowable_values}."
      end
      @polarity = polarity
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          identifier == o.identifier &&
          token == o.token &&
          user_token == o.user_token &&
          business_token == o.business_token &&
          acting_user_token == o.acting_user_token &&
          card_token == o.card_token &&
          type == o.type &&
          state == o.state &&
          duration == o.duration &&
          created_time == o.created_time &&
          user_transaction_time == o.user_transaction_time &&
          settlement_date == o.settlement_date &&
          request_amount == o.request_amount &&
          amount == o.amount &&
          cash_back_amount == o.cash_back_amount &&
          currency_conversion == o.currency_conversion &&
          issuer_interchange_amount == o.issuer_interchange_amount &&
          currency_code == o.currency_code &&
          approval_code == o.approval_code &&
          response == o.response &&
          preceding_related_transaction_token == o.preceding_related_transaction_token &&
          preceding_transaction == o.preceding_transaction &&
          amount_to_be_released == o.amount_to_be_released &&
          incremental_authorization_transaction_tokens == o.incremental_authorization_transaction_tokens &&
          merchant == o.merchant &&
          store == o.store &&
          card_acceptor == o.card_acceptor &&
          gpa == o.gpa &&
          card == o.card &&
          gpa_order_unload == o.gpa_order_unload &&
          gpa_order == o.gpa_order &&
          program_transfer == o.program_transfer &&
          fee_transfer == o.fee_transfer &&
          peer_transfer == o.peer_transfer &&
          msa_orders == o.msa_orders &&
          msa_order_unload == o.msa_order_unload &&
          offer_orders == o.offer_orders &&
          auto_reload == o.auto_reload &&
          direct_deposit == o.direct_deposit &&
          polarity == o.polarity &&
          real_time_fee_group == o.real_time_fee_group &&
          fee == o.fee &&
          chargeback == o.chargeback &&
          dispute == o.dispute &&
          network == o.network &&
          subnetwork == o.subnetwork &&
          network_metadata == o.network_metadata &&
          acquirer_fee_amount == o.acquirer_fee_amount &&
          fees == o.fees &&
          digital_wallet_token == o.digital_wallet_token &&
          user == o.user &&
          business == o.business &&
          acquirer == o.acquirer &&
          fraud == o.fraud &&
          pos == o.pos &&
          address_verification == o.address_verification &&
          card_security_code_verification == o.card_security_code_verification &&
          transaction_metadata == o.transaction_metadata &&
          original_credit == o.original_credit &&
          card_holder_model == o.card_holder_model &&
          standin_approved_by == o.standin_approved_by &&
          standin_by == o.standin_by &&
          standin_reason == o.standin_reason &&
          network_reference_id == o.network_reference_id &&
          acquirer_reference_id == o.acquirer_reference_id &&
          cardholder_authentication_data == o.cardholder_authentication_data &&
          transaction_attributes == o.transaction_attributes &&
          clearing_record_sequence_number == o.clearing_record_sequence_number &&
          issuer_received_time == o.issuer_received_time &&
          issuer_payment_node == o.issuer_payment_node &&
          program == o.program &&
          batch_number == o.batch_number &&
          from_account == o.from_account &&
          multi_clearing_sequence_number == o.multi_clearing_sequence_number &&
          multi_clearing_sequence_count == o.multi_clearing_sequence_count
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [identifier, token, user_token, business_token, acting_user_token, card_token, type, state, duration, created_time, user_transaction_time, settlement_date, request_amount, amount, cash_back_amount, currency_conversion, issuer_interchange_amount, currency_code, approval_code, response, preceding_related_transaction_token, preceding_transaction, amount_to_be_released, incremental_authorization_transaction_tokens, merchant, store, card_acceptor, gpa, card, gpa_order_unload, gpa_order, program_transfer, fee_transfer, peer_transfer, msa_orders, msa_order_unload, offer_orders, auto_reload, direct_deposit, polarity, real_time_fee_group, fee, chargeback, dispute, network, subnetwork, network_metadata, acquirer_fee_amount, fees, digital_wallet_token, user, business, acquirer, fraud, pos, address_verification, card_security_code_verification, transaction_metadata, original_credit, card_holder_model, standin_approved_by, standin_by, standin_reason, network_reference_id, acquirer_reference_id, cardholder_authentication_data, transaction_attributes, clearing_record_sequence_number, issuer_received_time, issuer_payment_node, program, batch_number, from_account, multi_clearing_sequence_number, multi_clearing_sequence_count].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Marqeta.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
