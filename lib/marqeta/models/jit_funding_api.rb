=begin
#Marqeta Core API

#Simplified management of your payment programs

The version of the OpenAPI document: 3.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.0.0

=end

require 'date'
require 'time'

module Marqeta
  class JitFundingApi
    attr_accessor :token

    attr_accessor :method

    attr_accessor :user_token

    attr_accessor :acting_user_token

    attr_accessor :business_token

    attr_accessor :amount

    attr_accessor :memo

    attr_accessor :tags

    attr_accessor :original_jit_funding_token

    attr_accessor :incremental_authorization_jit_funding_tokens

    attr_accessor :address_verification

    attr_accessor :decline_reason

    attr_accessor :balances

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'token' => :'token',
        :'method' => :'method',
        :'user_token' => :'user_token',
        :'acting_user_token' => :'acting_user_token',
        :'business_token' => :'business_token',
        :'amount' => :'amount',
        :'memo' => :'memo',
        :'tags' => :'tags',
        :'original_jit_funding_token' => :'original_jit_funding_token',
        :'incremental_authorization_jit_funding_tokens' => :'incremental_authorization_jit_funding_tokens',
        :'address_verification' => :'address_verification',
        :'decline_reason' => :'decline_reason',
        :'balances' => :'balances'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'token' => :'String',
        :'method' => :'String',
        :'user_token' => :'String',
        :'acting_user_token' => :'String',
        :'business_token' => :'String',
        :'amount' => :'Float',
        :'memo' => :'String',
        :'tags' => :'String',
        :'original_jit_funding_token' => :'String',
        :'incremental_authorization_jit_funding_tokens' => :'Array<String>',
        :'address_verification' => :'JitAddressVerification',
        :'decline_reason' => :'String',
        :'balances' => :'Hash<String, CardholderBalance>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Marqeta::JitFundingApi` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Marqeta::JitFundingApi`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'token')
        self.token = attributes[:'token']
      end

      if attributes.key?(:'method')
        self.method = attributes[:'method']
      end

      if attributes.key?(:'user_token')
        self.user_token = attributes[:'user_token']
      end

      if attributes.key?(:'acting_user_token')
        self.acting_user_token = attributes[:'acting_user_token']
      end

      if attributes.key?(:'business_token')
        self.business_token = attributes[:'business_token']
      end

      if attributes.key?(:'amount')
        self.amount = attributes[:'amount']
      end

      if attributes.key?(:'memo')
        self.memo = attributes[:'memo']
      end

      if attributes.key?(:'tags')
        self.tags = attributes[:'tags']
      end

      if attributes.key?(:'original_jit_funding_token')
        self.original_jit_funding_token = attributes[:'original_jit_funding_token']
      end

      if attributes.key?(:'incremental_authorization_jit_funding_tokens')
        if (value = attributes[:'incremental_authorization_jit_funding_tokens']).is_a?(Array)
          self.incremental_authorization_jit_funding_tokens = value
        end
      end

      if attributes.key?(:'address_verification')
        self.address_verification = attributes[:'address_verification']
      end

      if attributes.key?(:'decline_reason')
        self.decline_reason = attributes[:'decline_reason']
      end

      if attributes.key?(:'balances')
        if (value = attributes[:'balances']).is_a?(Hash)
          self.balances = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @token.nil?
        invalid_properties.push('invalid value for "token", token cannot be nil.')
      end

      if @token.to_s.length > 36
        invalid_properties.push('invalid value for "token", the character length must be smaller than or equal to 36.')
      end

      if @token.to_s.length < 0
        invalid_properties.push('invalid value for "token", the character length must be great than or equal to 0.')
      end

      if @method.nil?
        invalid_properties.push('invalid value for "method", method cannot be nil.')
      end

      if @user_token.nil?
        invalid_properties.push('invalid value for "user_token", user_token cannot be nil.')
      end

      if @user_token.to_s.length > 36
        invalid_properties.push('invalid value for "user_token", the character length must be smaller than or equal to 36.')
      end

      if @user_token.to_s.length < 0
        invalid_properties.push('invalid value for "user_token", the character length must be great than or equal to 0.')
      end

      if !@acting_user_token.nil? && @acting_user_token.to_s.length > 36
        invalid_properties.push('invalid value for "acting_user_token", the character length must be smaller than or equal to 36.')
      end

      if !@acting_user_token.nil? && @acting_user_token.to_s.length < 0
        invalid_properties.push('invalid value for "acting_user_token", the character length must be great than or equal to 0.')
      end

      if !@business_token.nil? && @business_token.to_s.length > 36
        invalid_properties.push('invalid value for "business_token", the character length must be smaller than or equal to 36.')
      end

      if !@business_token.nil? && @business_token.to_s.length < 0
        invalid_properties.push('invalid value for "business_token", the character length must be great than or equal to 0.')
      end

      if @amount.nil?
        invalid_properties.push('invalid value for "amount", amount cannot be nil.')
      end

      if @amount < 0
        invalid_properties.push('invalid value for "amount", must be greater than or equal to 0.')
      end

      if !@memo.nil? && @memo.to_s.length > 99
        invalid_properties.push('invalid value for "memo", the character length must be smaller than or equal to 99.')
      end

      if !@memo.nil? && @memo.to_s.length < 0
        invalid_properties.push('invalid value for "memo", the character length must be great than or equal to 0.')
      end

      if !@tags.nil? && @tags.to_s.length > 255
        invalid_properties.push('invalid value for "tags", the character length must be smaller than or equal to 255.')
      end

      if !@tags.nil? && @tags.to_s.length < 0
        invalid_properties.push('invalid value for "tags", the character length must be great than or equal to 0.')
      end

      if !@original_jit_funding_token.nil? && @original_jit_funding_token.to_s.length > 36
        invalid_properties.push('invalid value for "original_jit_funding_token", the character length must be smaller than or equal to 36.')
      end

      if !@original_jit_funding_token.nil? && @original_jit_funding_token.to_s.length < 0
        invalid_properties.push('invalid value for "original_jit_funding_token", the character length must be great than or equal to 0.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @token.nil?
      return false if @token.to_s.length > 36
      return false if @token.to_s.length < 0
      return false if @method.nil?
      method_validator = EnumAttributeValidator.new('String', ["pgfs.authorization", "pgfs.balanceinquiry", "pgfs.authorization.incremental", "pgfs.authorization.capture", "pgfs.authorization.reversal", "pgfs.auth_plus_capture", "pgfs.refund", "pgfs.force_capture", "pgfs.authorization.capture.chargeback", "pgfs.authorization.capture.chargeback.reversal", "pgfs.pindebit.chargeback", "pgfs.pindebit.chargeback.reversal", "pgfs.dispute.credit", "pgfs.dispute.debit", "pgfs.directdeposit.credit", "pgfs.directdeposit.debit", "pgfs.directdeposit.credit.reversal", "pgfs.directdeposit.debit.reversal", "pgfs.adjustment.credit", "pgfs.adjustment.debit", "pgfs.auth_plus_capture.standin", "pgfs.authorization.standin", "pgfs.network.load", "pgfs.original.credit.authorization", "pgfs.original.credit.auth_plus_capture", "pgfs.refund.authorization", "pgfs.refund.authorization.reversalpgfs.billpayment", "pgfs.billpayment.capture", "pgfs.billpayment.reversal", "pgfs.authorization.account_verification"])
      return false unless method_validator.valid?(@method)
      return false if @user_token.nil?
      return false if @user_token.to_s.length > 36
      return false if @user_token.to_s.length < 0
      return false if !@acting_user_token.nil? && @acting_user_token.to_s.length > 36
      return false if !@acting_user_token.nil? && @acting_user_token.to_s.length < 0
      return false if !@business_token.nil? && @business_token.to_s.length > 36
      return false if !@business_token.nil? && @business_token.to_s.length < 0
      return false if @amount.nil?
      return false if @amount < 0
      return false if !@memo.nil? && @memo.to_s.length > 99
      return false if !@memo.nil? && @memo.to_s.length < 0
      return false if !@tags.nil? && @tags.to_s.length > 255
      return false if !@tags.nil? && @tags.to_s.length < 0
      return false if !@original_jit_funding_token.nil? && @original_jit_funding_token.to_s.length > 36
      return false if !@original_jit_funding_token.nil? && @original_jit_funding_token.to_s.length < 0
      decline_reason_validator = EnumAttributeValidator.new('String', ["INVALID_AMOUNT", "INSUFFICIENT_FUNDS", "TRANSACTION_NOT_PERMITTED", "SUSPECTED_FRAUD", "AMOUNT_LIMIT_EXCEEDED", "TRANSACTION_COUNT_LIMIT_EXCEEDED", "DUPLICATE_TRANSACTION"])
      return false unless decline_reason_validator.valid?(@decline_reason)
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] token Value to be assigned
    def token=(token)
      if token.nil?
        fail ArgumentError, 'token cannot be nil'
      end

      if token.to_s.length > 36
        fail ArgumentError, 'invalid value for "token", the character length must be smaller than or equal to 36.'
      end

      if token.to_s.length < 0
        fail ArgumentError, 'invalid value for "token", the character length must be great than or equal to 0.'
      end

      @token = token
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] method Object to be assigned
    def method=(method)
      validator = EnumAttributeValidator.new('String', ["pgfs.authorization", "pgfs.balanceinquiry", "pgfs.authorization.incremental", "pgfs.authorization.capture", "pgfs.authorization.reversal", "pgfs.auth_plus_capture", "pgfs.refund", "pgfs.force_capture", "pgfs.authorization.capture.chargeback", "pgfs.authorization.capture.chargeback.reversal", "pgfs.pindebit.chargeback", "pgfs.pindebit.chargeback.reversal", "pgfs.dispute.credit", "pgfs.dispute.debit", "pgfs.directdeposit.credit", "pgfs.directdeposit.debit", "pgfs.directdeposit.credit.reversal", "pgfs.directdeposit.debit.reversal", "pgfs.adjustment.credit", "pgfs.adjustment.debit", "pgfs.auth_plus_capture.standin", "pgfs.authorization.standin", "pgfs.network.load", "pgfs.original.credit.authorization", "pgfs.original.credit.auth_plus_capture", "pgfs.refund.authorization", "pgfs.refund.authorization.reversalpgfs.billpayment", "pgfs.billpayment.capture", "pgfs.billpayment.reversal", "pgfs.authorization.account_verification"])
      unless validator.valid?(method)
        fail ArgumentError, "invalid value for \"method\", must be one of #{validator.allowable_values}."
      end
      @method = method
    end

    # Custom attribute writer method with validation
    # @param [Object] user_token Value to be assigned
    def user_token=(user_token)
      if user_token.nil?
        fail ArgumentError, 'user_token cannot be nil'
      end

      if user_token.to_s.length > 36
        fail ArgumentError, 'invalid value for "user_token", the character length must be smaller than or equal to 36.'
      end

      if user_token.to_s.length < 0
        fail ArgumentError, 'invalid value for "user_token", the character length must be great than or equal to 0.'
      end

      @user_token = user_token
    end

    # Custom attribute writer method with validation
    # @param [Object] acting_user_token Value to be assigned
    def acting_user_token=(acting_user_token)
      if !acting_user_token.nil? && acting_user_token.to_s.length > 36
        fail ArgumentError, 'invalid value for "acting_user_token", the character length must be smaller than or equal to 36.'
      end

      if !acting_user_token.nil? && acting_user_token.to_s.length < 0
        fail ArgumentError, 'invalid value for "acting_user_token", the character length must be great than or equal to 0.'
      end

      @acting_user_token = acting_user_token
    end

    # Custom attribute writer method with validation
    # @param [Object] business_token Value to be assigned
    def business_token=(business_token)
      if !business_token.nil? && business_token.to_s.length > 36
        fail ArgumentError, 'invalid value for "business_token", the character length must be smaller than or equal to 36.'
      end

      if !business_token.nil? && business_token.to_s.length < 0
        fail ArgumentError, 'invalid value for "business_token", the character length must be great than or equal to 0.'
      end

      @business_token = business_token
    end

    # Custom attribute writer method with validation
    # @param [Object] amount Value to be assigned
    def amount=(amount)
      if amount.nil?
        fail ArgumentError, 'amount cannot be nil'
      end

      if amount < 0
        fail ArgumentError, 'invalid value for "amount", must be greater than or equal to 0.'
      end

      @amount = amount
    end

    # Custom attribute writer method with validation
    # @param [Object] memo Value to be assigned
    def memo=(memo)
      if !memo.nil? && memo.to_s.length > 99
        fail ArgumentError, 'invalid value for "memo", the character length must be smaller than or equal to 99.'
      end

      if !memo.nil? && memo.to_s.length < 0
        fail ArgumentError, 'invalid value for "memo", the character length must be great than or equal to 0.'
      end

      @memo = memo
    end

    # Custom attribute writer method with validation
    # @param [Object] tags Value to be assigned
    def tags=(tags)
      if !tags.nil? && tags.to_s.length > 255
        fail ArgumentError, 'invalid value for "tags", the character length must be smaller than or equal to 255.'
      end

      if !tags.nil? && tags.to_s.length < 0
        fail ArgumentError, 'invalid value for "tags", the character length must be great than or equal to 0.'
      end

      @tags = tags
    end

    # Custom attribute writer method with validation
    # @param [Object] original_jit_funding_token Value to be assigned
    def original_jit_funding_token=(original_jit_funding_token)
      if !original_jit_funding_token.nil? && original_jit_funding_token.to_s.length > 36
        fail ArgumentError, 'invalid value for "original_jit_funding_token", the character length must be smaller than or equal to 36.'
      end

      if !original_jit_funding_token.nil? && original_jit_funding_token.to_s.length < 0
        fail ArgumentError, 'invalid value for "original_jit_funding_token", the character length must be great than or equal to 0.'
      end

      @original_jit_funding_token = original_jit_funding_token
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] decline_reason Object to be assigned
    def decline_reason=(decline_reason)
      validator = EnumAttributeValidator.new('String', ["INVALID_AMOUNT", "INSUFFICIENT_FUNDS", "TRANSACTION_NOT_PERMITTED", "SUSPECTED_FRAUD", "AMOUNT_LIMIT_EXCEEDED", "TRANSACTION_COUNT_LIMIT_EXCEEDED", "DUPLICATE_TRANSACTION"])
      unless validator.valid?(decline_reason)
        fail ArgumentError, "invalid value for \"decline_reason\", must be one of #{validator.allowable_values}."
      end
      @decline_reason = decline_reason
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          token == o.token &&
          method == o.method &&
          user_token == o.user_token &&
          acting_user_token == o.acting_user_token &&
          business_token == o.business_token &&
          amount == o.amount &&
          memo == o.memo &&
          tags == o.tags &&
          original_jit_funding_token == o.original_jit_funding_token &&
          incremental_authorization_jit_funding_tokens == o.incremental_authorization_jit_funding_tokens &&
          address_verification == o.address_verification &&
          decline_reason == o.decline_reason &&
          balances == o.balances
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [token, method, user_token, acting_user_token, business_token, amount, memo, tags, original_jit_funding_token, incremental_authorization_jit_funding_tokens, address_verification, decline_reason, balances].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Marqeta.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
