=begin
#Marqeta Core API

#Simplified management of your payment programs

The version of the OpenAPI document: 3.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.0.0

=end

require 'date'
require 'time'

module Marqeta
  class FundingTranlog
    attr_accessor :returned_balances

    attr_accessor :tags

    attr_accessor :transaction_type

    attr_accessor :token

    attr_accessor :ref_transaction

    attr_accessor :node

    attr_accessor :network

    attr_accessor :sub_network

    attr_accessor :mid

    attr_accessor :tid

    attr_accessor :stan

    attr_accessor :ca_name

    attr_accessor :ca_street

    attr_accessor :ca_zip

    attr_accessor :ca_city

    attr_accessor :ca_region

    attr_accessor :ca_country

    attr_accessor :function_code

    attr_accessor :reason_code

    attr_accessor :response_code

    attr_accessor :approval_number

    attr_accessor :display_message

    attr_accessor :date

    attr_accessor :transmission_date

    attr_accessor :local_transaction_date

    attr_accessor :capture_date

    attr_accessor :settlement_date

    attr_accessor :itc

    attr_accessor :irc

    attr_accessor :currency_code

    attr_accessor :amount

    attr_accessor :additional_amount

    attr_accessor :acquirer_fee

    attr_accessor :issuer_fee

    attr_accessor :rc

    attr_accessor :extrc

    attr_accessor :duration

    attr_accessor :cardholder

    attr_accessor :acting_cardholder

    attr_accessor :card

    attr_accessor :account

    attr_accessor :account2

    attr_accessor :mcc

    attr_accessor :network_reference_id

    attr_accessor :acquirer_reference_id

    attr_accessor :retrieval_reference_number

    attr_accessor :forwarding_inst_id

    attr_accessor :network_mid

    attr_accessor :request_amount

    attr_accessor :transaction_state

    attr_accessor :remote_host

    attr_accessor :response_amount

    attr_accessor :expiration_time

    attr_accessor :incoming_network_request_itc

    attr_accessor :digital_wallet_token

    attr_accessor :tranlog_attributes

    attr_accessor :payload

    attr_accessor :layer

    attr_accessor :transaction_name

    attr_accessor :originator

    attr_accessor :acquirer

    attr_accessor :gpaorder

    attr_accessor :gateway_log

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'returned_balances' => :'returnedBalances',
        :'tags' => :'tags',
        :'transaction_type' => :'transactionType',
        :'token' => :'token',
        :'ref_transaction' => :'ref_transaction',
        :'node' => :'node',
        :'network' => :'network',
        :'sub_network' => :'subNetwork',
        :'mid' => :'mid',
        :'tid' => :'tid',
        :'stan' => :'stan',
        :'ca_name' => :'ca_name',
        :'ca_street' => :'ca_street',
        :'ca_zip' => :'ca_zip',
        :'ca_city' => :'ca_city',
        :'ca_region' => :'ca_region',
        :'ca_country' => :'ca_country',
        :'function_code' => :'functionCode',
        :'reason_code' => :'reasonCode',
        :'response_code' => :'responseCode',
        :'approval_number' => :'approvalNumber',
        :'display_message' => :'displayMessage',
        :'date' => :'date',
        :'transmission_date' => :'transmissionDate',
        :'local_transaction_date' => :'localTransactionDate',
        :'capture_date' => :'captureDate',
        :'settlement_date' => :'settlementDate',
        :'itc' => :'itc',
        :'irc' => :'irc',
        :'currency_code' => :'currencyCode',
        :'amount' => :'amount',
        :'additional_amount' => :'additionalAmount',
        :'acquirer_fee' => :'acquirerFee',
        :'issuer_fee' => :'issuerFee',
        :'rc' => :'rc',
        :'extrc' => :'extrc',
        :'duration' => :'duration',
        :'cardholder' => :'cardholder',
        :'acting_cardholder' => :'actingCardholder',
        :'card' => :'card',
        :'account' => :'account',
        :'account2' => :'account2',
        :'mcc' => :'mcc',
        :'network_reference_id' => :'networkReferenceId',
        :'acquirer_reference_id' => :'acquirerReferenceId',
        :'retrieval_reference_number' => :'retrievalReferenceNumber',
        :'forwarding_inst_id' => :'forwardingInstId',
        :'network_mid' => :'networkMid',
        :'request_amount' => :'requestAmount',
        :'transaction_state' => :'transactionState',
        :'remote_host' => :'remoteHost',
        :'response_amount' => :'responseAmount',
        :'expiration_time' => :'expirationTime',
        :'incoming_network_request_itc' => :'incomingNetworkRequestITC',
        :'digital_wallet_token' => :'digital_wallet_token',
        :'tranlog_attributes' => :'tranlogAttributes',
        :'payload' => :'payload',
        :'layer' => :'layer',
        :'transaction_name' => :'transaction_name',
        :'originator' => :'originator',
        :'acquirer' => :'acquirer',
        :'gpaorder' => :'gpaorder',
        :'gateway_log' => :'gatewayLog'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'returned_balances' => :'String',
        :'tags' => :'String',
        :'transaction_type' => :'String',
        :'token' => :'String',
        :'ref_transaction' => :'InternalAuthorizationTransaction',
        :'node' => :'String',
        :'network' => :'String',
        :'sub_network' => :'String',
        :'mid' => :'String',
        :'tid' => :'String',
        :'stan' => :'String',
        :'ca_name' => :'String',
        :'ca_street' => :'String',
        :'ca_zip' => :'String',
        :'ca_city' => :'String',
        :'ca_region' => :'String',
        :'ca_country' => :'String',
        :'function_code' => :'String',
        :'reason_code' => :'String',
        :'response_code' => :'String',
        :'approval_number' => :'String',
        :'display_message' => :'String',
        :'date' => :'Time',
        :'transmission_date' => :'Time',
        :'local_transaction_date' => :'Time',
        :'capture_date' => :'Time',
        :'settlement_date' => :'Time',
        :'itc' => :'String',
        :'irc' => :'String',
        :'currency_code' => :'String',
        :'amount' => :'Float',
        :'additional_amount' => :'Float',
        :'acquirer_fee' => :'Float',
        :'issuer_fee' => :'Float',
        :'rc' => :'String',
        :'extrc' => :'String',
        :'duration' => :'Integer',
        :'cardholder' => :'InternalUser',
        :'acting_cardholder' => :'InternalUser',
        :'card' => :'InternalCard',
        :'account' => :'InternalAccount',
        :'account2' => :'InternalAccount',
        :'mcc' => :'String',
        :'network_reference_id' => :'String',
        :'acquirer_reference_id' => :'String',
        :'retrieval_reference_number' => :'String',
        :'forwarding_inst_id' => :'String',
        :'network_mid' => :'String',
        :'request_amount' => :'Float',
        :'transaction_state' => :'String',
        :'remote_host' => :'String',
        :'response_amount' => :'Float',
        :'expiration_time' => :'Time',
        :'incoming_network_request_itc' => :'String',
        :'digital_wallet_token' => :'InternalDigitalWallet',
        :'tranlog_attributes' => :'Hash<String, String>',
        :'payload' => :'TransactionModel',
        :'layer' => :'Integer',
        :'transaction_name' => :'String',
        :'originator' => :'String',
        :'acquirer' => :'String',
        :'gpaorder' => :'InternalGPAOrder',
        :'gateway_log' => :'InternalGatewayLog'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Marqeta::FundingTranlog` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Marqeta::FundingTranlog`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'returned_balances')
        self.returned_balances = attributes[:'returned_balances']
      end

      if attributes.key?(:'tags')
        self.tags = attributes[:'tags']
      end

      if attributes.key?(:'transaction_type')
        self.transaction_type = attributes[:'transaction_type']
      end

      if attributes.key?(:'token')
        self.token = attributes[:'token']
      end

      if attributes.key?(:'ref_transaction')
        self.ref_transaction = attributes[:'ref_transaction']
      end

      if attributes.key?(:'node')
        self.node = attributes[:'node']
      end

      if attributes.key?(:'network')
        self.network = attributes[:'network']
      end

      if attributes.key?(:'sub_network')
        self.sub_network = attributes[:'sub_network']
      end

      if attributes.key?(:'mid')
        self.mid = attributes[:'mid']
      end

      if attributes.key?(:'tid')
        self.tid = attributes[:'tid']
      end

      if attributes.key?(:'stan')
        self.stan = attributes[:'stan']
      end

      if attributes.key?(:'ca_name')
        self.ca_name = attributes[:'ca_name']
      end

      if attributes.key?(:'ca_street')
        self.ca_street = attributes[:'ca_street']
      end

      if attributes.key?(:'ca_zip')
        self.ca_zip = attributes[:'ca_zip']
      end

      if attributes.key?(:'ca_city')
        self.ca_city = attributes[:'ca_city']
      end

      if attributes.key?(:'ca_region')
        self.ca_region = attributes[:'ca_region']
      end

      if attributes.key?(:'ca_country')
        self.ca_country = attributes[:'ca_country']
      end

      if attributes.key?(:'function_code')
        self.function_code = attributes[:'function_code']
      end

      if attributes.key?(:'reason_code')
        self.reason_code = attributes[:'reason_code']
      end

      if attributes.key?(:'response_code')
        self.response_code = attributes[:'response_code']
      end

      if attributes.key?(:'approval_number')
        self.approval_number = attributes[:'approval_number']
      end

      if attributes.key?(:'display_message')
        self.display_message = attributes[:'display_message']
      end

      if attributes.key?(:'date')
        self.date = attributes[:'date']
      end

      if attributes.key?(:'transmission_date')
        self.transmission_date = attributes[:'transmission_date']
      end

      if attributes.key?(:'local_transaction_date')
        self.local_transaction_date = attributes[:'local_transaction_date']
      end

      if attributes.key?(:'capture_date')
        self.capture_date = attributes[:'capture_date']
      end

      if attributes.key?(:'settlement_date')
        self.settlement_date = attributes[:'settlement_date']
      end

      if attributes.key?(:'itc')
        self.itc = attributes[:'itc']
      end

      if attributes.key?(:'irc')
        self.irc = attributes[:'irc']
      end

      if attributes.key?(:'currency_code')
        self.currency_code = attributes[:'currency_code']
      end

      if attributes.key?(:'amount')
        self.amount = attributes[:'amount']
      end

      if attributes.key?(:'additional_amount')
        self.additional_amount = attributes[:'additional_amount']
      end

      if attributes.key?(:'acquirer_fee')
        self.acquirer_fee = attributes[:'acquirer_fee']
      end

      if attributes.key?(:'issuer_fee')
        self.issuer_fee = attributes[:'issuer_fee']
      end

      if attributes.key?(:'rc')
        self.rc = attributes[:'rc']
      end

      if attributes.key?(:'extrc')
        self.extrc = attributes[:'extrc']
      end

      if attributes.key?(:'duration')
        self.duration = attributes[:'duration']
      end

      if attributes.key?(:'cardholder')
        self.cardholder = attributes[:'cardholder']
      end

      if attributes.key?(:'acting_cardholder')
        self.acting_cardholder = attributes[:'acting_cardholder']
      end

      if attributes.key?(:'card')
        self.card = attributes[:'card']
      end

      if attributes.key?(:'account')
        self.account = attributes[:'account']
      end

      if attributes.key?(:'account2')
        self.account2 = attributes[:'account2']
      end

      if attributes.key?(:'mcc')
        self.mcc = attributes[:'mcc']
      end

      if attributes.key?(:'network_reference_id')
        self.network_reference_id = attributes[:'network_reference_id']
      end

      if attributes.key?(:'acquirer_reference_id')
        self.acquirer_reference_id = attributes[:'acquirer_reference_id']
      end

      if attributes.key?(:'retrieval_reference_number')
        self.retrieval_reference_number = attributes[:'retrieval_reference_number']
      end

      if attributes.key?(:'forwarding_inst_id')
        self.forwarding_inst_id = attributes[:'forwarding_inst_id']
      end

      if attributes.key?(:'network_mid')
        self.network_mid = attributes[:'network_mid']
      end

      if attributes.key?(:'request_amount')
        self.request_amount = attributes[:'request_amount']
      end

      if attributes.key?(:'transaction_state')
        self.transaction_state = attributes[:'transaction_state']
      end

      if attributes.key?(:'remote_host')
        self.remote_host = attributes[:'remote_host']
      end

      if attributes.key?(:'response_amount')
        self.response_amount = attributes[:'response_amount']
      end

      if attributes.key?(:'expiration_time')
        self.expiration_time = attributes[:'expiration_time']
      end

      if attributes.key?(:'incoming_network_request_itc')
        self.incoming_network_request_itc = attributes[:'incoming_network_request_itc']
      end

      if attributes.key?(:'digital_wallet_token')
        self.digital_wallet_token = attributes[:'digital_wallet_token']
      end

      if attributes.key?(:'tranlog_attributes')
        if (value = attributes[:'tranlog_attributes']).is_a?(Hash)
          self.tranlog_attributes = value
        end
      end

      if attributes.key?(:'payload')
        self.payload = attributes[:'payload']
      end

      if attributes.key?(:'layer')
        self.layer = attributes[:'layer']
      end

      if attributes.key?(:'transaction_name')
        self.transaction_name = attributes[:'transaction_name']
      end

      if attributes.key?(:'originator')
        self.originator = attributes[:'originator']
      end

      if attributes.key?(:'acquirer')
        self.acquirer = attributes[:'acquirer']
      end

      if attributes.key?(:'gpaorder')
        self.gpaorder = attributes[:'gpaorder']
      end

      if attributes.key?(:'gateway_log')
        self.gateway_log = attributes[:'gateway_log']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @transaction_type.nil?
        invalid_properties.push('invalid value for "transaction_type", transaction_type cannot be nil.')
      end

      if @token.nil?
        invalid_properties.push('invalid value for "token", token cannot be nil.')
      end

      if @node.nil?
        invalid_properties.push('invalid value for "node", node cannot be nil.')
      end

      if @network.nil?
        invalid_properties.push('invalid value for "network", network cannot be nil.')
      end

      if @sub_network.nil?
        invalid_properties.push('invalid value for "sub_network", sub_network cannot be nil.')
      end

      if @gpaorder.nil?
        invalid_properties.push('invalid value for "gpaorder", gpaorder cannot be nil.')
      end

      if @gateway_log.nil?
        invalid_properties.push('invalid value for "gateway_log", gateway_log cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @transaction_type.nil?
      return false if @token.nil?
      return false if @node.nil?
      return false if @network.nil?
      return false if @sub_network.nil?
      transaction_state_validator = EnumAttributeValidator.new('String', ["PENDING", "CLEARED", "COMPLETION", "DECLINED", "ERROR", "ALL"])
      return false unless transaction_state_validator.valid?(@transaction_state)
      return false if @gpaorder.nil?
      return false if @gateway_log.nil?
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] transaction_state Object to be assigned
    def transaction_state=(transaction_state)
      validator = EnumAttributeValidator.new('String', ["PENDING", "CLEARED", "COMPLETION", "DECLINED", "ERROR", "ALL"])
      unless validator.valid?(transaction_state)
        fail ArgumentError, "invalid value for \"transaction_state\", must be one of #{validator.allowable_values}."
      end
      @transaction_state = transaction_state
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          returned_balances == o.returned_balances &&
          tags == o.tags &&
          transaction_type == o.transaction_type &&
          token == o.token &&
          ref_transaction == o.ref_transaction &&
          node == o.node &&
          network == o.network &&
          sub_network == o.sub_network &&
          mid == o.mid &&
          tid == o.tid &&
          stan == o.stan &&
          ca_name == o.ca_name &&
          ca_street == o.ca_street &&
          ca_zip == o.ca_zip &&
          ca_city == o.ca_city &&
          ca_region == o.ca_region &&
          ca_country == o.ca_country &&
          function_code == o.function_code &&
          reason_code == o.reason_code &&
          response_code == o.response_code &&
          approval_number == o.approval_number &&
          display_message == o.display_message &&
          date == o.date &&
          transmission_date == o.transmission_date &&
          local_transaction_date == o.local_transaction_date &&
          capture_date == o.capture_date &&
          settlement_date == o.settlement_date &&
          itc == o.itc &&
          irc == o.irc &&
          currency_code == o.currency_code &&
          amount == o.amount &&
          additional_amount == o.additional_amount &&
          acquirer_fee == o.acquirer_fee &&
          issuer_fee == o.issuer_fee &&
          rc == o.rc &&
          extrc == o.extrc &&
          duration == o.duration &&
          cardholder == o.cardholder &&
          acting_cardholder == o.acting_cardholder &&
          card == o.card &&
          account == o.account &&
          account2 == o.account2 &&
          mcc == o.mcc &&
          network_reference_id == o.network_reference_id &&
          acquirer_reference_id == o.acquirer_reference_id &&
          retrieval_reference_number == o.retrieval_reference_number &&
          forwarding_inst_id == o.forwarding_inst_id &&
          network_mid == o.network_mid &&
          request_amount == o.request_amount &&
          transaction_state == o.transaction_state &&
          remote_host == o.remote_host &&
          response_amount == o.response_amount &&
          expiration_time == o.expiration_time &&
          incoming_network_request_itc == o.incoming_network_request_itc &&
          digital_wallet_token == o.digital_wallet_token &&
          tranlog_attributes == o.tranlog_attributes &&
          payload == o.payload &&
          layer == o.layer &&
          transaction_name == o.transaction_name &&
          originator == o.originator &&
          acquirer == o.acquirer &&
          gpaorder == o.gpaorder &&
          gateway_log == o.gateway_log
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [returned_balances, tags, transaction_type, token, ref_transaction, node, network, sub_network, mid, tid, stan, ca_name, ca_street, ca_zip, ca_city, ca_region, ca_country, function_code, reason_code, response_code, approval_number, display_message, date, transmission_date, local_transaction_date, capture_date, settlement_date, itc, irc, currency_code, amount, additional_amount, acquirer_fee, issuer_fee, rc, extrc, duration, cardholder, acting_cardholder, card, account, account2, mcc, network_reference_id, acquirer_reference_id, retrieval_reference_number, forwarding_inst_id, network_mid, request_amount, transaction_state, remote_host, response_amount, expiration_time, incoming_network_request_itc, digital_wallet_token, tranlog_attributes, payload, layer, transaction_name, originator, acquirer, gpaorder, gateway_log].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Marqeta.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
