=begin
#Marqeta Core API

#Simplified management of your payment programs

The version of the OpenAPI document: 3.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.0.0

=end

require 'date'
require 'time'

module Marqeta
  class CardholderMsaBalance
    attr_accessor :currency_code

    attr_accessor :ledger_balance

    attr_accessor :available_balance

    attr_accessor :credit_balance

    attr_accessor :cached_balance

    attr_accessor :pending_credits

    attr_accessor :impacted_amount

    attr_accessor :balances

    attr_accessor :last_updated_time

    attr_accessor :name

    attr_accessor :campaign_token

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'currency_code' => :'currency_code',
        :'ledger_balance' => :'ledger_balance',
        :'available_balance' => :'available_balance',
        :'credit_balance' => :'credit_balance',
        :'cached_balance' => :'cached_balance',
        :'pending_credits' => :'pending_credits',
        :'impacted_amount' => :'impacted_amount',
        :'balances' => :'balances',
        :'last_updated_time' => :'last_updated_time',
        :'name' => :'name',
        :'campaign_token' => :'campaign_token'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'currency_code' => :'String',
        :'ledger_balance' => :'Float',
        :'available_balance' => :'Float',
        :'credit_balance' => :'Float',
        :'cached_balance' => :'Float',
        :'pending_credits' => :'Float',
        :'impacted_amount' => :'Float',
        :'balances' => :'Hash<String, CardholderBalance>',
        :'last_updated_time' => :'Time',
        :'name' => :'String',
        :'campaign_token' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Marqeta::CardholderMsaBalance` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Marqeta::CardholderMsaBalance`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'currency_code')
        self.currency_code = attributes[:'currency_code']
      end

      if attributes.key?(:'ledger_balance')
        self.ledger_balance = attributes[:'ledger_balance']
      end

      if attributes.key?(:'available_balance')
        self.available_balance = attributes[:'available_balance']
      end

      if attributes.key?(:'credit_balance')
        self.credit_balance = attributes[:'credit_balance']
      end

      if attributes.key?(:'cached_balance')
        self.cached_balance = attributes[:'cached_balance']
      end

      if attributes.key?(:'pending_credits')
        self.pending_credits = attributes[:'pending_credits']
      end

      if attributes.key?(:'impacted_amount')
        self.impacted_amount = attributes[:'impacted_amount']
      end

      if attributes.key?(:'balances')
        if (value = attributes[:'balances']).is_a?(Hash)
          self.balances = value
        end
      end

      if attributes.key?(:'last_updated_time')
        self.last_updated_time = attributes[:'last_updated_time']
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.key?(:'campaign_token')
        self.campaign_token = attributes[:'campaign_token']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @currency_code.nil?
        invalid_properties.push('invalid value for "currency_code", currency_code cannot be nil.')
      end

      if @ledger_balance.nil?
        invalid_properties.push('invalid value for "ledger_balance", ledger_balance cannot be nil.')
      end

      if @available_balance.nil?
        invalid_properties.push('invalid value for "available_balance", available_balance cannot be nil.')
      end

      if @credit_balance.nil?
        invalid_properties.push('invalid value for "credit_balance", credit_balance cannot be nil.')
      end

      if @cached_balance.nil?
        invalid_properties.push('invalid value for "cached_balance", cached_balance cannot be nil.')
      end

      if @pending_credits.nil?
        invalid_properties.push('invalid value for "pending_credits", pending_credits cannot be nil.')
      end

      if @balances.nil?
        invalid_properties.push('invalid value for "balances", balances cannot be nil.')
      end

      if @last_updated_time.nil?
        invalid_properties.push('invalid value for "last_updated_time", last_updated_time cannot be nil.')
      end

      if @name.nil?
        invalid_properties.push('invalid value for "name", name cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @currency_code.nil?
      return false if @ledger_balance.nil?
      return false if @available_balance.nil?
      return false if @credit_balance.nil?
      return false if @cached_balance.nil?
      return false if @pending_credits.nil?
      return false if @balances.nil?
      return false if @last_updated_time.nil?
      return false if @name.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          currency_code == o.currency_code &&
          ledger_balance == o.ledger_balance &&
          available_balance == o.available_balance &&
          credit_balance == o.credit_balance &&
          cached_balance == o.cached_balance &&
          pending_credits == o.pending_credits &&
          impacted_amount == o.impacted_amount &&
          balances == o.balances &&
          last_updated_time == o.last_updated_time &&
          name == o.name &&
          campaign_token == o.campaign_token
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [currency_code, ledger_balance, available_balance, credit_balance, cached_balance, pending_credits, impacted_amount, balances, last_updated_time, name, campaign_token].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Marqeta.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
