=begin
#Marqeta Core API

#Simplified management of your payment programs

The version of the OpenAPI document: 3.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.0.0

=end

require 'date'
require 'time'

module Marqeta
  class TransactionMetadata
    attr_accessor :transaction_category

    attr_accessor :payment_channel

    attr_accessor :cross_border_transaction

    attr_accessor :authorization_life_cycle

    attr_accessor :is_lodging_auto_rental

    attr_accessor :lodging_auto_rental_start_date

    attr_accessor :transit

    attr_accessor :airline

    attr_accessor :moto_indicator

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'transaction_category' => :'transaction_category',
        :'payment_channel' => :'payment_channel',
        :'cross_border_transaction' => :'cross_border_transaction',
        :'authorization_life_cycle' => :'authorization_life_cycle',
        :'is_lodging_auto_rental' => :'is_lodging_auto_rental',
        :'lodging_auto_rental_start_date' => :'lodging_auto_rental_start_date',
        :'transit' => :'transit',
        :'airline' => :'airline',
        :'moto_indicator' => :'moto_indicator'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'transaction_category' => :'String',
        :'payment_channel' => :'String',
        :'cross_border_transaction' => :'Boolean',
        :'authorization_life_cycle' => :'Integer',
        :'is_lodging_auto_rental' => :'Boolean',
        :'lodging_auto_rental_start_date' => :'Time',
        :'transit' => :'Transit',
        :'airline' => :'Airline',
        :'moto_indicator' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Marqeta::TransactionMetadata` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Marqeta::TransactionMetadata`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'transaction_category')
        self.transaction_category = attributes[:'transaction_category']
      end

      if attributes.key?(:'payment_channel')
        self.payment_channel = attributes[:'payment_channel']
      end

      if attributes.key?(:'cross_border_transaction')
        self.cross_border_transaction = attributes[:'cross_border_transaction']
      else
        self.cross_border_transaction = false
      end

      if attributes.key?(:'authorization_life_cycle')
        self.authorization_life_cycle = attributes[:'authorization_life_cycle']
      end

      if attributes.key?(:'is_lodging_auto_rental')
        self.is_lodging_auto_rental = attributes[:'is_lodging_auto_rental']
      else
        self.is_lodging_auto_rental = false
      end

      if attributes.key?(:'lodging_auto_rental_start_date')
        self.lodging_auto_rental_start_date = attributes[:'lodging_auto_rental_start_date']
      end

      if attributes.key?(:'transit')
        self.transit = attributes[:'transit']
      end

      if attributes.key?(:'airline')
        self.airline = attributes[:'airline']
      end

      if attributes.key?(:'moto_indicator')
        self.moto_indicator = attributes[:'moto_indicator']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      transaction_category_validator = EnumAttributeValidator.new('String', ["RETAIL_SALE", "BILL_PAY", "HOTEL", "HEALTH_CARE", "RESTAURANT", "AUTO_RENTAL", "AIRLINE", "PAYMENT", "HOSPITALIZATION_COLLEGE", "PHONE_MAIL_ECOMMERCE", "ATM", "TRANSIT"])
      return false unless transaction_category_validator.valid?(@transaction_category)
      payment_channel_validator = EnumAttributeValidator.new('String', ["OTHER", "ATM", "ECOMMERCE", "MAIL", "PHONE", "MOTO"])
      return false unless payment_channel_validator.valid?(@payment_channel)
      moto_indicator_validator = EnumAttributeValidator.new('String', ["UNKNOWN", "MANUAL", "RECURRING", "INSTALLMENT", "OTHERS"])
      return false unless moto_indicator_validator.valid?(@moto_indicator)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] transaction_category Object to be assigned
    def transaction_category=(transaction_category)
      validator = EnumAttributeValidator.new('String', ["RETAIL_SALE", "BILL_PAY", "HOTEL", "HEALTH_CARE", "RESTAURANT", "AUTO_RENTAL", "AIRLINE", "PAYMENT", "HOSPITALIZATION_COLLEGE", "PHONE_MAIL_ECOMMERCE", "ATM", "TRANSIT"])
      unless validator.valid?(transaction_category)
        fail ArgumentError, "invalid value for \"transaction_category\", must be one of #{validator.allowable_values}."
      end
      @transaction_category = transaction_category
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] payment_channel Object to be assigned
    def payment_channel=(payment_channel)
      validator = EnumAttributeValidator.new('String', ["OTHER", "ATM", "ECOMMERCE", "MAIL", "PHONE", "MOTO"])
      unless validator.valid?(payment_channel)
        fail ArgumentError, "invalid value for \"payment_channel\", must be one of #{validator.allowable_values}."
      end
      @payment_channel = payment_channel
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] moto_indicator Object to be assigned
    def moto_indicator=(moto_indicator)
      validator = EnumAttributeValidator.new('String', ["UNKNOWN", "MANUAL", "RECURRING", "INSTALLMENT", "OTHERS"])
      unless validator.valid?(moto_indicator)
        fail ArgumentError, "invalid value for \"moto_indicator\", must be one of #{validator.allowable_values}."
      end
      @moto_indicator = moto_indicator
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          transaction_category == o.transaction_category &&
          payment_channel == o.payment_channel &&
          cross_border_transaction == o.cross_border_transaction &&
          authorization_life_cycle == o.authorization_life_cycle &&
          is_lodging_auto_rental == o.is_lodging_auto_rental &&
          lodging_auto_rental_start_date == o.lodging_auto_rental_start_date &&
          transit == o.transit &&
          airline == o.airline &&
          moto_indicator == o.moto_indicator
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [transaction_category, payment_channel, cross_border_transaction, authorization_life_cycle, is_lodging_auto_rental, lodging_auto_rental_start_date, transit, airline, moto_indicator].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Marqeta.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
