=begin
#Marqeta Core API

#Simplified management of your payment programs

The version of the OpenAPI document: 3.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.0.0

=end

require 'date'
require 'time'

module Marqeta
  class Gatewaylog
    attr_accessor :id

    attr_accessor :trace_number

    attr_accessor :payment_type_code

    attr_accessor :ach_transaction_type

    attr_accessor :memo

    attr_accessor :gateway_version

    attr_accessor :gateway_response

    attr_accessor :timed_out

    attr_accessor :deal_id

    attr_accessor :order_id

    attr_accessor :request_method

    attr_accessor :response_code

    attr_accessor :response_subcode

    attr_accessor :response_reasoncode

    attr_accessor :response_message

    attr_accessor :status

    attr_accessor :fraud_avs

    attr_accessor :fraud_auth

    attr_accessor :fraud_cvv

    attr_accessor :gateway_transaction_id

    attr_accessor :original_gateway

    attr_accessor :amount

    attr_accessor :duplicate

    attr_accessor :post_date

    attr_accessor :response_time

    attr_accessor :api_duration

    attr_accessor :gateway_duration

    attr_accessor :ach_status

    attr_accessor :created

    attr_accessor :modified

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'trace_number' => :'traceNumber',
        :'payment_type_code' => :'paymentTypeCode',
        :'ach_transaction_type' => :'achTransactionType',
        :'memo' => :'memo',
        :'gateway_version' => :'gatewayVersion',
        :'gateway_response' => :'gatewayResponse',
        :'timed_out' => :'timedOut',
        :'deal_id' => :'deal_Id',
        :'order_id' => :'order_Id',
        :'request_method' => :'request_method',
        :'response_code' => :'response_code',
        :'response_subcode' => :'response_subcode',
        :'response_reasoncode' => :'response_reasoncode',
        :'response_message' => :'response_message',
        :'status' => :'status',
        :'fraud_avs' => :'fraud_avs',
        :'fraud_auth' => :'fraud_auth',
        :'fraud_cvv' => :'fraud_cvv',
        :'gateway_transaction_id' => :'gateway_transactionId',
        :'original_gateway' => :'original_gateway',
        :'amount' => :'amount',
        :'duplicate' => :'duplicate',
        :'post_date' => :'post_date',
        :'response_time' => :'response_time',
        :'api_duration' => :'api_duration',
        :'gateway_duration' => :'gateway_duration',
        :'ach_status' => :'ach_status',
        :'created' => :'created',
        :'modified' => :'modified'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'id' => :'Integer',
        :'trace_number' => :'Integer',
        :'payment_type_code' => :'String',
        :'ach_transaction_type' => :'String',
        :'memo' => :'String',
        :'gateway_version' => :'String',
        :'gateway_response' => :'GatewayResponse',
        :'timed_out' => :'Boolean',
        :'deal_id' => :'Integer',
        :'order_id' => :'String',
        :'request_method' => :'String',
        :'response_code' => :'String',
        :'response_subcode' => :'String',
        :'response_reasoncode' => :'String',
        :'response_message' => :'String',
        :'status' => :'String',
        :'fraud_avs' => :'String',
        :'fraud_auth' => :'String',
        :'fraud_cvv' => :'String',
        :'gateway_transaction_id' => :'String',
        :'original_gateway' => :'Gatewaylog',
        :'amount' => :'Float',
        :'duplicate' => :'String',
        :'post_date' => :'Time',
        :'response_time' => :'Time',
        :'api_duration' => :'Integer',
        :'gateway_duration' => :'Integer',
        :'ach_status' => :'String',
        :'created' => :'Time',
        :'modified' => :'Time'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Marqeta::Gatewaylog` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Marqeta::Gatewaylog`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'trace_number')
        self.trace_number = attributes[:'trace_number']
      end

      if attributes.key?(:'payment_type_code')
        self.payment_type_code = attributes[:'payment_type_code']
      end

      if attributes.key?(:'ach_transaction_type')
        self.ach_transaction_type = attributes[:'ach_transaction_type']
      end

      if attributes.key?(:'memo')
        self.memo = attributes[:'memo']
      end

      if attributes.key?(:'gateway_version')
        self.gateway_version = attributes[:'gateway_version']
      end

      if attributes.key?(:'gateway_response')
        self.gateway_response = attributes[:'gateway_response']
      end

      if attributes.key?(:'timed_out')
        self.timed_out = attributes[:'timed_out']
      else
        self.timed_out = false
      end

      if attributes.key?(:'deal_id')
        self.deal_id = attributes[:'deal_id']
      end

      if attributes.key?(:'order_id')
        self.order_id = attributes[:'order_id']
      end

      if attributes.key?(:'request_method')
        self.request_method = attributes[:'request_method']
      end

      if attributes.key?(:'response_code')
        self.response_code = attributes[:'response_code']
      end

      if attributes.key?(:'response_subcode')
        self.response_subcode = attributes[:'response_subcode']
      end

      if attributes.key?(:'response_reasoncode')
        self.response_reasoncode = attributes[:'response_reasoncode']
      end

      if attributes.key?(:'response_message')
        self.response_message = attributes[:'response_message']
      end

      if attributes.key?(:'status')
        self.status = attributes[:'status']
      end

      if attributes.key?(:'fraud_avs')
        self.fraud_avs = attributes[:'fraud_avs']
      end

      if attributes.key?(:'fraud_auth')
        self.fraud_auth = attributes[:'fraud_auth']
      end

      if attributes.key?(:'fraud_cvv')
        self.fraud_cvv = attributes[:'fraud_cvv']
      end

      if attributes.key?(:'gateway_transaction_id')
        self.gateway_transaction_id = attributes[:'gateway_transaction_id']
      end

      if attributes.key?(:'original_gateway')
        self.original_gateway = attributes[:'original_gateway']
      end

      if attributes.key?(:'amount')
        self.amount = attributes[:'amount']
      end

      if attributes.key?(:'duplicate')
        self.duplicate = attributes[:'duplicate']
      end

      if attributes.key?(:'post_date')
        self.post_date = attributes[:'post_date']
      end

      if attributes.key?(:'response_time')
        self.response_time = attributes[:'response_time']
      end

      if attributes.key?(:'api_duration')
        self.api_duration = attributes[:'api_duration']
      end

      if attributes.key?(:'gateway_duration')
        self.gateway_duration = attributes[:'gateway_duration']
      end

      if attributes.key?(:'ach_status')
        self.ach_status = attributes[:'ach_status']
      end

      if attributes.key?(:'created')
        self.created = attributes[:'created']
      end

      if attributes.key?(:'modified')
        self.modified = attributes[:'modified']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          trace_number == o.trace_number &&
          payment_type_code == o.payment_type_code &&
          ach_transaction_type == o.ach_transaction_type &&
          memo == o.memo &&
          gateway_version == o.gateway_version &&
          gateway_response == o.gateway_response &&
          timed_out == o.timed_out &&
          deal_id == o.deal_id &&
          order_id == o.order_id &&
          request_method == o.request_method &&
          response_code == o.response_code &&
          response_subcode == o.response_subcode &&
          response_reasoncode == o.response_reasoncode &&
          response_message == o.response_message &&
          status == o.status &&
          fraud_avs == o.fraud_avs &&
          fraud_auth == o.fraud_auth &&
          fraud_cvv == o.fraud_cvv &&
          gateway_transaction_id == o.gateway_transaction_id &&
          original_gateway == o.original_gateway &&
          amount == o.amount &&
          duplicate == o.duplicate &&
          post_date == o.post_date &&
          response_time == o.response_time &&
          api_duration == o.api_duration &&
          gateway_duration == o.gateway_duration &&
          ach_status == o.ach_status &&
          created == o.created &&
          modified == o.modified
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [id, trace_number, payment_type_code, ach_transaction_type, memo, gateway_version, gateway_response, timed_out, deal_id, order_id, request_method, response_code, response_subcode, response_reasoncode, response_message, status, fraud_avs, fraud_auth, fraud_cvv, gateway_transaction_id, original_gateway, amount, duplicate, post_date, response_time, api_duration, gateway_duration, ach_status, created, modified].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Marqeta.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
