=begin
#Marqeta Core API

#Simplified management of your payment programs

The version of the OpenAPI document: 3.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.0.0

=end

require 'date'
require 'time'

module Marqeta
  class ClearingRecordRequestModel
    attr_accessor :network_fees

    attr_accessor :webhook

    attr_accessor :mid

    attr_accessor :amount

    attr_accessor :source_amount

    attr_accessor :reconciliation_amount

    attr_accessor :replacement_amount

    attr_accessor :cardholder_billing_amount

    attr_accessor :cashback

    attr_accessor :local_transaction_amount

    attr_accessor :local_currency_code

    attr_accessor :cardholder_billing_conversion_rate

    attr_accessor :cardholder_billing_currency

    attr_accessor :card_token

    attr_accessor :card_hash

    attr_accessor :acquirer_reference_id

    attr_accessor :rrn

    attr_accessor :stan

    attr_accessor :processing_code

    attr_accessor :acquirer_fee

    attr_accessor :issuer_fee

    attr_accessor :function_code

    attr_accessor :reason_code

    attr_accessor :approval_code

    # yyyy-MM-dd, yyyy-MM-ddThh:mm:ssZ
    attr_accessor :transaction_date

    # yyyy-MM-dd, yyyy-MM-ddThh:mm:ssZ
    attr_accessor :local_transaction_date

    # yyyy-MM-dd, yyyy-MM-ddThh:mm:ssZ
    attr_accessor :settlement_date

    attr_accessor :network_reference_id

    attr_accessor :find_original_window_days

    attr_accessor :batch_number

    attr_accessor :batch_file_name

    attr_accessor :sequence_number

    attr_accessor :multi_clearing_count

    attr_accessor :network

    # Defaults to VISANET if network is VISA
    attr_accessor :sub_network

    attr_accessor :card_acceptor

    attr_accessor :currency_code

    attr_accessor :original_data_elements

    attr_accessor :preceding_related_transaction_token

    attr_accessor :send_expiration_date

    attr_accessor :simulate_batch_for_clearing_record_hash

    attr_accessor :cross_border_indicator

    attr_accessor :token_pan

    attr_accessor :payment_channel_indicator

    attr_accessor :is_installment

    attr_accessor :is_recurring

    attr_accessor :network_metadata

    attr_accessor :authorization_source_code

    attr_accessor :interchange_rate_descriptor

    attr_accessor :mti

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'network_fees' => :'network_fees',
        :'webhook' => :'webhook',
        :'mid' => :'mid',
        :'amount' => :'amount',
        :'source_amount' => :'source_amount',
        :'reconciliation_amount' => :'reconciliation_amount',
        :'replacement_amount' => :'replacement_amount',
        :'cardholder_billing_amount' => :'cardholder_billing_amount',
        :'cashback' => :'cashback',
        :'local_transaction_amount' => :'local_transaction_amount',
        :'local_currency_code' => :'local_currency_code',
        :'cardholder_billing_conversion_rate' => :'cardholder_billing_conversion_rate',
        :'cardholder_billing_currency' => :'cardholder_billing_currency',
        :'card_token' => :'card_token',
        :'card_hash' => :'card_hash',
        :'acquirer_reference_id' => :'acquirer_reference_id',
        :'rrn' => :'rrn',
        :'stan' => :'stan',
        :'processing_code' => :'processing_code',
        :'acquirer_fee' => :'acquirer_fee',
        :'issuer_fee' => :'issuer_fee',
        :'function_code' => :'function_code',
        :'reason_code' => :'reason_code',
        :'approval_code' => :'approval_code',
        :'transaction_date' => :'transaction_date',
        :'local_transaction_date' => :'local_transaction_date',
        :'settlement_date' => :'settlement_date',
        :'network_reference_id' => :'network_reference_id',
        :'find_original_window_days' => :'find_original_window_days',
        :'batch_number' => :'batch_number',
        :'batch_file_name' => :'batch_file_name',
        :'sequence_number' => :'sequence_number',
        :'multi_clearing_count' => :'multi_clearing_count',
        :'network' => :'network',
        :'sub_network' => :'sub_network',
        :'card_acceptor' => :'card_acceptor',
        :'currency_code' => :'currency_code',
        :'original_data_elements' => :'original_data_elements',
        :'preceding_related_transaction_token' => :'preceding_related_transaction_token',
        :'send_expiration_date' => :'send_expiration_date',
        :'simulate_batch_for_clearing_record_hash' => :'simulate_batch_for_clearing_record_hash',
        :'cross_border_indicator' => :'cross_border_indicator',
        :'token_pan' => :'token_pan',
        :'payment_channel_indicator' => :'payment_channel_indicator',
        :'is_installment' => :'is_installment',
        :'is_recurring' => :'is_recurring',
        :'network_metadata' => :'network_metadata',
        :'authorization_source_code' => :'authorization_source_code',
        :'interchange_rate_descriptor' => :'interchange_rate_descriptor',
        :'mti' => :'mti'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'network_fees' => :'Array<NetworkFeeModel>',
        :'webhook' => :'Webhook',
        :'mid' => :'String',
        :'amount' => :'Float',
        :'source_amount' => :'Float',
        :'reconciliation_amount' => :'Float',
        :'replacement_amount' => :'Float',
        :'cardholder_billing_amount' => :'Float',
        :'cashback' => :'Float',
        :'local_transaction_amount' => :'Float',
        :'local_currency_code' => :'String',
        :'cardholder_billing_conversion_rate' => :'Float',
        :'cardholder_billing_currency' => :'String',
        :'card_token' => :'String',
        :'card_hash' => :'String',
        :'acquirer_reference_id' => :'String',
        :'rrn' => :'String',
        :'stan' => :'String',
        :'processing_code' => :'String',
        :'acquirer_fee' => :'MoneyModel',
        :'issuer_fee' => :'MoneyModel',
        :'function_code' => :'String',
        :'reason_code' => :'String',
        :'approval_code' => :'String',
        :'transaction_date' => :'Time',
        :'local_transaction_date' => :'Time',
        :'settlement_date' => :'Time',
        :'network_reference_id' => :'String',
        :'find_original_window_days' => :'Integer',
        :'batch_number' => :'String',
        :'batch_file_name' => :'String',
        :'sequence_number' => :'String',
        :'multi_clearing_count' => :'String',
        :'network' => :'String',
        :'sub_network' => :'String',
        :'card_acceptor' => :'CardAcceptorModel',
        :'currency_code' => :'String',
        :'original_data_elements' => :'OriginalDataElements',
        :'preceding_related_transaction_token' => :'String',
        :'send_expiration_date' => :'Boolean',
        :'simulate_batch_for_clearing_record_hash' => :'Boolean',
        :'cross_border_indicator' => :'String',
        :'token_pan' => :'String',
        :'payment_channel_indicator' => :'String',
        :'is_installment' => :'Boolean',
        :'is_recurring' => :'Boolean',
        :'network_metadata' => :'NetworkMetadata',
        :'authorization_source_code' => :'String',
        :'interchange_rate_descriptor' => :'String',
        :'mti' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Marqeta::ClearingRecordRequestModel` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Marqeta::ClearingRecordRequestModel`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'network_fees')
        if (value = attributes[:'network_fees']).is_a?(Array)
          self.network_fees = value
        end
      end

      if attributes.key?(:'webhook')
        self.webhook = attributes[:'webhook']
      end

      if attributes.key?(:'mid')
        self.mid = attributes[:'mid']
      end

      if attributes.key?(:'amount')
        self.amount = attributes[:'amount']
      end

      if attributes.key?(:'source_amount')
        self.source_amount = attributes[:'source_amount']
      end

      if attributes.key?(:'reconciliation_amount')
        self.reconciliation_amount = attributes[:'reconciliation_amount']
      end

      if attributes.key?(:'replacement_amount')
        self.replacement_amount = attributes[:'replacement_amount']
      end

      if attributes.key?(:'cardholder_billing_amount')
        self.cardholder_billing_amount = attributes[:'cardholder_billing_amount']
      end

      if attributes.key?(:'cashback')
        self.cashback = attributes[:'cashback']
      end

      if attributes.key?(:'local_transaction_amount')
        self.local_transaction_amount = attributes[:'local_transaction_amount']
      end

      if attributes.key?(:'local_currency_code')
        self.local_currency_code = attributes[:'local_currency_code']
      end

      if attributes.key?(:'cardholder_billing_conversion_rate')
        self.cardholder_billing_conversion_rate = attributes[:'cardholder_billing_conversion_rate']
      end

      if attributes.key?(:'cardholder_billing_currency')
        self.cardholder_billing_currency = attributes[:'cardholder_billing_currency']
      end

      if attributes.key?(:'card_token')
        self.card_token = attributes[:'card_token']
      end

      if attributes.key?(:'card_hash')
        self.card_hash = attributes[:'card_hash']
      end

      if attributes.key?(:'acquirer_reference_id')
        self.acquirer_reference_id = attributes[:'acquirer_reference_id']
      end

      if attributes.key?(:'rrn')
        self.rrn = attributes[:'rrn']
      end

      if attributes.key?(:'stan')
        self.stan = attributes[:'stan']
      end

      if attributes.key?(:'processing_code')
        self.processing_code = attributes[:'processing_code']
      end

      if attributes.key?(:'acquirer_fee')
        self.acquirer_fee = attributes[:'acquirer_fee']
      end

      if attributes.key?(:'issuer_fee')
        self.issuer_fee = attributes[:'issuer_fee']
      end

      if attributes.key?(:'function_code')
        self.function_code = attributes[:'function_code']
      end

      if attributes.key?(:'reason_code')
        self.reason_code = attributes[:'reason_code']
      end

      if attributes.key?(:'approval_code')
        self.approval_code = attributes[:'approval_code']
      end

      if attributes.key?(:'transaction_date')
        self.transaction_date = attributes[:'transaction_date']
      end

      if attributes.key?(:'local_transaction_date')
        self.local_transaction_date = attributes[:'local_transaction_date']
      end

      if attributes.key?(:'settlement_date')
        self.settlement_date = attributes[:'settlement_date']
      end

      if attributes.key?(:'network_reference_id')
        self.network_reference_id = attributes[:'network_reference_id']
      end

      if attributes.key?(:'find_original_window_days')
        self.find_original_window_days = attributes[:'find_original_window_days']
      end

      if attributes.key?(:'batch_number')
        self.batch_number = attributes[:'batch_number']
      end

      if attributes.key?(:'batch_file_name')
        self.batch_file_name = attributes[:'batch_file_name']
      end

      if attributes.key?(:'sequence_number')
        self.sequence_number = attributes[:'sequence_number']
      end

      if attributes.key?(:'multi_clearing_count')
        self.multi_clearing_count = attributes[:'multi_clearing_count']
      end

      if attributes.key?(:'network')
        self.network = attributes[:'network']
      end

      if attributes.key?(:'sub_network')
        self.sub_network = attributes[:'sub_network']
      end

      if attributes.key?(:'card_acceptor')
        self.card_acceptor = attributes[:'card_acceptor']
      end

      if attributes.key?(:'currency_code')
        self.currency_code = attributes[:'currency_code']
      end

      if attributes.key?(:'original_data_elements')
        self.original_data_elements = attributes[:'original_data_elements']
      end

      if attributes.key?(:'preceding_related_transaction_token')
        self.preceding_related_transaction_token = attributes[:'preceding_related_transaction_token']
      end

      if attributes.key?(:'send_expiration_date')
        self.send_expiration_date = attributes[:'send_expiration_date']
      else
        self.send_expiration_date = false
      end

      if attributes.key?(:'simulate_batch_for_clearing_record_hash')
        self.simulate_batch_for_clearing_record_hash = attributes[:'simulate_batch_for_clearing_record_hash']
      else
        self.simulate_batch_for_clearing_record_hash = false
      end

      if attributes.key?(:'cross_border_indicator')
        self.cross_border_indicator = attributes[:'cross_border_indicator']
      end

      if attributes.key?(:'token_pan')
        self.token_pan = attributes[:'token_pan']
      end

      if attributes.key?(:'payment_channel_indicator')
        self.payment_channel_indicator = attributes[:'payment_channel_indicator']
      end

      if attributes.key?(:'is_installment')
        self.is_installment = attributes[:'is_installment']
      else
        self.is_installment = false
      end

      if attributes.key?(:'is_recurring')
        self.is_recurring = attributes[:'is_recurring']
      else
        self.is_recurring = false
      end

      if attributes.key?(:'network_metadata')
        self.network_metadata = attributes[:'network_metadata']
      end

      if attributes.key?(:'authorization_source_code')
        self.authorization_source_code = attributes[:'authorization_source_code']
      end

      if attributes.key?(:'interchange_rate_descriptor')
        self.interchange_rate_descriptor = attributes[:'interchange_rate_descriptor']
      end

      if attributes.key?(:'mti')
        self.mti = attributes[:'mti']
      else
        self.mti = '0220'
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if !@mid.nil? && @mid.to_s.length > 50
        invalid_properties.push('invalid value for "mid", the character length must be smaller than or equal to 50.')
      end

      if !@mid.nil? && @mid.to_s.length < 1
        invalid_properties.push('invalid value for "mid", the character length must be great than or equal to 1.')
      end

      if @amount.nil?
        invalid_properties.push('invalid value for "amount", amount cannot be nil.')
      end

      if @source_amount.nil?
        invalid_properties.push('invalid value for "source_amount", source_amount cannot be nil.')
      end

      if @reconciliation_amount.nil?
        invalid_properties.push('invalid value for "reconciliation_amount", reconciliation_amount cannot be nil.')
      end

      if @card_token.nil?
        invalid_properties.push('invalid value for "card_token", card_token cannot be nil.')
      end

      if @card_token.to_s.length > 36
        invalid_properties.push('invalid value for "card_token", the character length must be smaller than or equal to 36.')
      end

      if @card_token.to_s.length < 1
        invalid_properties.push('invalid value for "card_token", the character length must be great than or equal to 1.')
      end

      if @card_hash.nil?
        invalid_properties.push('invalid value for "card_hash", card_hash cannot be nil.')
      end

      if !@acquirer_reference_id.nil? && @acquirer_reference_id.to_s.length > 23
        invalid_properties.push('invalid value for "acquirer_reference_id", the character length must be smaller than or equal to 23.')
      end

      if !@acquirer_reference_id.nil? && @acquirer_reference_id.to_s.length < 1
        invalid_properties.push('invalid value for "acquirer_reference_id", the character length must be great than or equal to 1.')
      end

      if !@rrn.nil? && @rrn.to_s.length > 16
        invalid_properties.push('invalid value for "rrn", the character length must be smaller than or equal to 16.')
      end

      if !@rrn.nil? && @rrn.to_s.length < 1
        invalid_properties.push('invalid value for "rrn", the character length must be great than or equal to 1.')
      end

      if !@stan.nil? && @stan.to_s.length > 12
        invalid_properties.push('invalid value for "stan", the character length must be smaller than or equal to 12.')
      end

      if !@stan.nil? && @stan.to_s.length < 1
        invalid_properties.push('invalid value for "stan", the character length must be great than or equal to 1.')
      end

      if !@processing_code.nil? && @processing_code.to_s.length > 2
        invalid_properties.push('invalid value for "processing_code", the character length must be smaller than or equal to 2.')
      end

      if !@processing_code.nil? && @processing_code.to_s.length < 2
        invalid_properties.push('invalid value for "processing_code", the character length must be great than or equal to 2.')
      end

      if !@function_code.nil? && @function_code.to_s.length > 3
        invalid_properties.push('invalid value for "function_code", the character length must be smaller than or equal to 3.')
      end

      if !@function_code.nil? && @function_code.to_s.length < 3
        invalid_properties.push('invalid value for "function_code", the character length must be great than or equal to 3.')
      end

      if !@reason_code.nil? && @reason_code.to_s.length > 4
        invalid_properties.push('invalid value for "reason_code", the character length must be smaller than or equal to 4.')
      end

      if !@reason_code.nil? && @reason_code.to_s.length < 4
        invalid_properties.push('invalid value for "reason_code", the character length must be great than or equal to 4.')
      end

      if !@approval_code.nil? && @approval_code.to_s.length > 6
        invalid_properties.push('invalid value for "approval_code", the character length must be smaller than or equal to 6.')
      end

      if !@approval_code.nil? && @approval_code.to_s.length < 1
        invalid_properties.push('invalid value for "approval_code", the character length must be great than or equal to 1.')
      end

      if !@network_reference_id.nil? && @network_reference_id.to_s.length > 16
        invalid_properties.push('invalid value for "network_reference_id", the character length must be smaller than or equal to 16.')
      end

      if !@network_reference_id.nil? && @network_reference_id.to_s.length < 1
        invalid_properties.push('invalid value for "network_reference_id", the character length must be great than or equal to 1.')
      end

      if @currency_code.nil?
        invalid_properties.push('invalid value for "currency_code", currency_code cannot be nil.')
      end

      if @currency_code.to_s.length > 3
        invalid_properties.push('invalid value for "currency_code", the character length must be smaller than or equal to 3.')
      end

      if @currency_code.to_s.length < 3
        invalid_properties.push('invalid value for "currency_code", the character length must be great than or equal to 3.')
      end

      if !@token_pan.nil? && @token_pan.to_s.length > 16
        invalid_properties.push('invalid value for "token_pan", the character length must be smaller than or equal to 16.')
      end

      if !@token_pan.nil? && @token_pan.to_s.length < 1
        invalid_properties.push('invalid value for "token_pan", the character length must be great than or equal to 1.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if !@mid.nil? && @mid.to_s.length > 50
      return false if !@mid.nil? && @mid.to_s.length < 1
      return false if @amount.nil?
      return false if @source_amount.nil?
      return false if @reconciliation_amount.nil?
      return false if @card_token.nil?
      return false if @card_token.to_s.length > 36
      return false if @card_token.to_s.length < 1
      return false if @card_hash.nil?
      return false if !@acquirer_reference_id.nil? && @acquirer_reference_id.to_s.length > 23
      return false if !@acquirer_reference_id.nil? && @acquirer_reference_id.to_s.length < 1
      return false if !@rrn.nil? && @rrn.to_s.length > 16
      return false if !@rrn.nil? && @rrn.to_s.length < 1
      return false if !@stan.nil? && @stan.to_s.length > 12
      return false if !@stan.nil? && @stan.to_s.length < 1
      return false if !@processing_code.nil? && @processing_code.to_s.length > 2
      return false if !@processing_code.nil? && @processing_code.to_s.length < 2
      return false if !@function_code.nil? && @function_code.to_s.length > 3
      return false if !@function_code.nil? && @function_code.to_s.length < 3
      return false if !@reason_code.nil? && @reason_code.to_s.length > 4
      return false if !@reason_code.nil? && @reason_code.to_s.length < 4
      return false if !@approval_code.nil? && @approval_code.to_s.length > 6
      return false if !@approval_code.nil? && @approval_code.to_s.length < 1
      return false if !@network_reference_id.nil? && @network_reference_id.to_s.length > 16
      return false if !@network_reference_id.nil? && @network_reference_id.to_s.length < 1
      network_validator = EnumAttributeValidator.new('String', ["DISCOVER", "MASTERCARD", "PULSE", "VISA"])
      return false unless network_validator.valid?(@network)
      sub_network_validator = EnumAttributeValidator.new('String', ["VISANET", "VISANETDEBIT", "VISAINTERLINK", "VISAPLUS"])
      return false unless sub_network_validator.valid?(@sub_network)
      return false if @currency_code.nil?
      return false if @currency_code.to_s.length > 3
      return false if @currency_code.to_s.length < 3
      cross_border_indicator_validator = EnumAttributeValidator.new('String', ["SINGLE_CURRENCY", "MULTI_CURRENCY", "REBATE", "UNKNOWN"])
      return false unless cross_border_indicator_validator.valid?(@cross_border_indicator)
      return false if !@token_pan.nil? && @token_pan.to_s.length > 16
      return false if !@token_pan.nil? && @token_pan.to_s.length < 1
      mti_validator = EnumAttributeValidator.new('String', ["0220", "0420"])
      return false unless mti_validator.valid?(@mti)
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] mid Value to be assigned
    def mid=(mid)
      if !mid.nil? && mid.to_s.length > 50
        fail ArgumentError, 'invalid value for "mid", the character length must be smaller than or equal to 50.'
      end

      if !mid.nil? && mid.to_s.length < 1
        fail ArgumentError, 'invalid value for "mid", the character length must be great than or equal to 1.'
      end

      @mid = mid
    end

    # Custom attribute writer method with validation
    # @param [Object] card_token Value to be assigned
    def card_token=(card_token)
      if card_token.nil?
        fail ArgumentError, 'card_token cannot be nil'
      end

      if card_token.to_s.length > 36
        fail ArgumentError, 'invalid value for "card_token", the character length must be smaller than or equal to 36.'
      end

      if card_token.to_s.length < 1
        fail ArgumentError, 'invalid value for "card_token", the character length must be great than or equal to 1.'
      end

      @card_token = card_token
    end

    # Custom attribute writer method with validation
    # @param [Object] acquirer_reference_id Value to be assigned
    def acquirer_reference_id=(acquirer_reference_id)
      if !acquirer_reference_id.nil? && acquirer_reference_id.to_s.length > 23
        fail ArgumentError, 'invalid value for "acquirer_reference_id", the character length must be smaller than or equal to 23.'
      end

      if !acquirer_reference_id.nil? && acquirer_reference_id.to_s.length < 1
        fail ArgumentError, 'invalid value for "acquirer_reference_id", the character length must be great than or equal to 1.'
      end

      @acquirer_reference_id = acquirer_reference_id
    end

    # Custom attribute writer method with validation
    # @param [Object] rrn Value to be assigned
    def rrn=(rrn)
      if !rrn.nil? && rrn.to_s.length > 16
        fail ArgumentError, 'invalid value for "rrn", the character length must be smaller than or equal to 16.'
      end

      if !rrn.nil? && rrn.to_s.length < 1
        fail ArgumentError, 'invalid value for "rrn", the character length must be great than or equal to 1.'
      end

      @rrn = rrn
    end

    # Custom attribute writer method with validation
    # @param [Object] stan Value to be assigned
    def stan=(stan)
      if !stan.nil? && stan.to_s.length > 12
        fail ArgumentError, 'invalid value for "stan", the character length must be smaller than or equal to 12.'
      end

      if !stan.nil? && stan.to_s.length < 1
        fail ArgumentError, 'invalid value for "stan", the character length must be great than or equal to 1.'
      end

      @stan = stan
    end

    # Custom attribute writer method with validation
    # @param [Object] processing_code Value to be assigned
    def processing_code=(processing_code)
      if !processing_code.nil? && processing_code.to_s.length > 2
        fail ArgumentError, 'invalid value for "processing_code", the character length must be smaller than or equal to 2.'
      end

      if !processing_code.nil? && processing_code.to_s.length < 2
        fail ArgumentError, 'invalid value for "processing_code", the character length must be great than or equal to 2.'
      end

      @processing_code = processing_code
    end

    # Custom attribute writer method with validation
    # @param [Object] function_code Value to be assigned
    def function_code=(function_code)
      if !function_code.nil? && function_code.to_s.length > 3
        fail ArgumentError, 'invalid value for "function_code", the character length must be smaller than or equal to 3.'
      end

      if !function_code.nil? && function_code.to_s.length < 3
        fail ArgumentError, 'invalid value for "function_code", the character length must be great than or equal to 3.'
      end

      @function_code = function_code
    end

    # Custom attribute writer method with validation
    # @param [Object] reason_code Value to be assigned
    def reason_code=(reason_code)
      if !reason_code.nil? && reason_code.to_s.length > 4
        fail ArgumentError, 'invalid value for "reason_code", the character length must be smaller than or equal to 4.'
      end

      if !reason_code.nil? && reason_code.to_s.length < 4
        fail ArgumentError, 'invalid value for "reason_code", the character length must be great than or equal to 4.'
      end

      @reason_code = reason_code
    end

    # Custom attribute writer method with validation
    # @param [Object] approval_code Value to be assigned
    def approval_code=(approval_code)
      if !approval_code.nil? && approval_code.to_s.length > 6
        fail ArgumentError, 'invalid value for "approval_code", the character length must be smaller than or equal to 6.'
      end

      if !approval_code.nil? && approval_code.to_s.length < 1
        fail ArgumentError, 'invalid value for "approval_code", the character length must be great than or equal to 1.'
      end

      @approval_code = approval_code
    end

    # Custom attribute writer method with validation
    # @param [Object] network_reference_id Value to be assigned
    def network_reference_id=(network_reference_id)
      if !network_reference_id.nil? && network_reference_id.to_s.length > 16
        fail ArgumentError, 'invalid value for "network_reference_id", the character length must be smaller than or equal to 16.'
      end

      if !network_reference_id.nil? && network_reference_id.to_s.length < 1
        fail ArgumentError, 'invalid value for "network_reference_id", the character length must be great than or equal to 1.'
      end

      @network_reference_id = network_reference_id
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] network Object to be assigned
    def network=(network)
      validator = EnumAttributeValidator.new('String', ["DISCOVER", "MASTERCARD", "PULSE", "VISA"])
      unless validator.valid?(network)
        fail ArgumentError, "invalid value for \"network\", must be one of #{validator.allowable_values}."
      end
      @network = network
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] sub_network Object to be assigned
    def sub_network=(sub_network)
      validator = EnumAttributeValidator.new('String', ["VISANET", "VISANETDEBIT", "VISAINTERLINK", "VISAPLUS"])
      unless validator.valid?(sub_network)
        fail ArgumentError, "invalid value for \"sub_network\", must be one of #{validator.allowable_values}."
      end
      @sub_network = sub_network
    end

    # Custom attribute writer method with validation
    # @param [Object] currency_code Value to be assigned
    def currency_code=(currency_code)
      if currency_code.nil?
        fail ArgumentError, 'currency_code cannot be nil'
      end

      if currency_code.to_s.length > 3
        fail ArgumentError, 'invalid value for "currency_code", the character length must be smaller than or equal to 3.'
      end

      if currency_code.to_s.length < 3
        fail ArgumentError, 'invalid value for "currency_code", the character length must be great than or equal to 3.'
      end

      @currency_code = currency_code
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] cross_border_indicator Object to be assigned
    def cross_border_indicator=(cross_border_indicator)
      validator = EnumAttributeValidator.new('String', ["SINGLE_CURRENCY", "MULTI_CURRENCY", "REBATE", "UNKNOWN"])
      unless validator.valid?(cross_border_indicator)
        fail ArgumentError, "invalid value for \"cross_border_indicator\", must be one of #{validator.allowable_values}."
      end
      @cross_border_indicator = cross_border_indicator
    end

    # Custom attribute writer method with validation
    # @param [Object] token_pan Value to be assigned
    def token_pan=(token_pan)
      if !token_pan.nil? && token_pan.to_s.length > 16
        fail ArgumentError, 'invalid value for "token_pan", the character length must be smaller than or equal to 16.'
      end

      if !token_pan.nil? && token_pan.to_s.length < 1
        fail ArgumentError, 'invalid value for "token_pan", the character length must be great than or equal to 1.'
      end

      @token_pan = token_pan
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] mti Object to be assigned
    def mti=(mti)
      validator = EnumAttributeValidator.new('String', ["0220", "0420"])
      unless validator.valid?(mti)
        fail ArgumentError, "invalid value for \"mti\", must be one of #{validator.allowable_values}."
      end
      @mti = mti
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          network_fees == o.network_fees &&
          webhook == o.webhook &&
          mid == o.mid &&
          amount == o.amount &&
          source_amount == o.source_amount &&
          reconciliation_amount == o.reconciliation_amount &&
          replacement_amount == o.replacement_amount &&
          cardholder_billing_amount == o.cardholder_billing_amount &&
          cashback == o.cashback &&
          local_transaction_amount == o.local_transaction_amount &&
          local_currency_code == o.local_currency_code &&
          cardholder_billing_conversion_rate == o.cardholder_billing_conversion_rate &&
          cardholder_billing_currency == o.cardholder_billing_currency &&
          card_token == o.card_token &&
          card_hash == o.card_hash &&
          acquirer_reference_id == o.acquirer_reference_id &&
          rrn == o.rrn &&
          stan == o.stan &&
          processing_code == o.processing_code &&
          acquirer_fee == o.acquirer_fee &&
          issuer_fee == o.issuer_fee &&
          function_code == o.function_code &&
          reason_code == o.reason_code &&
          approval_code == o.approval_code &&
          transaction_date == o.transaction_date &&
          local_transaction_date == o.local_transaction_date &&
          settlement_date == o.settlement_date &&
          network_reference_id == o.network_reference_id &&
          find_original_window_days == o.find_original_window_days &&
          batch_number == o.batch_number &&
          batch_file_name == o.batch_file_name &&
          sequence_number == o.sequence_number &&
          multi_clearing_count == o.multi_clearing_count &&
          network == o.network &&
          sub_network == o.sub_network &&
          card_acceptor == o.card_acceptor &&
          currency_code == o.currency_code &&
          original_data_elements == o.original_data_elements &&
          preceding_related_transaction_token == o.preceding_related_transaction_token &&
          send_expiration_date == o.send_expiration_date &&
          simulate_batch_for_clearing_record_hash == o.simulate_batch_for_clearing_record_hash &&
          cross_border_indicator == o.cross_border_indicator &&
          token_pan == o.token_pan &&
          payment_channel_indicator == o.payment_channel_indicator &&
          is_installment == o.is_installment &&
          is_recurring == o.is_recurring &&
          network_metadata == o.network_metadata &&
          authorization_source_code == o.authorization_source_code &&
          interchange_rate_descriptor == o.interchange_rate_descriptor &&
          mti == o.mti
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [network_fees, webhook, mid, amount, source_amount, reconciliation_amount, replacement_amount, cardholder_billing_amount, cashback, local_transaction_amount, local_currency_code, cardholder_billing_conversion_rate, cardholder_billing_currency, card_token, card_hash, acquirer_reference_id, rrn, stan, processing_code, acquirer_fee, issuer_fee, function_code, reason_code, approval_code, transaction_date, local_transaction_date, settlement_date, network_reference_id, find_original_window_days, batch_number, batch_file_name, sequence_number, multi_clearing_count, network, sub_network, card_acceptor, currency_code, original_data_elements, preceding_related_transaction_token, send_expiration_date, simulate_batch_for_clearing_record_hash, cross_border_indicator, token_pan, payment_channel_indicator, is_installment, is_recurring, network_metadata, authorization_source_code, interchange_rate_descriptor, mti].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Marqeta.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
